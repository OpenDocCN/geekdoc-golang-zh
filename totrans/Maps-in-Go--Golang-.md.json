["```\nmap[key_type]value_type\n```", "```\nmap[string]int\n```", "```\nmap[key_type]value_type{}\n```", "```\nemployeeSalary := map[string]int{}\n```", "```\nemployeeSalary := map[string]int{\n\"John\": 1000\n\"Sam\": 2000\n}\n```", "```\nemployeeSalary[\"Tom\"] = 2000\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    //Declare\n    employeeSalary := map[string]int{}\n    fmt.Println(employeeSalary)\n\n    //Intialize using map lieteral\n    employeeSalary = map[string]int{\n        \"John\": 1000,\n        \"Sam\":  1200,\n    }\n\n    //Adding a key value\n    employeeSalary[\"Tom\"] = 2000\n    fmt.Println(employeeSalary)\n}\n```", "```\nmap[]\nmap[John:1000 Sam:1200 Tom:2000]\n```", "```\npackage main\n\nfunc main() {\n    var employeeSalary map[string]int\n    employeeSalary[\"Tom\"] = 2000\n}\n```", "```\npanic: assignment to entry in nil map\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    //Declare\n    employeeSalary := make(map[string]int)\n    //Adding a key value\n    employeeSalary[\"Tom\"] = 2000\n    fmt.Println(employeeSalary)\n}\n```", "```\nmap[Tom:2000]\n```", "```\nmapName[key] = value\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    //Declare\n    employeeSalary := make(map[string]int)\n\n    //Adding a key value\n    employeeSalary[\"Tom\"] = 2000\n    fmt.Pr\n```", "```\nmap[Tom:2000]\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    //Declare\n    employeeSalary := make(map[string]int)\n\n    //Adding a key value\n    fmt.Println(\"Before update\")\n    employeeSalary[\"Tom\"] = 2000\n    fmt.Println(employeeSalary)\n\n    fmt.Println(\"After update\")\n    employeeSalary[\"Tom\"] = 3000\n    fmt.Println(employeeSalary)\n}\n```", "```\nBefore update\nmap[Tom:2000]\nAfter update\nmap[Tom:3000]\n```", "```\nval := mapName[key]\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    //Declare\n    employeeSalary := make(map[string]int)\n\n    //Adding a key value\n    employeeSalary[\"Tom\"] = 2000\n\n    //Retrieve a value \n    salary := employeeSalary[\"Tom\"]\n    fmt.Printf(\"Salary: %d\", salary)\n}\n```", "```\ndelete(map_name, key)\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    //Declare\n    employeeSalary := make(map[string]int)\n\n    //Adding a key value\n    fmt.Println(\"Adding key\")\n    employeeSalary[\"Tom\"] = 2000\n    fmt.Println(employeeSalary)\n\n    fmt.Println(\"\\nDeleting key\")\n    delete(employeeSalary, \"Tom\")\n    fmt.Println(employeeSalary)\n}\n```", "```\nAdding key\nmap[Tom:2000]\n\nDeleting key\nmap[]\n```", "```\nval, ok := mapName[key]\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    //Declare\n    employeeSalary := make(map[string]int)\n\n    //Adding a key value\n    employeeSalary[\"Tom\"] = 2000\n    fmt.Println(\"Key exists case\")\n    val, ok := employeeSalary[\"Tom\"]\n    fmt.Printf(\"Val: %d, ok: %t\\n\", val, ok)\n    fmt.Println(\"Key doesn't exists case\")\n\n    val, ok = employeeSalary[\"Sam\"]\n    fmt.Printf(\"Val: %d, ok: %t\\n\", val, ok)\n}\n```", "```\nKey exists case\nVal: 2000, ok: true\nKey doesn't exists case\nVal: 0, ok: false\n```", "```\n_, ok = employeeSalary[\"Sam\"]\n```", "```\nlen(mapName)\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    //Declare\n    employeeSalary := make(map[string]int)\n\n    //Adding a key value\n    employeeSalary[\"Tom\"] = 2000\n    employeeSalary[\"Sam\"] = 1200\n\n    lenOfMap := len(employeeSalary)\n    fmt.Println(lenOfMap)\n}\n```", "```\n2\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var employeeSalary map[string]int\n    if employeeSalary == nil {\n        fmt.Println(\"employeeSalary map is nil\")\n    }\n}\n```", "```\nemployeeSalary map is nil\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    //Declare\n    employeeSalary := make(map[string]int)\n\n    //Adding a key value\n    employeeSalary[\"Tom\"] = 2000\n    employeeSalary[\"Sam\"] = 1200\n\n    eS := employeeSalary\n\n    //Change employeeSalary\n    employeeSalary[\"John\"] = 3000\n    fmt.Println(\"Changing employeeSalary Map\")\n    fmt.Printf(\"employeeSalary: %v\\n\", employeeSalary)\n    fmt.Printf(\"eS: %v\\n\", eS)\n\n    //Change eS\n    employeeSalary[\"John\"] = 4000\n    fmt.Println(\"\\nChanging eS Map\")\n    fmt.Printf(\"employeeSalary: %v\\n\", employeeSalary)\n    fmt.Printf(\"eS: %v\\n\", eS)\n}\n```", "```\nsample := map[string]string{\n        \"a\": \"x\",\n        \"b\": \"y\",\n}\n```", "```\nfor k, v := range sample {\n   fmt.Printf(\"key :%s value: %s\\n\", k, v)\n}\n```", "```\nkey :a value: x\nkey :b value: y\n```", "```\nfor k := range sample {\n   fmt.Printf(\"key :%s\\n\", k)\n}\n```", "```\nkey :a\nkey :b\n```", "```\nfor _, v := range sample {\n   fmt.Printf(\"value :%s\\n\", v)\n}\n```", "```\nvalue :x\nvalue :y\n```", "```\nkeys := getAllKeys(sample)\nfmt.Println(keys)\n\nfunc getAllKeys(sample map[string]string) []string {\n    var keys []string\n    for k := range sample {\n        keys = append(keys, k)\n    }\n    return keys\n}\n```", "```\n[a b]\n```", "```\npackage main\n\nvar (\n   allData = make(map[string]string)\n)\n\nfunc get(key string) string {\n    return allData[key]\n}\n\nfunc set(key string, value string) {\n    allData[key] = value\n}\n\nfunc main() {\n    go set(\"a\", \"Some Data 1\")\n    go set(\"b\", \"Some Data 2\")\n    go get(\"a\")\n    go get(\"b\")\n    go get(\"a\")\n}\n```", "```\nfatal error: concurrent map read and map write\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"sync\"\n)\n\nvar (\n    allData = make(map[string]string)\n    rwm     sync.RWMutex\n)\n\nfunc get(key string) string {\n    rwm.RLock()\n    defer rwm.RUnlock()\n    return allData[key]\n\n}\n\nfunc set(key string, value string) {\n    rwm.Lock()\n    defer rwm.Unlock()\n    allData[key] = value\n\n}\n\nfunc main() {\n    set(\"a\", \"Some Data\")\n    result := get(\"a\")\n    fmt.Println(result)\n}\n```", "```\nSome data\n```"]