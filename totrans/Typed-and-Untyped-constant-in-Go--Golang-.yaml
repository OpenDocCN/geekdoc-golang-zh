- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:27:57'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Typed and Untyped constant in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/typed-untyped-constant-golang/](https://golangbyexample.com/typed-untyped-constant-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Typed and Untyped Constants](#Typed_and_Untyped_Constants "Typed and
    Untyped Constants")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Typed Constant](#Typed_Constant "Typed Constant")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Untyped Constant](#Untyped_Constant "Untyped Constant")*  *# **Typed and Untyped
    Constants**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In go constant are treated in a different way than any other language. GO has
    a very strong type system that doesn’t allow implicit conversion between any of
    the types. Even with the same numeric types no operation is allowed without explicit
    conversion. For eg you cannot add a **int32** and **int64** value. To add those
    either **int32** has to be explicitly converted to **int64** or vice versa. However
    untyped constant have the flexibility of temporary escape from the GO’s type system
    as we will see in this article
  prefs: []
  type: TYPE_NORMAL
- en: '**Typed Constant**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A const declared specifying the type in the declaration is a typed constant.
    For example below we are declaring a const of type int32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This const a can only be assigned to a variable of type int32\. If you assign
    it to a variable of any other type it will raise an error . For the illustration
    see below program.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Untyped Constant**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An untyped constant is a constant whose type has not been specified. A untyped
    constant in GO can be either named or unnamed. In both cases it doesn’t have any
    type associated with it.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of unnamed untyped constant.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Examples of named untyped constant
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Untyped constant  does have a default hidden type. For example below table illustrates
    hidden default types for numerics, strings, characters and boolean
  prefs: []
  type: TYPE_NORMAL
- en: Default Hidden type for Constants
  prefs: []
  type: TYPE_NORMAL
- en: '| Integers | int |'
  prefs: []
  type: TYPE_TB
- en: '| Floats | float64 |'
  prefs: []
  type: TYPE_TB
- en: '| Complex Numbers | complex128 |'
  prefs: []
  type: TYPE_TB
- en: '| Strings | string |'
  prefs: []
  type: TYPE_TB
- en: '| Booleans | bool |'
  prefs: []
  type: TYPE_TB
- en: '| Characters | int32 or rune |'
  prefs: []
  type: TYPE_TB
- en: When you print any untyped constant using **fmt.Printf** it will print the default
    hidden type. See below program and output for both unnamed and named  untyped
    constant.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The above program prints **int32** instead of rune as rune is an alias for **int32**
  prefs: []
  type: TYPE_NORMAL
- en: The default type of a named or unnamed constant type will become the type of
    variable they are assigned to. For example, in the below code variable a will
    get its type from the default type of unnamed constant **123** which is **int**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Let’s see a program illustrating above points for all unnamed type constant
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now the question which comes to the mind is what is the use of untyped constant. 
    The use of untyped constant is that the type of the constant will be decided depending
    upon the type of variable they are being assigned to.  Sounds confusing? Let’s
    see with an example.
  prefs: []
  type: TYPE_NORMAL
- en: '**Pi** constant value in math package is declared as below.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the type is not specified it only has a hidden default type (which
    is **float64** here).  Let’s see a code
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Notice above program.
  prefs: []
  type: TYPE_NORMAL
- en: Due to untyped nature of **math.Pi** constant it can be assigned to a variable
    of type **float32** as well as **float64**. This is otherwise not possible in
    GO after type is fixed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we print the type of **math.Pi** , it prints the default type which is
    **float64**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending upon use case an untyped constant can be assigned to a low precision
    type (float32) or a high precision type(float64)
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
