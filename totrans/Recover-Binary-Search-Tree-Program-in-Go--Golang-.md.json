["```\npackage main\n\nimport \"fmt\"\n\ntype TreeNode struct {\n\tVal   int\n\tLeft  *TreeNode\n\tRight *TreeNode\n}\n\nfunc recoverTree(root *TreeNode) {\n\tvar prev *TreeNode\n\tvar first *TreeNode\n\tvar mid *TreeNode\n\tvar last *TreeNode\n\n\trecoverTreeUtil(root, &prev, &first, &mid, &last)\n\n\tif first != nil && last != nil {\n\t\tfirst.Val, last.Val = last.Val, first.Val\n\t} else if first != nil && mid != nil {\n\t\tfirst.Val, mid.Val = mid.Val, first.Val\n\t}\n}\n\nfunc recoverTreeUtil(root *TreeNode, prev, first, mid, last **TreeNode) {\n\tif root == nil {\n\t\treturn\n\t}\n\n\trecoverTreeUtil(root.Left, prev, first, mid, last)\n\n\tif *prev == nil {\n\t\t*prev = root\n\t} else if *first == nil && (*prev).Val > root.Val {\n\t\t*first = *prev\n\t\t*mid = root\n\t} else if (*prev).Val > root.Val {\n\t\t*last = root\n\t}\n\n\t*prev = root\n\n\trecoverTreeUtil(root.Right, prev, first, mid, last)\n}\n\nfunc main() {\n\troot := TreeNode{Val: 2}\n\troot.Left = &TreeNode{Val: 3}\n\troot.Right = &TreeNode{Val: 1}\n\n\trecoverTree(&root)\n\tfmt.Println(root.Val)\n\tfmt.Println(root.Left.Val)\n\tfmt.Println(root.Right.Val)\n\n}\n```", "```\n2\n1\n3\n```"]