- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:36:31'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Fprintln function in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/fprintln-golang/](https://golangbyexample.com/fprintln-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![fprintln image](img/3cd9912b7a0733f8200683fac3715644.png)'
  prefs: []
  type: TYPE_IMG
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Program](#Program "Program")*  *## **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fprintln** is defined in the **fmt** package and is used to format a string
    using the default format specifier and write it to **io.Writer** instance passed
    to it. It also adds a new line.'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://golang.org/pkg/fmt/#Fprintln](https://golang.org/pkg/fmt/#Fprintln)'
  prefs: []
  type: TYPE_NORMAL
- en: Below is the function prototype of **Fprintln**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Fprintln** is also a variadic function meaning that it can have multiple
    arguments. Here are the details about its arguments'
  prefs: []
  type: TYPE_NORMAL
- en: The first argument is the **io.Writer** instance to which it writes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next is a variable number of arguments. Each of the arguments in this list
    could be string, int, struct, or anything. That is why it is an empty interface.
    Each of these arguments is formatted using the default specifier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fprintln** formats the string using the default format specifier adds a new
    line after the string. **Fprintln** takes a variable number of arguments where
    each argument is an empty interface. It returns the number of characters printed
    and any error if happens. Since the argument type is an empty interface we can
    pass any data type to it. We can pass a string, int, float, struct, or any other
    data type. Each of the arguments to the **Fprintln** function is formatted according
    to the default format specifier of that argument type. For example, the struct
    will be formatted according to the below specifier'
  prefs: []
  type: TYPE_NORMAL
- en: There is also another function **Fprint** provided by **fmt** package which
    is the same as **Fprintln.** The only difference being
  prefs: []
  type: TYPE_NORMAL
- en: '**Fprintln** appends a new line while **Fprint** does not append a new line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This format specifier only prints the Value part in the struct. Let’s see an
    example.
  prefs: []
  type: TYPE_NORMAL
- en: '**Program**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Some important points to note about the **FPrintln** function
  prefs: []
  type: TYPE_NORMAL
- en: In all the **Fprintln** functions above we pass it the instance of **os.Stdout**
    which implements the **io.Writer** interface. Basically with **os.Stdout**, **Fprintln**
    writes to standard output. This is how **os. Stdout** is defined.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It appends a new line at the end. That is why each of the output is on a different
    line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of the arguments will be separated by space in the output. That is why
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: prints
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Space is introduced automatically between the two arguments.
  prefs: []
  type: TYPE_NORMAL
- en: It returns the number of characters printed or any error if happens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: will output below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The number of **bytesPrinted** is 14 as 14 characters are outputted
  prefs: []
  type: TYPE_NORMAL
- en: '**Fprintln** can also be used to write to a file. Since the file instance in
    golang implements the **io.Writer**, this is not a problem. Below is the program
    for the same'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: It will create file name temp.txt in the current directory with the below contents.
    In this program we replaced **os.Stdou**t with the file created.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Also, check out our Golang advance tutorial Series – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)
  prefs: []
  type: TYPE_NORMAL
- en: '[fprintln](https://golangbyexample.com/tag/fprintln/)*   [go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
