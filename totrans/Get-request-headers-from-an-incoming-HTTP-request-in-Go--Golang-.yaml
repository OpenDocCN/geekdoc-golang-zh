- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:31:28'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Get request headers from an incoming HTTP request in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/headers-http-request-golang/](https://golangbyexample.com/headers-http-request-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Note: Related Post'
  prefs: []
  type: TYPE_NORMAL
- en: Set response headers for an incoming HTTP request in Go – [https://golangbyexample.com/set-resposne-headers-http-go/](https://golangbyexample.com/set-resposne-headers-http-go/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get response headers for an outgoing HTTP request in Golang- [https://golangbyexample.com/get-response-headers-making-go/](https://golangbyexample.com/get-response-headers-making-go/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set headers for an outgoing HTTP request in Go (Golang)– [https://golangbyexample.com/set-headers-http-request/](https://golangbyexample.com/set-headers-http-request/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now let’s look at how we can get request headers in an incoming HTTP request
  prefs: []
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Header.Values method](#Using_HeaderValues_method "Using Header.Values
    method")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using Header.Get method](#Using_HeaderGet_method "Using Header.Get method")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Directly Accessing the Header Struct](#Directly_Accessing_the_Header_Struct
    "Directly Accessing the Header Struct")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Example](#Example "Example")*  *# **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Below is the format in which a Header is represented in go.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: So the header is a key value pair with
  prefs: []
  type: TYPE_NORMAL
- en: key being represented in canonical form. Canonical form means that first character
    and any character following a hyphen is in uppercase. All other characters is
    in lowercase. Example of canonical forms are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Value is represented as a slice of string. Why array of strings? Because it
    is perfectly okay to two headers with same key and different values in a request.
    Both the values will be collected in the slice.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For eg if there are below headers in an incoming request
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Then at server then headers will look like
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that:'
  prefs: []
  type: TYPE_NORMAL
- en: '**content-type** is converted to canonical form **Content-Type**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**content-type** header is represented is an array of string with 1 elements
    **application/json**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**foo** header is represented is an array of string with two elements **bar1**
    and **bar2**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we have seen how a header is represented in the request. Let’s see how we
    can get the header values given a key. Assume we have the below key-value pairs
    of headers
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Header** is present within the **http.Request** struct like as below.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the below example let’s assume that variable **r** of type ***http.Request**
    type. Now let’s see different ways of getting a header value given a key
  prefs: []
  type: TYPE_NORMAL
- en: '**Using Header.Values method**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Used for accessing all values of a header given a key using the Values method.
    Below is the format of the method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Notice that return type is a slice of string. It will return all the values
    associated with a given header key. Also the given key is converted to the canonical
    form first before fetching the values. It can be called as below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: For eg  for
  prefs: []
  type: TYPE_NORMAL
- en: '**r.Header.Values(“content-type”)** it will output **“application/json”**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**r.Header.Values(“foo”)** will output **[“bar1”, “bar2”]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using Header.Get method**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Used for accessing the first value of a header given a key. It is most common
    method used because generally only single value is associated with a header. Below
    is the format of the method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the return type is just a string. It will return the first value
    associated with the given key. Also, the given key is converted to the canonical
    form first before fetching the values. It can be called as below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: For eg  for
  prefs: []
  type: TYPE_NORMAL
- en: '**r.Header.Get(“content-type”)** it will output **“application/json”**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**r.Header.Get(“foo”)** will output **“bar1”**. Only the first value will be
    returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Directly Accessing the Header Struct**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Header map can also be directly accessed which is present within ***http.Request**
  prefs: []
  type: TYPE_NORMAL
- en: For eg
  prefs: []
  type: TYPE_NORMAL
- en: '**r.Header** will output a map'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**r.Header[“Content-Type”]** will output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**r.Header[“Foo”]** will output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Please note that when accessing Header map directly, we need to supply the key
    in canonical form only.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s see a program illustrating all the above points
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In above program we started a server which is listening on port 8080\. We also
    defined a URL on that endpoint. Run this server and make the below API call.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After running this API check the output in the terminal. It will output. You
    can check the output. It is exactly as we have discussed
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
