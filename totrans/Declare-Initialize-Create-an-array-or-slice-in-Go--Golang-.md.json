["```\ns := []int\n```", "```\ns := []int{1,2}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := []int{}\n    fmt.Println(len(sample))\n    fmt.Println(cap(sample))\n    fmt.Println(sample)\n\n    letters := []string{\"a\", \"b\", \"c\"}\n    fmt.Println(len(letters))\n    fmt.Println(cap(letters))\n    fmt.Println(letters)\n}\n```", "```\n0\n0\n[]\n\n3\n3\n[a b c]\n```", "```\n[n]sample[start:end]\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := [5]int{1, 2, 3, 4, 5}\n\n    //Both start and end\n    num1 := numbers[2:4]\n    fmt.Println(\"Both start and end\")\n    fmt.Printf(\"num1=%v\\n\", num1)\n    fmt.Printf(\"length=%d\\n\", len(num1))\n    fmt.Printf(\"capacity=%d\\n\", cap(num1))\n\n    //Only start\n    num2 := numbers[2:]\n    fmt.Println(\"\\nOnly start\")\n    fmt.Printf(\"num1=%v\\n\", num2)\n    fmt.Printf(\"length=%d\\n\", len(num2))\n    fmt.Printf(\"capacity=%d\\n\", cap(num2))\n\n    //Only end\n    num3 := numbers[:3]\n    fmt.Println(\"\\nOnly end\")\n    fmt.Printf(\"num1=%v\\n\", num3)\n    fmt.Printf(\"length=%d\\n\", len(num3))\n    fmt.Printf(\"capacity=%d\\n\", cap(num3))\n\n    //None\n    num4 := numbers[:]\n    fmt.Println(\"\\nOnly end\")\n    fmt.Printf(\"num1=%v\\n\", num4)\n    fmt.Printf(\"length=%d\\n\", len(num4))\n    fmt.Printf(\"capacity=%d\\n\", cap(num4))\n}\n```", "```\nBoth start and end\nnum1=[3 4]\nlength=2\ncapacity=3\n\nOnly start\nnum1=[3 4 5]\nlength=3\ncapacity=3\n\nOnly end\nnum1=[1 2 3]\nlength=3\ncapacity=5\n\nOnly end\nnum1=[1 2 3 4 5]\nlength=5\ncapacity=5\n```", "```\nnumbers[3] = 8\nfmt.Printf(\"num1=%v\\n\", num2)\nfmt.Printf(\"num3=%v\\n\", num3)\nfmt.Printf(\"num4=%v\\n\", num4)\n```", "```\nnum1=[3 8 5]\nnum3=[1 2 3 8]\nnum4=[1 2 3 8 5]\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := []int{1, 2, 3, 4, 5}\n\n    //Both start and end\n    num1 := numbers[2:4]\n    fmt.Println(\"Both start and end\")\n    fmt.Printf(\"num1=%v\\n\", num1)\n    fmt.Printf(\"length=%d\\n\", len(num1))\n    fmt.Printf(\"capacity=%d\\n\", cap(num1))\n\n    //Only start\n    num2 := numbers[2:]\n    fmt.Println(\"\\nOnly start\")\n    fmt.Printf(\"num1=%v\\n\", num2)\n    fmt.Printf(\"length=%d\\n\", len(num2))\n    fmt.Printf(\"capacity=%d\\n\", cap(num2))\n\n    //Only end\n    num3 := numbers[:3]\n    fmt.Println(\"\\nOnly end\")\n    fmt.Printf(\"num1=%v\\n\", num3)\n    fmt.Printf(\"length=%d\\n\", len(num3))\n    fmt.Printf(\"capacity=%d\\n\", cap(num3))\n\n    //None\n    num4 := numbers[:]\n    fmt.Println(\"\\nOnly end\")\n    fmt.Printf(\"num1=%v\\n\", num4)\n    fmt.Printf(\"length=%d\\n\", len(num4))\n    fmt.Printf(\"capacity=%d\\n\", cap(num4))\n}\n```", "```\nBoth start and end\nnum1=[3 4]\nlength=2\ncapacity=3\n\nOnly start\nnum1=[3 4 5]\nlength=3\ncapacity=3\n\nOnly end\nnum1=[1 2 3]\nlength=3\ncapacity=5\n\nOnly end\nnum1=[1 2 3 4 5]\nlength=5\ncapacity=5\n```", "```\nnumbers[3] = 8\nfmt.Printf(\"num1=%v\\n\", num2)\nfmt.Printf(\"num3=%v\\n\", num3)\nfmt.Printf(\"num4=%v\\n\", num4)\n```", "```\nfunc make([]{type}, length, capacity int) []{type}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := make([]int, 3, 5)\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n\n    //With capacity ommited\n    numbers = make([]int, 3)\n    fmt.Println(\"\\nCapacity Ommited\")\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n}\n```", "```\nnumbers=[0 0 0]\nlength=3\ncapacity=5\n\nWith Capacity Ommited\nnumbers=[0 0 0]\nlength=3\ncapacity=3\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := new([]int)\n    fmt.Printf(\"numbers=%v\\n\", *numbers)\n    fmt.Printf(\"length=%d\\n\", len(*numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(*numbers))\n}\n```", "```\nnumbers=[]\nlength=0\ncapacity=0\n```", "```\n[2]int{1, 2}\n```", "```\n[2]int{}\n```", "```\n[...]int{2, 3}\n```", "```\n[...]int{}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    //Both number of elements and actual elements\n    sample1 := [2]int{1, 2}\n    fmt.Printf(\"Sample1: Len: %d, %v\\n\", len(sample1), sample1)\n\n    //Only actual elements\n    sample2 := [...]int{2, 3}\n    fmt.Printf(\"Sample2: Len: %d, %v\\n\", len(sample2), sample2)\n\n    //Only number of elements\n    sample3 := [2]int{}\n    fmt.Printf(\"Sample3: Len: %d, %v\\n\", len(sample3), sample3)\n\n    //Without both number of elements and actual elements\n    sample4 := [...]int{}\n    fmt.Printf(\"Sample4: Len: %d, %v\\n\", len(sample4), sample4)\n}\n```", "```\nSample1: Len: 2, [1 2]\nSample2: Len: 2, [2 3]\nSample3: Len: 2, [0 0]\nSample4: Len: 0, []\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := [4]int{5, 8}\n    fmt.Printf(\"Sample: Len: %d, %v\\n\", len(sample), sample)\n}\n```", "```\nSample: Len: 4, [5 8 0 0]\n```"]