["```\n1->2->4\n1->3->5\n1->3->6\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\ntype TreeNode struct {\n\tVal   int\n\tLeft  *TreeNode\n\tRight *TreeNode\n}\n\nfunc binaryTreePaths(root *TreeNode) []string {\n\toutput := make([]string, 0)\n\n\tbinaryTreePathsUtil(root, \"\", &output)\n\treturn output\n}\n\nfunc binaryTreePathsUtil(root *TreeNode, curr string, output *[]string) {\n\tif root == nil {\n\t\treturn\n\t}\n\n\tvalString := strconv.Itoa(root.Val)\n\tif curr == \"\" {\n\t\tcurr = valString\n\t} else {\n\t\tcurr = curr + \"->\" + valString\n\t}\n\tif root.Left == nil && root.Right == nil {\n\t\t*output = append(*output, curr)\n\t\treturn\n\t}\n\n\tbinaryTreePathsUtil(root.Left, curr, output)\n\tbinaryTreePathsUtil(root.Right, curr, output)\n\n}\n\nfunc main() {\n\troot := TreeNode{Val: 1}\n\troot.Left = &TreeNode{Val: 2}\n\troot.Left.Left = &TreeNode{Val: 4}\n\troot.Right = &TreeNode{Val: 3}\n\troot.Right.Left = &TreeNode{Val: 5}\n\troot.Right.Right = &TreeNode{Val: 6}\n\n\toutput := binaryTreePaths(&root)\n\tfmt.Println(output)\n}\n```", "```\n[1->2->4 1->3->5 1->3->6]\n```"]