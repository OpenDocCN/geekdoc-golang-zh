- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:15:27'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:15:27
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Break number into integer and fraction parts in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Go语言中将数字拆分为整数和小数部分
- en: 来源：[https://golangbyexample.com/break-integer-fraction-part-go/](https://golangbyexample.com/break-integer-fraction-part-go/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/break-integer-fraction-part-go/](https://golangbyexample.com/break-integer-fraction-part-go/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Code](#Code "Code")*  *# **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[代码](#Code "Code")*  *# **概述**'
- en: '**math** package of GO provides a **Modf** method that can be used to break
    a floating-point number into integer and floating part. Please note that the integer
    part is also returned as a float by this function.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: GO的**math**包提供了一个**Modf**方法，可以用来将浮点数拆分为整数部分和浮动部分。请注意，该函数也将整数部分作为浮点数返回。
- en: Below is the signature of the function. It takes input as a float number and
    returns two float64\. The first one is the integer part and second is the fractional
    part.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该函数的签名。它接受一个浮点数作为输入并返回两个float64。第一个是整数部分，第二个是小数部分。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Some points to note about above function
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 关于上述函数的一些注意事项
- en: The return values **int** and **frac** add up to input **f**
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回值**int**和**frac**加起来等于输入**f**
- en: '**int** and **frac** has same sign a input **f**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**int**和**frac**与输入**f**具有相同的符号'
- en: Also some special cases of **Modf** function are
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，**Modf**函数的一些特殊情况是
- en: Modf(±Inf) = ±Inf, NaN
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Modf(±Inf) = ±Inf, NaN
- en: Modf(NaN) = NaN, NaN
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Modf(NaN) = NaN, NaN
- en: '**Code**'
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**代码**'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Output:**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[go](https://golangbyexample.com/tag/go/)*   [integer](https://golangbyexample.com/tag/integer/)*   [math](https://golangbyexample.com/tag/math/)*'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [integer](https://golangbyexample.com/tag/integer/)*   [math](https://golangbyexample.com/tag/math/)*'
