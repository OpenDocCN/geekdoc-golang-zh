- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '分类: 未分类'
- en: 'date: 2024-10-13 06:49:06'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-10-13 06:49:06'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Find all Arithmetic series of length greater than two in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Go (Golang) 中查找所有长度大于二的算术序列
- en: 来源：[https://golangbyexample.com/arithmetic-series-golang/](https://golangbyexample.com/arithmetic-series-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/arithmetic-series-golang/](https://golangbyexample.com/arithmetic-series-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *## **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *## **概述**'
- en: An Arithmetic series is a series in which the difference between each element
    is equal. In this program, an array of integers is given. The objective is to
    find all arithmetic series greater than two.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 算术序列是指每个元素之间的差值相等的序列。在此程序中，给定一个整数数组。目标是找到所有长度大于二的算术序列。
- en: The problem is best understood with an example
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个例子来最好地理解这个问题
- en: Examples
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We have three arithmetic slices of length greater than 2 in the above array
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述数组中我们有三个长度大于 2 的算术片段
- en: 2,3,4
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2,3,4
- en: 3,4,5
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3,4,5
- en: 2,3,4,5
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2,3,4,5
- en: It is a dynamic programming question as it has an optimal substructure. Let’s
    say the name of the array is input
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个动态规划问题，因为它具有最优子结构。假设数组的名称为 input
- en: dp[0] = 0
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: dp[0] = 0
- en: dp[1] = 0
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: dp[1] = 0
- en: dp[2] = 1 if dp[2] – dp[1] == dp[1] – dp[0]
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: dp[2] = 1 如果 dp[2] – dp[1] == dp[1] – dp[0]
- en: dp[i] = 1 if dp[i] – dp[i-1] == dp[i-1] – dp[i-2]
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: dp[i] = 1 如果 dp[i] – dp[i-1] == dp[i-1] – dp[i-2]
- en: where **dp[i]** represents the number of arithmetic series of length greater
    than 2 till length **i+1**
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 **dp[i]** 表示长度大于 2 的算术序列直到长度 **i+1** 的数量
- en: '**Program**'
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Here is the program for the same.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是相应的程序。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Output**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 请查看我们的 Golang 高级教程。本系列教程内容详尽，我们尝试用例子涵盖所有概念。本教程适合那些希望获得专业知识和扎实理解 Golang
    的人 - [Golang 高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you -[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)Arithmetic
    series of length greater than two
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解如何在 Golang 中实现所有设计模式。如果是的话，这篇文章就是为你准备的 - [所有设计模式 Golang](https://golangbyexample.com/all-design-patterns-golang/)长度大于两个的算术序列
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
