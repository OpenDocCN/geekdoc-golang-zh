- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类。
- en: 'date: 2024-10-13 06:42:49'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:42:49
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Check valid parenthesis in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查 Go (Golang) 中的有效括号
- en: 来源：[https://golangbyexample.com/valid-parenthesis-golang/](https://golangbyexample.com/valid-parenthesis-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/valid-parenthesis-golang/](https://golangbyexample.com/valid-parenthesis-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "概述")'
- en: '[Program](#Program "Program")*  *## **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "程序")*  *## **概述**'
- en: There is an input string that only contains below characters
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个输入字符串，只包含以下字符。
- en: (
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (
- en: )
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: )
- en: '{'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '{'
- en: '}'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '}'
- en: '['
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '['
- en: ']'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ']'
- en: '**The objective is to check if the input string has valid parentheses. A parenthesis
    is valid if**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标是检查输入字符串是否具有有效的括号。一个括号是有效的，如果**'
- en: '***   Open parentheses should be closed in the same order. Meaning that the
    below will be invalid as parentheses are not closed in right order'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '***   开放括号应该按照相同的顺序闭合。这意味着下面的内容将是无效的，因为括号没有按照正确的顺序闭合。'
- en: ([)]
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: ([)]
- en: Every open parenthesis should have the corresponding close parentheses
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个开放括号都应有对应的闭合括号。
- en: Valid parentheses example
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有效括号示例。
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Invalid parentheses example
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 无效括号示例。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Program**'
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Idea is to use a stack
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 思路是使用栈。
- en: If the given parentheses is a left parenthesis we push it to the stack
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果给定的括号是左括号，我们将其推入栈中。
- en: If the given parentheses is right parentheses we pop from the stack and we check
    that the popped left parentheses is corresponding to the current right parentheses.
    For eg if the if we encounter **‘]’** in the string we pop and check if the popped
    value is **‘[‘** only. If it is not we return false. Same for **‘)’** and **‘}’**
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果给定的括号是右括号，我们将其从栈中弹出，并检查弹出的左括号是否与当前的右括号对应。例如，如果我们在字符串中遇到**‘]’**，我们弹出并检查弹出的值是否仅为**‘[‘**。如果不是，则返回
    false。**‘)’**和**‘}’**也同理。
- en: At the end of the string, the stack should be empty
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在字符串的末尾，栈应该是空的。
- en: Below is the program for the same.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相同的程序。
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 查看我们的 Golang 高级教程。该系列教程内容详尽，我们试图用示例覆盖所有概念。本教程适合那些希望获得 Golang 专业知识和扎实理解的人
    – [Golang 高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you –[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解所有设计模式如何在 Golang 中实现。如果是的话，那么这篇文章就是为你准备的 – [所有设计模式 Golang](https://golangbyexample.com/all-design-patterns-golang/)
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)***'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)***'
