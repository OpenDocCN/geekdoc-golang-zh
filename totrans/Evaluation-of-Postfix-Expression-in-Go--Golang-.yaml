- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:43:40'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:43:40
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Evaluation of Postfix Expression in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Go (Golang)中进行后缀表达式求值
- en: 来源：[https://golangbyexample.com/evaluation-of-postfix-expression-golang/](https://golangbyexample.com/evaluation-of-postfix-expression-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/evaluation-of-postfix-expression-golang/](https://golangbyexample.com/evaluation-of-postfix-expression-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Evaluation of Postfix Expression](#Evaluation_of_Postfix_Expression "Evaluation
    of Postfix Expression")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [后缀表达式求值](#Evaluation_of_Postfix_Expression "Evaluation of Postfix Expression")'
- en: '[Implementation](#Implementation "Implementation")*  *## **Evaluation of Postfix
    Expression**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[实现](#Implementation "Implementation")*  *## **后缀表达式求值**'
- en: In this tutorial, we will evaluate a postfix expression.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将评估一个后缀表达式。
- en: '**Algorithm:**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**算法：**'
- en: Scan postfix expression from left to right.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从左到右扫描后缀表达式。
- en: If the current scanned character is an operand, push it in the stack.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果当前扫描的字符是操作数，则将其推入堆栈。
- en: If the current scanned character is an operator, then pop two operands from
    the stack. Evaluate the operator on the two popped operands and push the result
    in the stack.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果当前扫描的字符是运算符，则从堆栈中弹出两个操作数。在这两个弹出的操作数上对运算符进行求值，并将结果推入堆栈。
- en: When postfix expression is scanned completely, there should be only one value
    in the stack which is the result of postfix expression.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当后缀表达式完全扫描后，堆栈中应该只有一个值，这就是后缀表达式的结果。
- en: '**Implementation**'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**实现**'
- en: Below is the implementation of Infix to Postfix Conversion’ in golang.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Golang中“中缀转后缀”的实现。
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output:**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We can check the status of the stack after every push and pop operation by uncommenting
    **fmt.Println** line in Push and Pop function declaration.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过取消注释**fmt.Println**行来检查每次推送和弹出操作后的堆栈状态。
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 查看我们的Golang高级教程。本系列教程内容详尽，我们尽力覆盖所有概念并附有示例。本教程适合希望获得专业知识和扎实理解Golang的人
    - [Golang高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you -[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解所有设计模式在Golang中的实现。如果是的话，这篇文章适合你 - [所有设计模式 Golang](https://golangbyexample.com/all-design-patterns-golang/)
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
