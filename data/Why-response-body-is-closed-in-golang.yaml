- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:33:01'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:33:01
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Why response body is closed in golang
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么在golang中关闭响应体
- en: 来源：[https://golangbyexample.com/resposne-body-closed-golang/](https://golangbyexample.com/resposne-body-closed-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/resposne-body-closed-golang/](https://golangbyexample.com/resposne-body-closed-golang/)
- en: The response body should be closed after the response is fully read. This is
    done to prevent resource leak of connections. If the response body is not closed
    then the connection will not be released and hence it cannot be reused. From the
    official docs of **http.Client**
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 响应体应在响应完全读取后关闭。这是为了防止连接的资源泄漏。如果响应体没有关闭，则连接将不会被释放，因此无法重用。来自**http.Client**的官方文档。
- en: From the official docs of **http.Client**
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 来自**http.Client**的官方文档
- en: '[https://golang.org/pkg/net/http/#Client](https://golang.org/pkg/net/http/#Client)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://golang.org/pkg/net/http/#Client](https://golang.org/pkg/net/http/#Client)'
- en: If the Body is not both read to EOF and closed, the Client’s underlying RoundTripper
    (typically Transport) may not be able to re-use a persistent TCP connection to
    the server for a subsequent “keep-alive” request.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Body没有被完全读取到EOF并关闭，客户端的底层RoundTripper（通常是Transport）可能无法为后续的“保持活动”请求重用与服务器的持久TCP连接。
- en: So essentially, transport may not reuse HTTP/1.x “keep-alive” TCP connections
    if the Body is not read to completion and closed.The **response.Body** implements
    the **io.ReadCloser** interface.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，基本上，如果Body没有被完全读取并关闭，传输可能无法重用HTTP/1.x的“保持活动”TCP连接。**response.Body**实现了**io.ReadCloser**接口。
- en: Also to mention that it is the caller’s responsibility to close the response
    body
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 还要提到，关闭响应体的责任在于调用者。
- en: Some important guidelines to follow
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一些重要的指导原则
- en: Use the defer method to close the response body. This is done to make sure that
    the response body gets closed even in case of runtime error during reading and
    parsing of response.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用defer方法来关闭响应体。这是为了确保即使在读取和解析响应时发生运行时错误，响应体也能被关闭。
- en: Check for error first always. Only proceed to close the response body using
    defer if the error is nil. A nil error always indicates a non-nil response body.
    If the error is non-nil then handle that error and return. Also, note that closing
    a nil response body will cause a panic.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终先检查错误。仅在错误为nil时使用defer关闭响应体。一个nil错误总是表示一个非nil的响应体。如果错误为非nil，则处理该错误并返回。同时，请注意，关闭一个nil的响应体会导致恐慌。
- en: A simple example
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的示例
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Above is a simple example of how to handle HTTP error and when to close a response
    body. See how in the example we are closing the resp.Body using the defer function.
    And the response body is only closed if the error is nil
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以上是如何处理HTTP错误以及何时关闭响应体的简单示例。请注意在示例中我们使用defer函数关闭resp.Body。并且只有在错误为nil时响应体才会被关闭。
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/) * [golang](https://golangbyexample.com/tag/golang/)'
