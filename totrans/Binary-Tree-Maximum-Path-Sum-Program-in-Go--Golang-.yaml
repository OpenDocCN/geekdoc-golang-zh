- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:51:28'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:51:28
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Binary Tree Maximum Path Sum Program in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go (Golang) 中的二叉树最大路径和程序
- en: 来源：[https://golangbyexample.com/binary-tree-maximum-path-sum-golang/](https://golangbyexample.com/binary-tree-maximum-path-sum-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/binary-tree-maximum-path-sum-golang/](https://golangbyexample.com/binary-tree-maximum-path-sum-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *# **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *# **概述**'
- en: A  binary tree is given. The objective is to find the maximum Path Sum in that
    binary tree.  A path in a binary tree is a sequence of nodes that are connected
    to each other. Each node only appears once in the Maximum Path Sum
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个二叉树。目标是找到该二叉树中的最大路径和。二叉树中的一条路径是相互连接的节点序列。每个节点在最大路径和中仅出现一次。
- en: '**Example 1**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 1**'
- en: '![](img/9a9347838908483552b24df3dc54cd38.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a9347838908483552b24df3dc54cd38.png)'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Example 2**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 2**'
- en: '![](img/5d5d541966db0c009ee43d55823891a8.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d5d541966db0c009ee43d55823891a8.png)'
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The idea is to track below four  values at every node
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个思路是跟踪每个节点下面的四个值
- en: a = root.Val
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: a = root.Val
- en: b = root.Val + leftSubTreeMaxSum
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: b = root.Val + leftSubTreeMaxSum
- en: c  = root.Val + rightSubTreeMaxSum
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: c = root.Val + rightSubTreeMaxSum
- en: d =  root.Val + leftSubTreeMaxSum+  rightSubTreeMaxSum
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: d = root.Val + leftSubTreeMaxSum + rightSubTreeMaxSum
- en: Then
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后
- en: Max sum at a given node is given max of **(a,b,c,d)**
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定节点的最大和是 **(a,b,c,d)** 的最大值
- en: The return value in the recursive call would be a max of **(a,b,c)**.  Why?
    This is because only the path of a or b or c represents a path that can be taken
    into account at the parent node. d cannot be taken into account because it becomes
    an invalid path. To understand this with an example consider the binary tree in
    example two above. Path **5->3->6** cannot include parent node **-5** in its path
    because it becomes an invalid path.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归调用中的返回值将是 **(a,b,c)** 的最大值。为什么？这是因为只有 a、b 或 c 的路径代表可以在父节点中考虑的路径。d 不能被考虑，因为它成为一个无效路径。为了更好理解这一点，请考虑上面示例二中的二叉树。路径
    **5->3->6** 不能包含父节点 **-5**，因为这会变成一个无效路径。
- en: '**Program**'
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Below is the program for the same
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是相同的程序
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output:**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 请查看我们的 Golang 高级教程。本系列教程详细而全面，我们努力用示例覆盖所有概念。本教程适合那些希望获得专业知识和对 golang
    有深入理解的人 – [Golang 高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you – [All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对了解所有设计模式在 Golang 中如何实现感兴趣。如果是，那么这篇文章适合你 – [所有设计模式 Golang](https://golangbyexample.com/all-design-patterns-golang/)
- en: Also, check out our system design tutorial series here – [System Design Tutorial
    Series](https://techbyexample.com/system-design-questions/)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请查看我们的系统设计教程系列 – [系统设计教程系列](https://techbyexample.com/system-design-questions/)
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
