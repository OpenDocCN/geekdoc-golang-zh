- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:36:57'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: 'Golang Regex: Match prefix or suffix of a string'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/regex-prefix-suffix-golang/](https://golangbyexample.com/regex-prefix-suffix-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Prefix Matching](#Prefix_Matching "Prefix Matching")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Suffix Matching](#Suffix_Matching "Suffix Matching")*  *## **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Golang regex contains two anchor characters that can be used to match the prefix
    and suffix of a string given a regular expression. These two characters are
  prefs: []
  type: TYPE_NORMAL
- en: '**Caret Character ‘^’ –** It is an anchor character that can be used to match
    the prefix of a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dollar Character ‘$’ –** It is an anchor character that can be used to match
    the suffix of a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at prefix and suffix matching one by one
  prefs: []
  type: TYPE_NORMAL
- en: '**Prefix Matching**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is an anchor character that can be used to match the prefix of a string. 
    It is used at the start of the regex to make sure that the given input string
    is matched with the regex from the start.  Basically, matches the beginning of
    the input string
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, we used below regex
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Notice the caret character at the start. It will match any string which starts
    with **“abc”**. The trailing character doesn’t matter.
  prefs: []
  type: TYPE_NORMAL
- en: It gives matches for all the string which start with **“abc”.** That is why
    it gives a match for
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: and does not give a match for
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Suffix Matching**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is an anchor character that can be used to match the suffix of a string.
    It is used at the end of the regex to make sure that the given input string is
    matched with the regex at the end. It matches the end of the input string.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, we used below regex
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Notice the dollar character at the end. It will match any string which ends
    with **“abc”**. The starting characters doesn’t matter.
  prefs: []
  type: TYPE_NORMAL
- en: It gives matches for all the string which end with **“abc”.** That is why it
    gives a match for
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: and does not give a match for
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If we only want to match the complete string then we need to anchor the string
    with the **caret** character at the start and the **dollar** character at the
    end. This will enable us to do a full-string match. See the below example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the above program, the regex is
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The above program gives a match for
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: But doesn’t give a match for below as it only matches the full string
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Also, check out our Golang advance tutorial Series – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
