- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:20:46'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Iterate over a string in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/iterate-over-a-string-golang/](https://golangbyexample.com/iterate-over-a-string-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In Golang string is a sequence of bytes. A string literal actually represents
    a UTF-8 sequence of bytes. In UTF-8, ASCII characters are single-byte corresponding
    to the first 128 Unicode characters. All other characters are between 1 -4 bytes.
    To understand it more consider the below string
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In above string
  prefs: []
  type: TYPE_NORMAL
- en: ‘a’ takes one byte as per UTF-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘£’ takes two bytes as per UTF-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘b’ takes one byte as per UTF-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The above string has 1+2+1 = 4 bytes altogether. Therefore when we try to print
    the length of the string using the standard **len()** function it will output
    4 and not 3 as **len()** function returns the number of bytes in the string.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Hence standalone for loop cannot be used to iterate over all characters of a
    string as it will iterate over bytes and not character. So below **for** loop
    will instead iterate four times and the print value corresponding to a byte at
    that index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: It will output below string which is not same as **sample** string
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Not we have mentioned the above limitation of using len() function and for loop,
    let's see two ways of calculating the length of the string.
  prefs: []
  type: TYPE_NORMAL
- en: Using for-range loop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By converting string to a rune array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using for-range loop**'
  prefs: []
  type: TYPE_NORMAL
- en: for-rage iterates over the Unicode points( also referred to as rune in golang)
    in a string and will correctly output  a, £, b. Hence it can also be used to calculate
    the length of the string. Here is the format when using for-range with string
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Sample code
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**By converting string to rune array**'
  prefs: []
  type: TYPE_NORMAL
- en: A rune represents a Unicode Point. By converting a string to rune array basically
    it is same as creating an array of Unicode Points of that string. Therefore once
    the string is converted into the rune array, it can be used to iterate over all
    characters of the string.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[go](https://golangbyexample.com/tag/go/)*   [iterate](https://golangbyexample.com/tag/iterate/)*   [string](https://golangbyexample.com/tag/string/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
