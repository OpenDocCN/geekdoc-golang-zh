- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:26:37'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:26:37
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Example of Recover Function in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go (Golang) 中的恢复函数示例
- en: 来源：[https://golangbyexample.com/recover-example-go/](https://golangbyexample.com/recover-example-go/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/recover-example-go/](https://golangbyexample.com/recover-example-go/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Example](#Example "Example")*  *# **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[示例](#Example "Example")*  *# **概述**'
- en: Go provides a built-in function **recover** for recovering from a panic. Below
    is the signature of this function
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Go提供了一个内置函数**recover**用于从恐慌中恢复。下面是这个函数的签名
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**defer** function is the only function that is called after the **panic**.
    So it makes sense to put the **recover** function in the **defer** function only.
    If the **recover** function is not within the defer function then it will not
    stop **panic**.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**defer**函数是唯一在**panic**之后被调用的函数。因此，把**recover**函数放在**defer**函数中是有意义的。如果**recover**函数不在defer函数内，则无法停止**panic**。'
- en: '**Example**'
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**例子**'
- en: Let’s see an example of recover
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个recover的例子
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Output**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the above program we have a function **checkAndPrint** which checks and prints
    slice element at an index passed in the argument. If the index passed is greater
    than the length of the array then the program panics.  We have added a defer function
    named **handleOutIfBounds** as well at the start of the function **checkAndPrint**. 
     This function  contains  the  call to recover function as below
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，我们有一个函数**checkAndPrint**，它检查并打印传递到参数中的索引处的切片元素。如果传递的索引大于数组的长度，则程序将会恐慌。我们在**checkAndPrint**函数的开始处添加了一个名为**handleOutOfBounds**的defer函数。这个函数包含对recover函数的调用，如下所示。
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The **recover** function will catch the panic and we can also print the message
    from the panic.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**recover**函数将捕获恐慌，我们还可以打印恐慌中的消息。'
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After the recover function the program continues and the control returns to
    the called function which is  **main** here. That is why we get output as
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在恢复函数之后，程序继续运行，控制权返回到调用的函数，这里是**main**。这就是为什么我们得到输出为
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The recover function  returns the value which was passed to the panic function.
    Therefore it is a good practice to check the return value of the recover function.
    If the return value is non nil then panic did not happen and recover function
    was not called with the panic. That is why we have below code in the  defer function
    **handleOutofBounds**
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: recover函数返回传递给panic函数的值。因此，检查recover函数的返回值是一个好习惯。如果返回值非nil，则没有发生恐慌，并且recover函数没有与恐慌一起被调用。这就是我们在defer函数**handleOutOfBounds**中有以下代码的原因。
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here if **r** is nil then panic did not happened. So if there is no panic then
    call to recover will return nil
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果**r**为nil，那么没有发生恐慌。所以如果没有恐慌，则对recover的调用将返回nil。
- en: Note that if the defer function and recover function is not called from the
    panicking function then it that case also panic can be recovered in the called
    function as well. Infact it is possible to recover from panic subsequently up
    in the chain of call stack.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果defer函数和recover函数没有从恐慌函数中调用，则在这种情况下，恐慌也可以在被调用的函数中恢复。实际上，可能在调用栈的后续链中恢复。
- en: Let’s see an example of this
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个示例。
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Output**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Above program is quite same as previous program other than we have a additional
    function **checkAndPrintWithRecover** which contains the call to
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的程序与之前的程序几乎相同，唯一的不同是我们有一个额外的函数**checkAndPrintWithRecover**，其中包含对
- en: defer function with recover which is **handleOutOfBounds**
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有recover的defer函数是**handleOutOfBounds**
- en: calls **checkAndPrint** function
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用**checkAndPrint**函数
- en: '**So basically **checkAndPrint** function raises the panic but doesn’t have
    the recover function instead call to recover lies in the **checkAndPrintWithRecover**
    function. But still the program is able to recover from panic  as panic can also
    be recovered in the called function also and subsequently in the chain as well**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**基本上，**checkAndPrint**函数引发恐慌，但没有recover函数，而是调用recover的地方在**checkAndPrintWithRecover**函数中。但程序仍然能够从恐慌中恢复，因为恐慌也可以在被调用的函数中恢复，并且可以在链中继续恢复。**'
- en: '***   [go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)***'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '***   [go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)***'
