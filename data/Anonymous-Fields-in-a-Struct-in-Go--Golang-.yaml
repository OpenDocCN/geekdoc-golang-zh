- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:19:55'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:19:55
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Anonymous Fields in a Struct in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go (Golang) 中的结构体中的匿名字段。
- en: 来源：[https://golangbyexample.com/anonymous-fields-struct-golang/](https://golangbyexample.com/anonymous-fields-struct-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/anonymous-fields-struct-golang/](https://golangbyexample.com/anonymous-fields-struct-golang/)
- en: A struct can have anonymous fields as well, meaning a field having no name.
    The type will become the field name. In below example, **string** will be the
    field name as well
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 结构体也可以包含匿名字段，意味着一个字段没有名称。类型将成为字段名。在下面的示例中，**string** 也将作为字段名。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The anonymous field can also be accessed and assigned a value
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 匿名字段也可以被访问并赋值。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Output**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Nested Struct**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**嵌套结构体**'
- en: A struct can have another struct nested in it. Let’s see an example of a nested
    struct. In below **employee** struct has **address** struct nested it in.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 结构体可以嵌套另一个结构体。让我们看看一个嵌套结构体的示例。在下面的 **employee** 结构体中，嵌套了 **address** 结构体。
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Output**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice how nested struct fields are accessed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意嵌套结构体字段是如何被访问的。
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Table of Contents
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Anonymous nested struct fields](#Anonymous_nested_struct_fields "Anonymous
    nested struct fields")*  *# **Anonymous nested struct fields**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**[匿名嵌套结构体字段](#Anonymous_nested_struct_fields "Anonymous nested struct fields")*  *#
    **匿名嵌套结构体字段**'
- en: The nested struct field can also be anonymous. Also, in this case, nested struct’s
    fields are directly accessed. So below is valid
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套结构体字段也可以是匿名的。此外，在这种情况下，嵌套结构体的字段可以直接访问。因此，下面是有效的。
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It is also to be noted that below is still valid in this case
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 还需注意，下面的代码在这种情况下仍然有效。
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let’s see a program
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个程序。
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Output**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice in above program that city field of address struct can be accessed in
    two ways
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在上述程序中，地址结构体的城市字段可以通过两种方式访问。
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Similar for the country field of the address struct.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 地址结构体的国家字段也是类似的。
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
