- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:22:16'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of Interface in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/benefits-of-interface-golang/](https://golangbyexample.com/benefits-of-interface-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Below are some benefits of using interface.
  prefs: []
  type: TYPE_NORMAL
- en: Helps write more modular and decoupled code between different parts of the codebase
    – It can help reduce dependency between different parts of the codebase and provide
    loose coupling.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For eg imagine an application interacting with a database layer. If the application
    interacts with the database using the interface, then it never gets to know about
    what kind of database is being used in the background. You can change the type
    of database in the background, let’s say from arango db to mongo db without any
    change in the application layer as it interacts with the database layer via an
    interface which both arango db and mongo db implement.
  prefs: []
  type: TYPE_NORMAL
- en: Interface can be used to achieve run time polymorphism in golang. RunTime Polymorphism
    means that a call is resolved at runtime. Let’s understand how an interface can
    be used to achieve runtime polymorphism with an example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different countries have different ways of calculating the tax. This can be
    represented by means of an interface.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now different countries can have their own struct and can implement the **calculateTax()**
    method. The same **calculateTax** method is used in different contexts to calculate
    tax. When the compiler sees this call it delays which exact method to be called
    at run time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[go](https://golangbyexample.com/tag/go/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
