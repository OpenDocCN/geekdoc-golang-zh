["```\nInput: [1, 2, 2, 5]\nTarget: 2\nOutput: [1, 2]\n\nInput: [1, 2, 5]\nTarget: 2\nOutput: [1, 1]\n\nInput: []\nTarget: 1\nOutput: [-1,-1]\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\toutput := searchRange([]int{1, 2, 2, 5}, 2)\n\tfmt.Println(output)\n\n\toutput = searchRange([]int{1, 2, 5}, 2)\n\tfmt.Println(output)\n\n\toutput = searchRange([]int{}, 1)\n\tfmt.Println(output)\n}\n\nfunc searchRange(nums []int, target int) []int {\n\n\toutput := make([]int, 2)\n\toutput[0] = findLeftPivot(nums, 0, len(nums)-1, target, len(nums))\n\n\toutput[1] = findRightPivot(nums, 0, len(nums)-1, target, len(nums))\n\n\treturn output\n}\n\nfunc findLeftPivot(nums []int, start, end, target, len int) int {\n\tif start > end {\n\t\treturn -1\n\t}\n\n\tif start == end && nums[start] == target {\n\t\treturn start\n\t}\n\n\tmid := (start + end) / 2\n\n\tif (mid == 0 || nums[mid-1] < nums[mid]) && nums[mid] == target {\n\t\treturn mid\n\t}\n\n\tif target <= nums[mid] {\n\t\treturn findLeftPivot(nums, start, mid-1, target, len)\n\t}\n\n\treturn findLeftPivot(nums, mid+1, end, target, len)\n\n}\n\nfunc findRightPivot(nums []int, start, end, target, len int) int {\n\tif start > end {\n\t\treturn -1\n\t}\n\n\tif start == end && nums[start] == target {\n\t\treturn start\n\n\t}\n\n\tmid := (start + end) / 2\n\n\tif mid+1 <= end && nums[mid] == target && nums[mid] < nums[mid+1] {\n\t\treturn mid\n\t}\n\n\tif (mid == len-1 || nums[mid] < nums[mid+1]) && nums[mid] == target {\n\t\treturn mid - 1\n\t}\n\n\tif target >= nums[mid] {\n\t\treturn findRightPivot(nums, mid+1, end, target, len)\n\t}\n\n\treturn findRightPivot(nums, start, mid-1, target, len)\n\n}\n```", "```\n[1 2]\n[1 1]\n[-1 -1]\n```"]