- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:37:50'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:37:50
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Understanding Print function in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Go（Golang）中的Print函数
- en: 来源：[https://golangbyexample.com/print-function-golang/](https://golangbyexample.com/print-function-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/print-function-golang/](https://golangbyexample.com/print-function-golang/)
- en: '![](img/a1351ff423b96c7f5cfda45be9f96f65.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a1351ff423b96c7f5cfda45be9f96f65.png)'
- en: Table of Contents
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *## **Overview**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *## **概述**'
- en: '**Print** is defined in the **fmt** package and is used to format a string
    and write to standard output'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**Print**在**fmt**包中定义，用于格式化字符串并写入标准输出'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Below is the function prototype of **Print**
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是**Print**的函数原型
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Print** formats the string using the default format specifier but does not
    add a new line after the string. **Print** takes a variable number of arguments
    where each argument is an empty interface. It returns the number of characters
    printed and any error if happens. Since the argument type is an empty interface
    we can pass any data type to it. We can pass a string, int, float, struct, or
    any other data type. Each of the arguments to the **Print** function is formatted
    according to the default format specifier of that argument type. For example,
    the struct will be formatted according to the below specifier'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Print**使用默认格式说明符格式化字符串，但在字符串后不添加换行。**Print**接受可变数量的参数，每个参数都是一个空接口。它返回打印的字符数和发生的任何错误。由于参数类型是空接口，我们可以传递任何数据类型。我们可以传递字符串、整数、浮点数、结构体或任何其他数据类型。**Print**函数的每个参数根据该参数类型的默认格式说明符进行格式化。例如，结构体将根据以下说明符进行格式化'
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This format specifier only prints the Value part in the struct. There is also
    one more function provided by **fmt** package which appends a new line – **Println**.
    The **Print** function is exactly the same as the **Println** function other than
    two differences
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此格式说明符仅打印结构体中的值部分。**fmt**包还提供了一个附加换行的函数——**Println**。**Print**函数与**Println**函数完全相同，除了两个区别
- en: It does not append a newline at the end. We need to use the new line identifier
    to add a new line “\n”.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不会在末尾添加换行。我们需要使用换行标识符来添加换行“\n”。
- en: Space is only added between the arguments if neither of the operands is a string
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅在操作数都不是字符串时，才会在参数之间添加空格
- en: Let’s see an example
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子
- en: '**Program**'
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Let’s see an example for the same
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个相同的例子
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Output**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Some important points to note about the **Print** function
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 关于**Print**函数的一些重要注意事项
- en: It does not append a new line at the end. That is why need to use **“\n”** for
    adding a new line.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不会在末尾添加换行。这就是为什么需要使用**“\n”**来添加换行。
- en: It only adds space between two arguments if each of them is a non-string. That
    is why
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只有当两个参数都不是字符串时，它才会在两个参数之间添加空格。这就是原因
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: prints
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 打印
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: while
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 而
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: prints
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 打印
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It also returns the number of characters printed and any error if happens
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它还返回打印的字符数和发生的任何错误
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: will output below
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将输出以下内容
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The number of **bytesPrinted** is 14 as 14 characters are outputted
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**bytesPrinted**的数量为14，因为输出了14个字符'
- en: Also, check out our Golang advance tutorial Series – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)*
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请查看我们的Golang高级教程系列——[Golang高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)*
