- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:52:20'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Sort a slice of Int in Ascending and Descending order in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/sort-slice-asc-desc-golang/](https://golangbyexample.com/sort-slice-asc-desc-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Sort a slice in Ascending order](#Sort_a_slice_in_Ascending_order "Sort
    a slice in Ascending order")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Sort a slice in Descending order](#Sort_a_slice_in_Descending_order "Sort
    a slice in Descending order")*  *# **Sort a slice in Ascending order**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sort.Ints** package of going can be used to sort a full slice or a part of
    the slice. It is going to sort the string into Ascending order.'
  prefs: []
  type: TYPE_NORMAL
- en: Below is the signature of the method
  prefs: []
  type: TYPE_NORMAL
- en: '[https://pkg.go.dev/sort#Ints](https://pkg.go.dev/sort#Ints)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It takes a slice ‘x’ as an argument and sorts the slice ‘x’ in place.
  prefs: []
  type: TYPE_NORMAL
- en: Below is the program for the same
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Sort a slice in Descending order**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To sort a slice in descending order we will use **Slice** method of **sort**
    pacakge
  prefs: []
  type: TYPE_NORMAL
- en: '[https://pkg.go.dev/sort#Slice](https://pkg.go.dev/sort#Slice)'
  prefs: []
  type: TYPE_NORMAL
- en: Below is the signature of the method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: So this function takes two arguments
  prefs: []
  type: TYPE_NORMAL
- en: '**x any** – any is nothing here but an empty interface [https://pkg.go.dev/builtin#any](https://pkg.go.dev/builtin#any)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**less func(i, j int)** – This function is nothing but a comparator function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use this comparator function to decide the descending order of the elements
    in the slice. Below is an example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As a matter of fact, you can use **sort.Slice** method to also sort a slice
    in descending order. Below is an example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  prefs: []
  type: TYPE_NORMAL
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you -
  prefs: []
  type: TYPE_NORMAL
- en: '[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** Check out our system design tutorial series [System Design Questions](https://techbyexample.com/system-design-questions/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
