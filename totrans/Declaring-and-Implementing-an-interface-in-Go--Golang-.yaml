- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '分类: 未分类'
- en: 'date: 2024-10-13 06:22:26'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:22:26
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Declaring and Implementing an interface in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Go (Golang) 中声明和实现接口
- en: 来源：[https://golangbyexample.com/declaring-implementing-interface-golang/](https://golangbyexample.com/declaring-implementing-interface-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/declaring-implementing-interface-golang/](https://golangbyexample.com/declaring-implementing-interface-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Declaring an Interface](#Declaring_an_Interface "Declaring an Interface")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[声明接口](#Declaring_an_Interface "Declaring an Interface")'
- en: '[Implementing an interface](#Implementing_an_interface "Implementing an interface")*  *#
    **Overview**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[实现接口](#Implementing_an_interface "Implementing an interface")*  *# **概述**'
- en: Interface is a type in Go which is a collection of method signatures. These
    collection of method signatures are meant to represent a behaviour. The interface
    declares only the method set and any type which implements all methods of the
    interface is of that interface type.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 接口是 Go 中的一种类型，它是方法签名的集合。这些方法签名的集合旨在表示一种行为。接口仅声明方法集，任何实现接口所有方法的类型都是该接口类型。
- en: '**Declaring an Interface**'
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**声明接口**'
- en: Let’s define an interface named **animal.** The **animal** interface has two
    methods **breathe** and **walk**. It defines only the method signatures and nothing
    else.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个名为**动物**的接口。**动物**接口有两个方法**呼吸**和**行走**。它仅定义方法签名，别无其他。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A method signature would include
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 方法签名包括
- en: Name of the method
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法名称
- en: Number of arguments and type of each argument
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数的数量及每个参数的类型
- en: Number of return values and type of each return value
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回值的数量及每个返回值的类型
- en: With above declaration we created a new interface type i.e **animal .**
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通过上述声明，我们创建了一个新的接口类型，即**动物**。
- en: It is ok to define a variable of **animal** type. Let’s create a variable of
    **animal** interface type.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个**动物**类型的变量是可以的。让我们创建一个**动物**接口类型的变量。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Output**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As seen in above program it is ok to create a variable of interface type. It
    prints nil as default zero value of an interface is nil.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如上程序所示，创建一个接口类型的变量是可以的。它打印出 nil，因为接口的默认零值是 nil。
- en: '**Implementing an interface**'
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**实现接口**'
- en: Any type which implements the breathe and walk method then it is said to implement
    the **animal** interface. . So if we define a **lion** struct and implements the
    breathe and walk method then it will implement the  animal interface.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 任何实现了呼吸和行走方法的类型都可以被称为实现了**动物**接口。因此，如果我们定义一个**狮子**结构体并实现呼吸和行走方法，那么它将实现动物接口。
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Output**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We declare a variable of animal interface type
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们声明一个动物接口类型的变量
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Then we assign an instance of lion struct to it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将一个狮子结构体的实例赋值给它。
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Assigning an instance of **lion** struct to a variable of **animal** interface
    type works because **lion** struct implements both **breathe** and **walk** method
    of **animal**. The type is not checked during this assignment, instead it is enough
    to check that the type assigned does implement **breathe** and **walk** method. 
    The concept is similar to duck typing,  a **lion** can **breathe** and **walk**
    like an **animal** and hence it is an **animal**.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 将**狮子**结构体的实例赋值给**动物**接口类型的变量是可行的，因为**狮子**结构体实现了**动物**的呼吸和行走方法。赋值时并不会检查类型，而只需检查赋值的类型是否实现了**呼吸**和**行走**方法。这个概念类似于鸭子类型，一个**狮子**可以像**动物**一样**呼吸**和**行走**，因此它就是一种**动物**。
- en: There is no explicit declaration that a type implements an interface. In fact,
    in Go there doesn’t exist any **“implements”** keyword similar to Java.  A type
    implements an interface if it implements all the methods of the interface.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 没有明确声明一个类型实现了一个接口。实际上，在 Go 中并不存在类似 Java 的**“implements”**关键字。如果一个类型实现了接口的所有方法，则它实现了该接口。
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
