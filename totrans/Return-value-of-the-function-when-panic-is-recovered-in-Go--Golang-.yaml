- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:26:12'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:26:12
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Return value of the function when panic is recovered in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当恐慌在Go（Golang）中被恢复时，函数的返回值
- en: 来源：[https://golangbyexample.com/return-value-function-panic-recover-go/](https://golangbyexample.com/return-value-function-panic-recover-go/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/return-value-function-panic-recover-go/](https://golangbyexample.com/return-value-function-panic-recover-go/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *# **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program") *  *# **概述**'
- en: When the panic is recovered then the return value of a panicking function will
    be the default value of the return types of  the panicking function
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当恐慌被恢复时，恐慌函数的返回值将是该函数返回类型的默认值。
- en: '**Program**'
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Let’s see a program for it
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个程序示例
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above program we have **checkAndGet** function which gets the value at
    a particular index in int slice. If the index passed to this function is greater
    than (length of slice-1), then it raises a panic. There is also a **handleOutOfBounds**
    function which is used to recover from the panic.  So we pass index 2 to the **checkAndGet**
    function and it raises the panic which is recovered in the **handleOutOfBounds**
    function. That is why we first get this output
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，我们有一个**checkAndGet**函数，它获取int切片中特定索引的值。如果传递给此函数的索引大于（切片长度-1），则会引发恐慌。同时还有一个**handleOutOfBounds**函数用于从恐慌中恢复。因此，我们将索引2传递给**checkAndGet**函数，它引发了恐慌，并在**handleOutOfBounds**函数中得以恢复。这就是我们首先得到这个输出的原因。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice in main function that we recollect the return value from the **checkAndGet**
    like this
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意在主函数中，我们以这样的方式重新获取**checkAndGet**的返回值。
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**checkAndGet** has two return values'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**checkAndGet**有两个返回值'
- en: int
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: int
- en: error
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: error
- en: Since **checkAndGet** creates panic which is recovered in the handleOutOfBounds
    function therefore the return value of the **checkAndGet** will be the default
    value of its types.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于**checkAndGet**会引发恐慌，而该恐慌在handleOutOfBounds函数中被恢复，因此**checkAndGet**的返回值将是其类型的默认值。
- en: Therefore
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: outputs
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: because zero is the default value of **int** type.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因为零是**int**类型的默认值。
- en: And
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 而且
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: outputs
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: because nil is the default value of **error** type.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因为nil是**error**类型的默认值。
- en: If you don’t want to return default zero value of types then named return value
    can be used. Let’s see a program for that.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想返回类型的默认零值，那么可以使用命名返回值。我们来看一个程序示例。
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Output**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This program is same as previous program, the only difference being that we
    are using named return value in the **checkAndGet** function.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序与前面的程序相同，唯一的区别是我们在**checkAndGet**函数中使用了命名返回值。
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We set the named return value to 10 in **checkAndGet** function
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在**checkAndGet**函数中将命名返回值设置为10
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: That is why we get below output in this program as panic is created and it is
    recovered
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么我们在这个程序中得到以下输出，因为引发了恐慌并得以恢复
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Also note that If panic would not have created in the program then it would
    have output the correct value at index.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，如果程序中没有引发恐慌，那么它将输出正确的索引值。
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/) *   [golang](https://golangbyexample.com/tag/golang/)
    *'
