- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '分类: 未分类'
- en: 'date: 2024-10-13 06:01:53'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-10-13 06:01:53'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Prototype Pattern in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go (Golang)中的原型模式
- en: 来源：[https://golangbyexample.com/prototype-pattern-go/](https://golangbyexample.com/prototype-pattern-go/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/prototype-pattern-go/](https://golangbyexample.com/prototype-pattern-go/)
- en: 'Note: Interested in understanding how all other design patterns can be implemented
    in GO. Please see this full reference – [All Design Patterns in Go (Golang)](https://golangbyexample.com/all-design-patterns-golang/)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '注意: 对于理解其他所有设计模式在GO中的实现有兴趣的人，请查看此完整参考 – [Go (Golang)中的所有设计模式](https://golangbyexample.com/all-design-patterns-golang/)'
- en: Table of Contents
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Definition:](#Definition "Definition:")'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [定义:](#Definition "Definition:")'
- en: '[When to Use](#When_to_Use "When to Use")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用时机](#When_to_Use "When to Use")'
- en: '[UML Diagram](#UML_Diagram "UML Diagram")'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[UML图](#UML_Diagram "UML Diagram")'
- en: '[Mapping ](#Mapping "Mapping ")'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[映射](#Mapping "Mapping")'
- en: '[Practical Example:](#Practical_Example "Practical Example:")*  *## **Definition:**'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[实际示例:](#Practical_Example "Practical Example:")*  *## **定义:**'
- en: It is a creational design pattern that lets you create copies of objects. In
    this pattern, the responsibility of creating the clone objects is delegated to
    the actual object to clone.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种创建型设计模式，允许你创建对象的副本。在此模式中，克隆对象的创建责任委托给实际的克隆对象。
- en: The object to be cloned exposes a clone method which returns a clone copy of
    the object
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要克隆的对象暴露一个克隆方法，该方法返回对象的克隆副本。
- en: '**When to Use**'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**使用时机**'
- en: We use prototype pattern when the object to be cloned creation process is complex
    i.e the cloning may involve vases of handling deep copies, hierarchical copies,
    etc. Moreover, there may be some private members too which cannot be directly
    accessed.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当克隆对象的创建过程复杂时，我们使用原型模式，即克隆可能涉及深拷贝、层次拷贝等处理。此外，可能还有一些私有成员也无法直接访问。
- en: A copy of the object is created instead of creating a new instance from scratch.
    This prevents costly operations involved while creating a new object such as database
    operation.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建的是对象的副本，而不是从头创建一个新实例。这防止了在创建新对象时涉及的昂贵操作，例如数据库操作。
- en: When you want to create a copy of a new object, but it is only available to
    you as an interface. Hence you cannot directly create copies of that object.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你想要创建新对象的副本，但它仅作为接口可用时。因此，你不能直接创建该对象的副本。
- en: '**UML Diagram**'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**UML图**'
- en: '![](img/f2d42664ac887048361cea1ff2937a38.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2d42664ac887048361cea1ff2937a38.png)'
- en: '**Mapping **'
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**映射**'
- en: The below table represents the mapping from the UML diagram actors to actual
    implementation actors in code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下表表示UML图中参与者到代码中实际实现参与者的映射。
- en: '| prototype interface | inode.go |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 原型接口 | inode.go |'
- en: '| Concrete Prototype 1 | file.go |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| 具体原型 1 | file.go |'
- en: '| Concrete Prototype 2 | folder.go |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 具体原型 2 | folder.go |'
- en: '| client | main.go |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 客户端 | main.go |'
- en: '**Practical Example**:'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**实际示例**:'
- en: In the context of golang let’s try to understand it with an example of os file
    system. The os file system has files and folders and folders itself contain files
    and folders. Each **file** and **folder** can be represented by an **inode** interface.
    **inode** interface also has the **clone**() function.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在golang的上下文中，让我们尝试通过os文件系统的示例来理解它。os文件系统有文件和文件夹，文件夹本身也包含文件和文件夹。每个**文件**和**文件夹**可以由**inode**接口表示。**inode**接口还有**clone**()函数。
- en: '**inode.go**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**inode.go**'
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**file** struct is represented as'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件**结构体表示为'
- en: '**file.go**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**file.go**'
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**folder** struct is represented as'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件夹**结构体表示为'
- en: '**folder.go**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**folder.go**'
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Since both **file** and **folder** struct implements the **print** and **clone**
    functions, hence they are of type **inode**. Also, notice the **clone** function
    in both file and folder. The **clone** function in both of them returns a copy
    of the respective file or folder. While cloning we append the keyword “_clone”
    for the name field. Let’s write the main function to test things out.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于**文件**和**文件夹**结构体都实现了**打印**和**克隆**函数，因此它们属于**inode**类型。此外，请注意文件和文件夹中的**克隆**函数。它们的**克隆**函数返回各自文件或文件夹的副本。在克隆时，我们为名称字段附加关键字“_clone”。让我们编写主函数来测试一下。
- en: '**main.go**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**main.go**'
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Output:**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出:**'
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[design pattern](https://golangbyexample.com/tag/design-pattern/)*   [go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*   [prototype](https://golangbyexample.com/tag/prototype/)*'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[设计模式](https://golangbyexample.com/tag/design-pattern/)*   [go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*   [原型](https://golangbyexample.com/tag/prototype/)*'
