["```\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    ch := make(chan int)\n    go sum(ch, 3)\n    ch <- 2\n    ch <- 2\n    ch <- 2\n    close(ch)\n    time.Sleep(time.Second * 1)\n}\n\nfunc sum(ch chan int, len int) {\n    sum := 0\n    for i := 0; i < len; i++ {\n        sum += <-ch\n    }\n    fmt.Printf(\"Sum: %d\\n\", sum)\n}\n```", "```\nSum: 6\n```", "```\npackage main\nfunc main() {\n    ch := make(chan int)\n    close(ch)\n    ch <- 2\n}\n```", "```\npanic: send on closed channel\n```", "```\nval,ok <- ch\n```", "```\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    ch := make(chan int, 1)\n    ch <- 2\n    val, ok := <-ch\n    fmt.Printf(\"Val: %d OK: %t\\n\", val, ok)\n\n    close(ch)\n    val, ok = <-ch\n    fmt.Printf(\"Val: %d OK: %t\\n\", val, ok)\n}\n```", "```\nVal: 2 OK: true\nVal: 0 OK: false\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tch := make(chan int)\n\tch <- 2\n\tch <- 2\n\tch <- 2\n\tclose(ch)\n\tsum(ch)\n\ttime.Sleep(time.Second * 1)\n}\n\nfunc sum(ch chan int) {\n\tsum := 0\n\tfor val := range ch {\n\t\tsum += val\n\t}\n\tfmt.Printf(\"Sum: %d\\n\", sum)\n}\n```", "```\nSum: 6\n```", "```\nfatal error: all goroutines are asleep - deadlock!\n```"]