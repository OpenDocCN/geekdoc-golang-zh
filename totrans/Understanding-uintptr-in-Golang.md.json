["```\np := unsafe.Pointer(uintptr(unsafe.Pointer(s)) + unsafe.Offsetof(s.b))\n```", "```\npackage main\nimport (\n    \"fmt\"\n    \"unsafe\"\n)\ntype sample struct {\n    a int\n    b string\n}\nfunc main() {\n    s := &sample{a: 1, b: \"test\"}\n\n   //Getting the address of field b in struct s\n    p := unsafe.Pointer(uintptr(unsafe.Pointer(s)) + unsafe.Offsetof(s.b))\n\n    //Typecasting it to a string pointer and printing the value of it\n    fmt.Println(*(*string)(p))\n}\n```", "```\ntest\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"unsafe\"\n)\n\ntype sample struct {\n    a int\n    b string\n}\n\nfunc main() {\n    s := &sample{\n        a: 1,\n        b: \"test\",\n    }\n    //Get the address as a uintptr\n    startAddress := uintptr(unsafe.Pointer(s))\n    fmt.Printf(\"Start Address of s: %d\\n\", startAddress)\n}\n```", "```\nStart Address of s: 824634330992\n```"]