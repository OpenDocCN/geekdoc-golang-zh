- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:16:15'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Pick a random character in string in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/pick-random-character-string-golang/](https://golangbyexample.com/pick-random-character-string-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Code](#Code "Code")*  *# **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**‘mat/rand’** package of golang contains a **Intn** function that can be used
    to generate a pseudo-random number between [0,n). Bracket at the end means that
    n is exclusive. This function can be utilized to pick a random element in a string.
    We can generate a random between 0 and length-1 of string. Then we can use that
    random number to index into the string and get the result.'
  prefs: []
  type: TYPE_NORMAL
- en: But there is one problem in above approach. In Golang string is a sequence of
    bytes. A string literal actually represents a UTF-8 sequence of bytes. In UTF-8,
    ASCII characters are single-byte corresponding to the first 128 Unicode characters. All
    other characters are between 1 -4 bytes. Due to this it is not possible to index
    a character in a string.  In GO, rune data type represents a Unicode point.  Once
    a string is converted to an array of rune then it is possible to index a character
    in that array of rune.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more the above issue here – [https://golangbyexample.com/number-characters-string-golang/](https://golangbyexample.com/number-characters-string-golang/)
  prefs: []
  type: TYPE_NORMAL
- en: For this reason in below program for picking a random in a given string , we 
    are first converting a string into a rune array so that we can index into the
    rune array and then return the random character.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[character](https://golangbyexample.com/tag/character/)*   [go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*   [pick](https://golangbyexample.com/tag/pick/)*   [random](https://golangbyexample.com/tag/random/)*   [string](https://golangbyexample.com/tag/string/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
