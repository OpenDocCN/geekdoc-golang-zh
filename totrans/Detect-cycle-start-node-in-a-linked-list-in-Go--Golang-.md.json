["```\nslow := slow.Next\nfast := fast.Next.Next\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfirst := initList()\n\tele4 := first.AddFront(4)\n\tfirst.AddFront(3)\n\tele2 := first.AddFront(2)\n\tfirst.AddFront(1)\n\n\t//Create cycle\n\tele4.Next = ele2\n\n\toutput := cycleStartNode(first.Head)\n\tfmt.Println(output.Val)\n\n}\n\ntype ListNode struct {\n\tVal  int\n\tNext *ListNode\n}\n\ntype SingleList struct {\n\tLen  int\n\tHead *ListNode\n}\n\nfunc (s *SingleList) AddFront(num int) *ListNode {\n\tele := &ListNode{\n\t\tVal: num,\n\t}\n\tif s.Head == nil {\n\t\ts.Head = ele\n\t} else {\n\t\tele.Next = s.Head\n\t\ts.Head = ele\n\t}\n\ts.Len++\n\treturn ele\n}\n\nfunc initList() *SingleList {\n\treturn &SingleList{}\n}\nfunc cycleStartNode(head *ListNode) *ListNode {\n\tif head == nil || head.Next == nil {\n\t\treturn nil\n\t}\n\n\tslow := head\n\tfast := head\n\n\tcycleExists := false\n\n\tfor slow != nil && fast != nil && fast.Next != nil {\n\t\tslow = slow.Next\n\t\tfast = fast.Next.Next\n\n\t\tif slow == fast {\n\t\t\tcycleExists = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !cycleExists {\n\t\treturn nil\n\t}\n\n\tcycleNode := slow\n\n\tcurr := cycleNode\n\n\tlengthCycle := 1\n\n\tfor curr.Next != cycleNode {\n\t\tlengthCycle++\n\t\tcurr = curr.Next\n\t}\n\n\tcurr = head\n\n\tfor i := 0; i < lengthCycle; i++ {\n\t\tcurr = curr.Next\n\t}\n\n\tfor head != curr {\n\t\thead = head.Next\n\t\tcurr = curr.Next\n\t}\n\n\treturn head\n}\n```", "```\n2\n```"]