["```\nfunc add(numbers ...int)\n```", "```\nadd()\nadd(1,2)\nadd(1,2,3,4)\n```", "```\nfunc add(numbers ...int) int {\n    sum := 0\n    for _, num := range numbers {\n        sum += num\n    }\n    return sum\n}\n```", "```\nvar numbers := []int{2,3,5}\nadd(numbers...)\n```", "```\nfunc add(val string, numbers ...int)\n```", "```\nfunc Println(a ...interface{}) (n int, err error) \n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(add(1, 2))\n    fmt.Println(add(1, 2, 3))\n    fmt.Println(add(1, 2, 3, 4))\n}\n\nfunc add(numbers ...int) int {\n    sum := 0\n    for _, num := range numbers {\n        sum += num\n    }\n    return sum\n}\n```", "```\n3\n6\n10\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    handle(1, \"abc\")\n    handle(\"abc\", \"xyz\", 3)\n    handle(1, 2, 3, 4)\n}\n\nfunc handle(params ...interface{}) {\n    fmt.Println(\"Handle func called with parameters:\")\n    for _, param := range params {\n        fmt.Printf(\"%v\\n\", param)\n    }\n}\n```", "```\nHandle func called with parameters:\n1\nabc\nHandle func called with parameters:\nabc\nxyz\n3\nHandle func called with parameters:\n1\n2\n3\n4\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype person struct {\n    name   string\n    gender string\n    age    int\n}\n\nfunc main() {\n    err := addPerson(\"Tina\", \"Female\", 20)\n    if err != nil {\n        fmt.Println(\"PersonAdd Error: \" + err.Error())\n    }\n\n    err = addPerson(\"John\", \"Male\")\n    if err != nil {\n        fmt.Println(\"PersonAdd Error: \" + err.Error())\n    }\n\n    err = addPerson(\"Wick\", 2, 3)\n    if err != nil {\n        fmt.Println(\"PersonAdd Error: \" + err.Error())\n    }\n}\n\nfunc addPerson(args ...interface{}) error {\n    if len(args) > 3 {\n        return fmt.Errorf(\"Wront number of arguments passed\")\n    }\n    p := &person{}\n    //0 is name\n    //1 is gender\n    //2 is age\n    for i, arg := range args {\n        switch i {\n        case 0: // name\n            name, ok := arg.(string)\n            if !ok {\n                return fmt.Errorf(\"Name is not passed as string\")\n            }\n            p.name = name\n        case 1:\n            gender, ok := arg.(string)\n            if !ok {\n                return fmt.Errorf(\"Gender is not passed as string\")\n            }\n            p.gender = gender\n        case 2:\n            age, ok := arg.(int)\n            if !ok {\n                return fmt.Errorf(\"Age is not passed as int\")\n            }\n            p.age = age\n        default:\n            return fmt.Errorf(\"Wrong parametes passed\")\n        }\n    }\n    fmt.Printf(\"Person struct is %+v\\n\", p)\n    return nil\n}\n```", "```\nPerson struct is &{name:Tina gender:Female age:20}\nPerson struct is &{name:John gender:Male age:0}\nPersonAdd Error: Gender is not passed as string\n```"]