["```\nInput: [[1,3],[0,2],[1,3],[0,2]]\nOutput: true\n```", "```\nInput: [[1,4],[0,2],[1,3],[2,4],[0,3]\nOutput: false\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc isBipartite(graph [][]int) bool {\n\tnodeMap := make(map[int][]int)\n\n\tnumNodes := len(graph)\n\n\tif numNodes == 1 {\n\t\treturn true\n\t}\n\tfor i := 0; i < numNodes; i++ {\n\t\tnodes := graph[i]\n\t\tfor j := 0; j < len(nodes); j++ {\n\t\t\tnodeMap[i] = append(nodeMap[i], nodes[j])\n\t\t}\n\t}\n\n\tcolor := make(map[int]int)\n\n\tfor i := 0; i < numNodes; i++ {\n\t\tif color[i] == 0 {\n\t\t\tcolor[i] = 1\n\t\t\tisBiPartite := visit(i, nodeMap, &color)\n\t\t\tif !isBiPartite {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true\n\n}\n\nfunc visit(source int, nodeMap map[int][]int, color *map[int]int) bool {\n\n\tfor _, neighbour := range nodeMap[source] {\n\t\tif (*color)[neighbour] == 0 {\n\t\t\tif (*color)[source] == 1 {\n\t\t\t\t(*color)[neighbour] = 2\n\t\t\t} else {\n\t\t\t\t(*color)[neighbour] = 1\n\t\t\t}\n\t\t\tisBipartite := visit(neighbour, nodeMap, color)\n\t\t\tif !isBipartite {\n\t\t\t\treturn false\n\t\t\t}\n\t\t} else {\n\t\t\tif (*color)[source] == (*color)[neighbour] {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true\n}\n\nfunc main() {\n\toutput := isBipartite([][]int{{1, 3}, {0, 2}, {1, 3}, {0, 2}})\n\tfmt.Println(output)\n\n\toutput = isBipartite([][]int{{1, 4}, {0, 2}, {1, 3}, {2, 4}, {0, 3}})\n\tfmt.Println(output)\n\n}\n```", "```\ntrue\nfalse\n```"]