["```\nconst c string = \"circle\"\n```", "```\nconst c = \"circle\"\n```", "```\nconst (\n  c = \"circle\"\n  s = \"square\"\n)\n```", "```\npackage main\nfunc main() {\n    const a int = 8\n    a = 9\n}\n```", "```\nmain.go:5:4: cannot assign to a\n```", "```\npackage main\nconst name = \"test\"\nfunc main() {\n    const a = getValue()\n}\nfunc getValue() int {\n    return 1\n}\n```", "```\nconst initializer getValue() is not a constant\n```", "```\npackage main\nimport \"fmt\"\nconst a = 123\nfunc main() {\n    const a = 456\n    fmt.Println(a)\n}\n```", "```\n456\n```", "```\nconst a int32 = 8\n```", "```\npackage main\n\nfunc main() {\n    const a int32 = 8\n\n    var i1 int32\n    var i2 int64\n\n    i1 = a\n    i2 = a\n}\n```", "```\ncannot use a (type int32) as type int64 in assignment\n```", "```\n123        //Default hidden type is int\n\"circle\"   //Default hidden type is string\n5.6\\.       //Default hidden type is float64\ntrue       //Default hidden type is bool\n'a'        //Default hidden type is rune\n3+5i       //Default hidden type is complex128\n```", "```\nconst a = 123        //Default hidden type is int\nconst b = \"circle\"   //Default hidden type is string\nconst c = 5.6       //Default hidden type is float64\nconst d = true       //Default hidden type is bool\nconst e = 'a'        //Default hidden type is rune\nconst f = 3+5i       //Default hidden type is complex128\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    //Unanamed untyped constant\n    fmt.Printf(\"Type: %T Value: %v\\n\", 123, 123)\n    fmt.Printf(\"Type: %T Value: %v\\n\", \"circle\", \"circle\")\n    fmt.Printf(\"Type: %T Value: %v\\n\", 5.6, 5.6)\n    fmt.Printf(\"Type: %T Value: %v\\n\", true, true)\n    fmt.Printf(\"Type: %T Value: %v\\n\", 'a', 'a')\n    fmt.Printf(\"Type: %T Value: %v\\n\", 3+5i, 3+5i)\n\n    //Named untyped constant\n    const a = 123      //Default hidden type is int\n    const b = \"circle\" //Default hidden type is string\n    const c = 5.6      //Default hidden type is float64\n    const d = true     //Default hidden type is bool\n    const e = 'a'      //Default hidden type is rune\n    const f = 3 + 5i   //Default hidden type is complex128\n\n    fmt.Println(\"\")\n    fmt.Printf(\"Type: %T Value: %v\\n\", a, a)\n    fmt.Printf(\"Type: %T Value: %v\\n\", b, b)\n    fmt.Printf(\"Type: %T Value: %v\\n\", c, c)\n    fmt.Printf(\"Type: %T Value: %v\\n\", d, d)\n    fmt.Printf(\"Type: %T Value: %v\\n\", e, e)\n    fmt.Printf(\"Type: %T Value: %v\\n\", f, f)\n}\n```", "```\nType: int Value: 123\nType: string Value: circle\nType: float64 Value: 5.6\nType: bool Value: true\nType: int32 Value: 97\nType: complex128 Value: (3+5i)\n\nType: int Value: 123\nType: string Value: circle\nType: float64 Value: 5.6\nType: bool Value: true\nType: int32 Value: 97\nType: complex128 Value: (3+5i)\n```", "```\nvar a = 123\n```", "```\npackage main\nimport \"fmt\"\nfunc main() {\n    //Untyped\n    var u = 123      //Default hidden type is int\n    var v = \"circle\" //Default hidden type is string\n    var w = 5.6      //Default hidden type is float64\n    var x = true     //Default hidden type is bool\n    var y = 'a'      //Default hidden type is rune\n    var z = 3 + 5i   //Default hidden type is complex128\n    fmt.Printf(\"Type: %T Value: %v\\n\", u, u)\n    fmt.Printf(\"Type: %T Value: %v\\n\", v, v)\n    fmt.Printf(\"Type: %T Value: %v\\n\", w, w)\n    fmt.Printf(\"Type: %T Value: %v\\n\", x, x)\n    fmt.Printf(\"Type: %T Value: %v\\n\", y, y)\n    fmt.Printf(\"Type: %T Value: %v\\n\", z, z)\n}\n```", "```\nType: int Value: 123\nType: string Value: circle\nType: float64 Value: 5.6\nType: bool Value: true\nType: int32 Value: 97\nType: complex128 Value: (3+5i)\n```", "```\nconst Pi = 3.14159265358979323846264338327950288419716939937510582097494459\n```", "```\npackage main\nimport (\n    \"fmt\"\n    \"math\"\n)\nfunc main() {\n    var f1 float32\n    var f2 float64\n    f1 = math.Pi\n    f2 = math.Pi\n\n    fmt.Printf(\"Type: %T Value: %v\\n\", math.Pi, math.Pi)\n    fmt.Printf(\"Type: %T Value: %v\\n\", f1, f1)\n    fmt.Printf(\"Type: %T Value: %v\\n\", f2, f2)\n}\n```", "```\nType: float64 Value: 3.141592653589793\nType: float32 Value: 3.1415927\nType: float64 Value: 3.141592653589793\n```", "```\npackage main\n\nimport \"fmt\"\n\nconst name = \"test\"\n\nfunc main() {\n    const a = 8\n    fmt.Println(a)\n    testGlobal()\n}\n\nfunc testGlobal() {\n    fmt.Println(name)\n    //The below line will give compiler error as a is a local constant\n    //fmt.Println(a)\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\ttype myString string\n\n\t//Typed String constant\n\tconst aa string = \"abc\"\n\tvar uu = aa\n\tfmt.Println(\"Untyped named string constant\")\n\tfmt.Printf(\"uu: Type: %T Value: %v\\n\\nn\", uu, uu)\n\n\t//Below line will raise a compilation error\n\t//var v myString = aa\n\n\t//Untyped named string constant\n\tconst bb = \"abc\"\n\tvar ww myString = bb\n\tvar xx = bb\n\tfmt.Println(\"Untyped named string constant\")\n\tfmt.Printf(\"ww: Type: %T Value: %v\\n\", ww, ww)\n\tfmt.Printf(\"xx: Type: %T Value: %v\\n\\n\", xx, xx)\n\n\t//Untyped unnamed string constant\n\tvar yy myString = \"abc\"\n\tvar zz = \"abc\"\n\tfmt.Println(\"Untyped unnamed string constant\")\n\tfmt.Printf(\"yy: Type: %T Value: %v\\n\", yy, yy)\n\tfmt.Printf(\"zz: Type: %T Value: %v\\n\", zz, zz)\n\n}\n```", "```\nUntyped named string constant\nuu: Type: string Value: abc\n\nnUntyped named string constant\nww: Type: main.myString Value: abc\nxx: Type: string Value: abc\n\nUntyped unnamed string constant\nyy: Type: main.myString Value: abc\nzz: Type: string Value: abc\n```", "```\ntype myString string\n```", "```\nconst aa string = \"abc\"\n```", "```\nvar v myString = aa\n```", "```\nvar uu = aa\n```", "```\nconst bb = \"abc\"\n```", "```\nvar ww myString = bb\nvar xx = bb\n```", "```\nabc\n```", "```\nvar yy myString = \"abc\"\nvar zz = \"abc\"\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\t//Typed int constant\n\tconst aa int = 123\n\tvar uu = aa\n\tfmt.Println(\"Typed named integer constant\")\n\tfmt.Printf(\"uu: Type: %T Value: %v\\n\\n\", uu, uu)\n\n\t//Below line will raise a compilation error\n\t//var v int32 = aa\n\n\t//Untyped named int constant\n\tconst bb = 123\n\tvar ww = bb\n\tvar xx int32 = bb\n\tvar yy float64 = bb\n\tvar zz complex128 = bb\n\tfmt.Println(\"Untyped named integer constant\")\n\tfmt.Printf(\"ww: Type: %T Value: %v\\n\", ww, ww)\n\tfmt.Printf(\"xx: Type: %T Value: %v\\n\", xx, xx)\n\tfmt.Printf(\"yy: Type: %T Value: %v\\n\", yy, yy)\n\tfmt.Printf(\"zz: Type: %T Value: %v\\n\\n\", zz, zz)\n\n\t//Untyped unnamed int constant\n\tvar ll = 123\n\tvar mm int32 = 123\n\tvar nn float64 = 123\n\tvar oo complex128 = 123\n\tfmt.Println(\"Untyped unnamed integer constant\")\n\tfmt.Printf(\"ll: Type: %T Value: %v\\n\", ll, ll)\n\tfmt.Printf(\"mm: Type: %T Value: %v\\n\", mm, mm)\n\tfmt.Printf(\"nn: Type: %T Value: %v\\n\", nn, nn)\n\tfmt.Printf(\"oo: Type: %T Value: %v\\n\", oo, oo)\n}\n```", "```\nTyped named integer constant\nuu: Type: int Value: 123\n\nUntyped named integer constant\nww: Type: int Value: 123\nxx: Type: int32 Value: 123\nyy: Type: float64 Value: 123\nzz: Type: complex128 Value: (123+0i)\n\nUntyped unnamed integer constant\nll: Type: int Value: 123\nmm: Type: int32 Value: 123\nnn: Type: float64 Value: 123\noo: Type: complex128 Value: (123+0i)\n```", "```\nconst aa int = 123\n```", "```\nvar uu = aa\n```", "```\nvar v int32 = aa\n```", "```\nconst bb = 123\n```", "```\nvar ww = bb\nvar xx int32 = bb\nvar yy float64 = bb\nvar zz complex128 = bb\n```", "```\n123\n```", "```\nvar ww = 123\nvar xx int32 = 123\nvar yy float64 = 123\nvar zz complex128 = 123\n```", "```\npackage main\nimport \"fmt\"\nfunc main() {\n    var p = 5.2 / 3\n    fmt.Printf(\"p: Type: %T Value: %v\\n\", p, p)\n}\n```", "```\np: Type: float64 Value: 1.7333333333333334\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\ttype myBool bool\n\n\t//Typed Boolean constant\n\tconst aa bool = true\n\tvar uu = aa\n\tfmt.Println(\"Typed named boolean constant\")\n\tfmt.Printf(\"uu: Type: %T Value: %v\\n\\n\", uu, uu)\n\n\t//Below line will raise a compilation error\n\t//var vv myBool = aa\n\n\t//Untyped named boolean constant\n\tconst bb = true\n\n\tvar ww myBool = bb\n\tvar xx = bb\n\tfmt.Println(\"Untyped named boolean constant\")\n\tfmt.Printf(\"ww: Type: %T Value: %v\\n\", ww, ww)\n\tfmt.Printf(\"xx: Type: %T Value: %v\\n\\n\", xx, xx)\n\n\t//Untyped unnamed boolean constant\n\tvar yy myBool = true\n\tvar zz = true\n\tfmt.Println(\"Untyped unnamed boolean constant\")\n\tfmt.Printf(\"yy: Type: %T Value: %v\\n\", yy, yy)\n\tfmt.Printf(\"zz: Type: %T Value: %v\\n\", zz, zz)\n}\n```", "```\nTyped named boolean constant\nuu: Type: bool Value: true\n\nUntyped named boolean constant\nww: Type: main.myBool Value: true\nxx: Type: bool Value: true\n\nUntyped unnamed boolean constant\nyy: Type: main.myBool Value: true\nzz: Type: bool Value: true\n```", "```\ntype myBool bool\n```", "```\nconst aa bool = true\n```", "```\nvar v mybool = aa\n```", "```\nvar uu = aa\n```", "```\nconst bb = true\n```", "```\nvar ww mybool = bb\nvar xx = bb\n```", "```\ntrue\n```", "```\nvar yy mybool = true\nvar zz = true\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\ttype myChar int32\n\n\t//Typed character constant\n\tconst aa int32 = 'a'\n\tvar uu = aa\n\tfmt.Println(\"Untyped unnamed character constant\")\n\tfmt.Printf(\"uu: Type: %T Value: %v\\n\\n\", uu, uu)\n\n\t//Below line will raise a compilation error\n\t//var vv myBool = aa\n\n\t//Untyped named character constant\n\tconst bb = 'a'\n\n\tvar ww myChar = bb\n\tvar xx = bb\n\tfmt.Println(\"Untyped named character constant\")\n\tfmt.Printf(\"ww: Type: %T Value: %v\\n\", ww, ww)\n\tfmt.Printf(\"xx: Type: %T Value: %v\\n\\n\", xx, xx)\n\n\t//Untyped unnamed character constant\n\tvar yy myChar = 'a'\n\tvar zz = 'a'\n\tfmt.Println(\"Untyped unnamed character constant\")\n\tfmt.Printf(\"yy: Type: %T Value: %v\\n\", yy, yy)\n\tfmt.Printf(\"zz: Type: %T Value: %v\\n\", zz, zz)\n}\n```", "```\nUntyped unnamed character constant\nuu: Type: int32 Value: 97\n\nUntyped named character constant\nww: Type: main.myChar Value: 97\nxx: Type: int32 Value: 97\n\nUntyped unnamed character constant\nyy: Type: main.myChar Value: 97\nzz: Type: int32 Value: 97\n```", "```\ntype myChar int32\n```", "```\nconst aa int32 = 'a'\n```", "```\nvar v myChar = aa\n```", "```\nvar uu = aa\n```", "```\nconst bb = 'a'\n```", "```\nvar ww myChar = bb\nvar xx = bb\n```", "```\n'a'\n```", "```\nvar yy myChar = 'a'\nvar zz = 'a'\n```"]