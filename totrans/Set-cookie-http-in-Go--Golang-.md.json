["```\ntype Cookie struct {\n\tName  string\n\tValue string\n\n\tPath       string    // optional\n\tDomain     string    // optional\n\tExpires    time.Time // optional\n\tRawExpires string    // for reading cookies only\n\n\t// MaxAge=0 means no 'Max-Age' attribute specified.\n\t// MaxAge<0 means delete cookie now, equivalently 'Max-Age: 0'\n\t// MaxAge>0 means Max-Age attribute present and given in seconds\n\tMaxAge   int\n\tSecure   bool\n\tHttpOnly bool\n\tSameSite SameSite\n\tRaw      string\n\tUnparsed []string // Raw text of unparsed attribute-value pairs\n}\n```", "```\npackage main\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/http/cookiejar\"\n)\nvar client http.Client\nfunc init() {\n    jar, err := cookiejar.New(nil)\n    if err != nil {\n        log.Fatalf(\"Got error while creating cookie jar %s\", err.Error())\n    }\n    client = http.Client{\n        Jar: jar,\n    }\n}\nfunc main() {\n    cookie := &http.Cookie{\n        Name:   \"token\",\n        Value:  \"some_token\",\n        MaxAge: 300,\n    }\n    cookie2 := &http.Cookie{\n        Name:   \"clicked\",\n        Value:  \"true\",\n        MaxAge: 300,\n    }\n    req, err := http.NewRequest(\"GET\", \"http://google.com\", nil)\n    if err != nil {\n        log.Fatalf(\"Got error %s\", err.Error())\n    }\n    req.AddCookie(cookie)\n    req.AddCookie(cookie2)\n    for _, c := range req.Cookies() {\n        fmt.Println(c)\n    }\n    resp, err := client.Do(req)\n    if err != nil {\n        log.Fatalf(\"Error occured. Error is: %s\", err.Error())\n    }\n    defer resp.Body.Close()\n    fmt.Printf(\"StatusCode: %d\\n\", resp.StatusCode)\n}\n```", "```\ntoken=some_token\nclicked=true\nStatusCode: 200\n```", "```\ncookie := &http.Cookie{\n    Name:   \"token\",\n    Value:  \"some_token\",\n    MaxAge: 300,\n}\n```", "```\nreq.AddCookie(cookie)\n```", "```\ntype Client struct {\n    Transport RoundTripper\n\n    CheckRedirect func(req *Request, via []*Request) error\n\n    Jar CookieJar\n\n    Timeout time.Duration\n}\n```", "```\ntype CookieJar interface {\n    SetCookies(u *url.URL, cookies []*Cookie)\n    Cookies(u *url.URL) []*Cookie\n}\n```", "```\nmodule sample.com/client\ngo 1.16\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/cookiejar\"\n\t\"net/url\"\n)\n\nvar client http.Client\n\nfunc init() {\n\tjar, err := cookiejar.New(nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"Got error while creating cookie jar %s\", err.Error())\n\t}\n\n\tclient = http.Client{\n\t\tJar: jar,\n\t}\n}\n\nfunc main() {\n\treq, err := http.NewRequest(\"GET\", \"http://localhost:8080/doc\", nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"Got error %s\", err.Error())\n\t}\n\tcookie := &http.Cookie{\n\t\tName:   \"token\",\n\t\tValue:  \"some_token\",\n\t\tMaxAge: 300,\n\t}\n\turlObj, _ := url.Parse(\"http://localhost:8080/\")\n\tclient.Jar.SetCookies(urlObj, []*http.Cookie{cookie})\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error occured. Error is: %s\", err.Error())\n\t}\n\tdefer resp.Body.Close()\n\n\tfmt.Printf(\"StatusCode: %d\\n\", resp.StatusCode)\n\n\treq, err = http.NewRequest(\"GET\", \"http://localhost:8080/doc/id\", nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"Got error %s\", err.Error())\n\t}\n\n\tresp, err = client.Do(req)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error occured. Error is: %s\", err.Error())\n\t}\n\tdefer resp.Body.Close()\n\n\tfmt.Printf(\"StatusCode: %d\\n\", resp.StatusCode)\n}\n```", "```\njar, err := cookiejar.New(nil)\nif err != nil {\n     log.Fatalf(\"Got error while creating cookie jar %s\", err.Error())\n}\n\nclient = http.Client{\n     Jar: jar,\n}\n```", "```\ncookie := &http.Cookie{\n\t\tName:   \"token\",\n\t\tValue:  \"some_token\",\n\t\tMaxAge: 300,\n}\nurlObj, _ := url.Parse(\"http://localhost:8080/\")\nclient.Jar.SetCookies(urlObj, []*http.Cookie{cookie})\n```", "```\nmodule sample.com/server\n\ngo 1.16\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tdocHandler := http.HandlerFunc(docHandler)\n\thttp.Handle(\"/doc\", docHandler)\n\n\tdocGetID := http.HandlerFunc(docGetID)\n\thttp.Handle(\"/doc/id\", docGetID)\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\nfunc docHandler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Println(\"Cookie in First API Call\")\n\tfor _, c := range r.Cookies() {\n\t\tfmt.Println(c)\n\t}\n\tfmt.Println()\n\tw.WriteHeader(200)\n\tw.Write([]byte(\"Doc Get Successful\"))\n\treturn\n}\n\nfunc docGetID(w http.ResponseWriter, r *http.Request) {\n\tfmt.Println(\"Cookie in Second API Call\")\n\tfor _, c := range r.Cookies() {\n\t\tfmt.Println(c)\n\t}\n\tw.WriteHeader(200)\n\tw.Write([]byte(\"Doc Get ID Successful\"))\n\treturn\n}\n```", "```\ngo run server.go\n```", "```\ngo run client.go\n```", "```\nCookie in First API Call\ntoken=some_token\n\nCookie in Second API Call\ntoken=some_token\n```"]