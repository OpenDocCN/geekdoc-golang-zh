- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:50:42'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Detonate the maximum bombs program in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/detonate-maximum-bombs-golang/](https://golangbyexample.com/detonate-maximum-bombs-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Program](#Program "Program")*  *# **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 2d array  is given where each entry in an  array has three values
  prefs: []
  type: TYPE_NORMAL
- en: i- Denotes the x coordinates of the bomb
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: j – Denotes the y  coordinates of the  bomb
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: r –  Denotes the radius of the range of the bomb
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A bomb when exploded would cause an explosion of all the bombs within its range. 
    When those bombs are exploded they will in turn cause all the bombs in their range
    to be exploded.
  prefs: []
  type: TYPE_NORMAL
- en: You can only detonate one bomb. Idea is to find the maximum number of bombs 
    that  can be detonated
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 1**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first bomb lies in the range of the second bomb. So when we explode the 
    second bomb, both the second  and first bomb will  be exploded
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 2**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Both the bomb are outside the range of each other.
  prefs: []
  type: TYPE_NORMAL
- en: The idea to solve this problem is to view everything as a directed graph where
    a directed node from the first bomb to the second bomb exists if the second bomb
    lies within the range of the first bomb.
  prefs: []
  type: TYPE_NORMAL
- en: Once this graph is constructed, we can do DFS  from each node to get the maximum
    number of bombs it can explode. We will also store the results previously computed
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: '**Program**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Below is the program for the same
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  prefs: []
  type: TYPE_NORMAL
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you – [All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  prefs: []
  type: TYPE_NORMAL
- en: Also, check out our system design tutorial series here – [System Design Tutorial
    Series](https://techbyexample.com/system-design-questions/)
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
