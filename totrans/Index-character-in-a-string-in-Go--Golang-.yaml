- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:13:15'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Index character in a string in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/go-index-character-string/](https://golangbyexample.com/go-index-character-string/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In Golang string is a sequence of bytes. A string literal actually represents
    a UTF-8 sequence of bytes. In UTF-8, ASCII characters are single-byte corresponding
    to the first 128 Unicode characters. All other characters are between 1 -4 bytes.
    Due to this, it is not possible to index a character in a string.
  prefs: []
  type: TYPE_NORMAL
- en: For example, see below the program and its output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you might have noticed, it prints different characters than expected and
    length is also 5 instead of 4\. Why is that? To answer please remember we said
    that a string is essentially a slice of bytes. Let's print that slice of bytes
    using
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The output will be
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is the mapping of each of character to its byte sequence. As you can notice
    **a**, **b**, **c** take each 1 byte but **£** takes two bytes. That is why the
    length of the string is 5 and not 4
  prefs: []
  type: TYPE_NORMAL
- en: '| a | 97 |'
  prefs: []
  type: TYPE_TB
- en: '| b | 98 |'
  prefs: []
  type: TYPE_TB
- en: '| £ | 194, 163 |'
  prefs: []
  type: TYPE_TB
- en: '| c | 99 |'
  prefs: []
  type: TYPE_TB
- en: Then how we can index into a string. This is where **rune** data type comes
    into picture In GO, **rune** data type represents a Unicode point. You can learn
    more about rune here - [https://golangbyexample.com/understanding-rune-in-golang](https://golangbyexample.com/understanding-rune-in-golang)
  prefs: []
  type: TYPE_NORMAL
- en: Once a string is converted to an array of **rune** then it is possible to index
    a character in that array of rune. See below code
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Also to mention you can use range operator to iterate over all Unicode characters
    in the string, but to index character in a string, you can convert it to an array
    of **rune**.
  prefs: []
  type: TYPE_NORMAL
- en: '[golang](https://golangbyexample.com/tag/golang/)*   [index](https://golangbyexample.com/tag/index/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
