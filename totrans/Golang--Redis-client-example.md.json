["```\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"time\"\n\t\"github.com/go-redis/redis\"\n)\n\nvar (\n\tclient = &redisClient{}\n)\n\ntype redisClient struct {\n\tc *redis.Client\n}\n\n//GetClient get the redis client\nfunc initialize() *redisClient {\n\tc := redis.NewClient(&redis.Options{\n\t\tAddr: \"127.0.0.1:6379\",\n\t})\n\n\tif err := c.Ping().Err(); err != nil {\n\t\tpanic(\"Unable to connect to redis \" + err.Error())\n\t}\n\tclient.c = c\n\treturn client\n}\n\n//GetKey get key\nfunc (client *redisClient) getKey(key string, src interface{}) error {\n\tval, err := client.c.Get(key).Result()\n\tif err == redis.Nil || err != nil {\n\t\treturn err\n\t}\n\terr = json.Unmarshal([]byte(val), &src)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\n//SetKey set key\nfunc (client *redisClient) setKey(key string, value interface{}, expiration time.Duration) error {\n\tcacheEntry, err := json.Marshal(value)\n\tif err != nil {\n\t\treturn err\n\t}\n\terr = client.c.Set(key, cacheEntry, expiration).Err()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n```", "```\npackage main\n\nimport (\n\t\"log\"\n\t\"time\"\n)\n\ntype valueEx struct {\n\tName  string\n\tEmail string\n}\n\nfunc main() {\n\tredisClient := initialize()\n\tkey1 := \"sampleKey\"\n\tvalue1 := &valueEx{Name: \"someName\", Email: \"someemail@abc.com\"}\n\terr := redisClient.setKey(key1, value1, time.Minute*1)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error: %v\", err.Error())\n\t}\n\n\tvalue2 := &valueEx{}\n\terr = redisClient.getKey(key1, value2)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error: %v\", err.Error())\n\t}\n\n\tlog.Printf(\"Name: %s\", value2.Name)\n\tlog.Printf(\"Email: %s\", value2.Email)\n} \n```", "```\nName: someName\nEmail: someemail@abc.com \n```"]