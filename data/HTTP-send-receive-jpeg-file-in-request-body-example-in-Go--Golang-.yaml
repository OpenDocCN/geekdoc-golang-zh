- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '类别: 未分类'
- en: 'date: 2024-10-13 06:32:38'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-10-13 06:32:38'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: HTTP send/receive jpeg file in request body example in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP 在请求体中发送/接收 jpeg 文件的示例（使用 Go 语言）
- en: 来源：[https://golangbyexample.com/jpeg-post-http-go/](https://golangbyexample.com/jpeg-post-http-go/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/jpeg-post-http-go/](https://golangbyexample.com/jpeg-post-http-go/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**[概览](#Overview "Overview")**'
- en: '[HTTP Server](#HTTP_Server "HTTP Server")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[HTTP 服务器](#HTTP_Server "HTTP Server")'
- en: '[HTTP Client](#HTTP_Client "HTTP Client")*  *# **Overview**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[HTTP 客户端](#HTTP_Client "HTTP Client")*  *# **概览**'
- en: '**multipart/form-data** content-type can be used to send the jpeg files in
    an HTTP POST call. The form-data will contain'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**multipart/form-data** 内容类型可用于在 HTTP POST 调用中发送 jpeg 文件。表单数据将包含'
- en: jpeg filename- **test.jpeg** in the example that we will see in this tutorial
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jpeg 文件名 - **test.jpeg**，在本教程中我们将看到的示例
- en: key that will contain the jpeg file content – **photo** in the example in the
    tutorial
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将包含 jpeg 文件内容的键 – 本教程示例中的 **photo**
- en: Let’s see an example of both HTTP **client** and **server**
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个 HTTP **客户端** 和 **服务器** 的示例
- en: '**HTTP Server**'
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**HTTP 服务器**'
- en: Below is the program for the same.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相同的程序。
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let's understand the program also. The first thing we need to do is to call
    **ParseMultipartForm** function on the **request** object
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也理解一下程序。我们需要做的第一件事是调用 **ParseMultipartForm** 函数在 **request** 对象上
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It will parse the form data request body. After that, we can call the **FormFile**
    function on the request object passing the key as an argument. It will return
    the **multipart.File** object for the given key which is **"photo"** here. This
    object is an interface to access the file part of a multipart message for that
    key. The program uses it to save the file to the disk.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它将解析表单数据请求体。之后，我们可以在请求对象上调用 **FormFile** 函数，传入键作为参数。它将返回给定键的 **multipart.File**
    对象，这里是 **"photo"**。该对象是访问该键的多部分消息文件部分的接口。程序使用它将文件保存到磁盘。
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This was the HTTP server example. Run the server. It will listen on **8080**
    port. Let's create an HTTP client to test the above server as well. Below is the
    code for that.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 HTTP 服务器示例。运行服务器。它将在 **8080** 端口监听。让我们创建一个 HTTP 客户端来测试上述服务器。以下是该客户端的代码。
- en: '**HTTP Client**'
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**HTTP 客户端**'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Below is the code for an example of an HTTP client for the same. It is sending
    the **multipart/form-data** request body in an HTTP request to the server created
    in the above example.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 HTTP 客户端示例的代码。它在 HTTP 请求中向上述创建的服务器发送 **multipart/form-data** 请求体。
- en: First, we have to create a multipart Writer [https://golang.org/pkg/mime/multipart/#Writer](https://golang.org/pkg/mime/multipart/#Writer)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须创建一个多部分写入器 [https://golang.org/pkg/mime/multipart/#Writer](https://golang.org/pkg/mime/multipart/#Writer)
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The multipart writer provides the **CreateFormFile** method which can be used
    to create a file field to be sent in the multipart request body. The **filename**
    is **test.jpg** and the **key** name is **"photo".**Run the above file.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 多部分写入器提供了 **CreateFormFile** 方法，可以用于创建要在多部分请求体中发送的文件字段。**文件名** 是 **test.jpg**，**键**
    名称是 **"photo"**。运行上述文件。
- en: It will send the **test.jpg** to the server created above. You can check at
    the server end after the request finishes. The server will parse the form-data
    request body and then save the file contents to a file with the same name.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 它将把 **test.jpg** 发送到上述创建的服务器。请求完成后，你可以在服务器端检查。服务器将解析表单数据请求体，然后将文件内容保存到同名文件中。
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
