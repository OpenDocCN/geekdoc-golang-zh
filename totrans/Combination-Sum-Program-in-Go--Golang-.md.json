["```\nInput: [3,4,10,11]\nTarget: 10\nOutput: [[3,3,4],[10]]\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc combinationSum(candidates []int, target int) [][]int {\n\tlengthCandidates := len(candidates)\n\tcurrent_sum_array := make([]int, 0)\n\toutput := make([][]int, 0)\n\tcombinationSumUtil(candidates, lengthCandidates, 0, 0, 0, target, current_sum_array, &output)\n\treturn output\n}\n\nfunc combinationSumUtil(candidates []int, lengthCandidates, index, current_sum_index, current_sum, target int, current_sum_array []int, output *[][]int) {\n\n\tif index >= lengthCandidates {\n\t\treturn\n\t}\n\n\tif current_sum > target {\n\t\treturn\n\t}\n\n\tif current_sum == target {\n\t\tvar o []int\n\t\tfor i := 0; i < current_sum_index; i++ {\n\t\t\to = append(o, current_sum_array[i])\n\t\t}\n\t\t*output = append(*output, o)\n\t\treturn\n\t}\n\n\t//Exclude\n\tcombinationSumUtil(candidates, lengthCandidates, index+1, current_sum_index, current_sum, target, current_sum_array, output)\n\n\t//Include\n\tcurrent_sum_array = append(current_sum_array, candidates[index])\n\n\tcombinationSumUtil(candidates, lengthCandidates, index, current_sum_index+1, current_sum+candidates[index], target, current_sum_array, output)\n}\n\nfunc main() {\n\toutput := combinationSum([]int{3, 4, 10, 11}, 10)\n\tfmt.Println(output)\n}\n```", "```\n[[10] [3 3 4]]\n```"]