["```\nsample := [size_of_array]{type}{a1, a2... an}\n```", "```\ncannot use sample1 (type [1]int) as type [2]int in assignment\n```", "```\nsample1 := [1]int{1}\nsample2 := [2]int{1,2}\n\nsample2 = sample1\n```", "```\n[2]int{1, 2}\n```", "```\n[2]int{}\n```", "```\n[...]int{2, 3}\n```", "```\n[...]int{}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    //Both number of elements and actual elements\n    sample1 := [2]int{1, 2}\n    fmt.Printf(\"Sample1: Len: %d, %v\\n\", len(sample1), sample1)\n\n    //Only actual elements\n    sample2 := [...]int{2, 3}\n    fmt.Printf(\"Sample2: Len: %d, %v\\n\", len(sample2), sample2)\n\n    //Only number of elements\n    sample3 := [2]int{}\n    fmt.Printf(\"Sample3: Len: %d, %v\\n\", len(sample3), sample3)\n\n    //Without both number of elements and actual elements\n    sample4 := [...]int{}\n    fmt.Printf(\"Sample4: Len: %d, %v\\n\", len(sample4), sample4)\n}\n```", "```\nSample1: Len: 2, [1 2]\nSample2: Len: 2, [2 3]\nSample3: Len: 2, [0 0]\nSample4: Len: 0, []\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := [4]int{5, 8}\n    fmt.Printf(\"Sample: Len: %d, %v\\n\", len(sample), sample)\n}\n```", "```\nSample: Len: 4, [5 8 0 0]\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := [2]string{\"aa\", \"bb\"}\n\n    fmt.Println(sample[0])\n    fmt.Println(sample[1])\n\n    sample[0] = \"xx\"\n    fmt.Println(sample)\n    //sample[3] = \"yy\"\n}\n```", "```\naa\nbb\n[xx bb]\n```", "```\nsample[3] = \"yy\"\n```", "```\ninvalid array index 3 (out of bounds for 2-element array)\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sample1 := [2]string{\"a\", \"b\"}\n    fmt.Printf(\"Sample1 Before: %v\\n\", sample1)\n    sample2 := sample1\n    sample2[0] = \"c\"\n    fmt.Printf(\"Sample1 After assignment: %v\\n\", sample1)\n    fmt.Printf(\"Sample2: %v\\n\", sample2)\n    test(sample1)\n    fmt.Printf(\"Sample1 After Test Function Call: %v\\n\", sample1)\n}\nfunc test(sample [2]string) {\n    sample[0] = \"d\"\n    fmt.Printf(\"Sample in Test function: %v\\n\", sample)\n}\n```", "```\nSample1 Before: [a b]\nSample1 After assignment: [a b]\nSample2: \nSample in Test function: [d b]\nSample1 After Test Function Call: [a b]\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    letters := [3]string{\"a\", \"b\", \"c\"}\n    //Using for loop\n    fmt.Println(\"Using for loop\")\n    len := len(letters)\n    for i := 0; i < len; i++ {\n        fmt.Println(letters[i])\n    }\n    //Using for-range operator\n    fmt.Println(\"\\nUsing for-range loop\")\n    for i, letter := range letters {\n        fmt.Printf(\"%d %s\\n\", i, letter)\n    }\n}\n```", "```\nUsing for loop\na\nb\nc\n\nUsing for-range loop\n0 a\n1 b\n2 c\n```", "```\nsample := [x][y]{type}{{a11, a12 .. a1y},\n                       {a21, a22 .. a2y},\n                       {.. },\n                       {ax1, ax2 .. axy}} \n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := [2][3]int{{1, 2, 3}, {4, 5, 6}}\n    fmt.Println(\"First Run\")\n    for _, row := range sample {\n        for _, val := range row {\n            fmt.Println(val)\n        }\n    }\n\n    sample[0][0] = 6\n    sample[1][2] = 1\n    fmt.Println(\"\\nSecond Run\")\n    for _, row := range sample {\n        for _, val := range row {\n            fmt.Println(val)\n        }\n    }\n}\n```", "```\nFirst Run\n1\n2\n3\n4\n5\n6\n\nSecond Run\n6\n2\n3\n4\n5\n1\n```", "```\nsample[0][0] = 6\n```"]