- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '类别: 未分类'
- en: 'date: 2024-10-13 06:10:09'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-10-13 06:10:09'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Write multiline string in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Go (Golang)中编写多行字符串
- en: 来源：[https://golangbyexample.com/multiline-string-go/](https://golangbyexample.com/multiline-string-go/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/multiline-string-go/](https://golangbyexample.com/multiline-string-go/)
- en: A backquote (**`**) can be used to write a multiline string in Golang. Note
    that a string encoded in backquotes is a raw literal string and doesn’t honor
    any kind of escaping. Thus \n, \t are treated as a string literal when using back
    quotes
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 反引号(**`**)可以用于在Golang中编写多行字符串。请注意，用反引号编码的字符串是原始字面量字符串，不会遵循任何类型的转义。因此，在使用反引号时，\n和\t被视为字符串字面量。
- en: '**Working Code:**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**工作代码:**'
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[golang](https://golangbyexample.com/tag/golang/)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[golang](https://golangbyexample.com/tag/golang/)'
