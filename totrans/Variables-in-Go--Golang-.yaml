- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:18:02'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Variables in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/variables-in-golang-complete-guide/](https://golangbyexample.com/variables-in-golang-complete-guide/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is the chapter 6 of the golang comprehensive tutorial series. Refer to
    this link for other chapters of the series – [Golang Comprehensive Tutorial Series](https://golangbyexample.com/golang-comprehensive-tutorial/)
  prefs: []
  type: TYPE_NORMAL
- en: '**Next Tutorial** – [All basic data types](https://golangbyexample.com/all-basic-data-types-golang/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous Tutorial** – [Packages and Modules – Part 2](https://golangbyexample.com/packages-modules-go-second/)'
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s check out the current tutorial. Below is the table of contents for
    the current tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [What is variable](#What_is_variable "What is variable")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Naming Conventions](#Naming_Conventions "Naming Conventions")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Declaring a variable](#Declaring_a_variable "Declaring a variable")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Single variable declaration without initial value](#Single_variable_declaration_without_initial_value
    "Single variable declaration without initial value")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Single variable declaration with initial value](#Single_variable_declaration_with_initial_value
    "Single variable declaration with initial value")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Multiple variable declaration without initial value](#Multiple_variable_declaration_without_initial_value
    "Multiple variable declaration without initial value")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Multiple variable declaration with initial value](#Multiple_variable_declaration_with_initial_value
    "Multiple variable declaration with initial value")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Declare variables of different types](#Declare_variables_of_different_types
    "Declare variables of different types")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Variable Declaration with no type or Type Inference](#Variable_Declaration_with_no_type_or_Type_Inference
    "Variable Declaration with no type or Type Inference")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Short variable declaration](#Short_variable_declaration "Short variable declaration")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Important Points](#Important_Points "Important Points")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Scope of a Variable (Local and Global Variable)](#Scope_of_a_Variable_Local_and_Global_Variable
    "Scope of a Variable (Local and Global Variable)")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Local Variable](#Local_Variable "Local Variable")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Global Variable](#Global_Variable "Global Variable")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](#Conclusion "Conclusion")*  *# **What is variable**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A variable is the name of a memory location. That memory location may store
    a value of any type. So each variable has a type associated with it which determines
    the size and range of that variable and also the operations defined on that variable.
  prefs: []
  type: TYPE_NORMAL
- en: '**Naming Conventions**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A variable name can only start with a letter or an underscore.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be followed by any number of letters, numbers or underscores after that
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go is case sensitive so uppercase and lowercase letters are treated differently.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The variable name cannot be any keyword name in Go
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no limit on the length of the variable name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But it is advisable to have the variable name of optimum length.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Declaring a variable**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In GO variables are declared using the **var** keyword but there are other ways
    of declaring a variable too as we will see later in this tutorial. Let’s explore
    different ways of declaring a variable
  prefs: []
  type: TYPE_NORMAL
- en: '**Single variable declaration without initial value**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is the format of a single variable declaration without initial value being
    assigned. First is the **var** keyword, second is the **variable name** and third
    is the **variable type**.  Also note when the value is not provided , then the
    variable is initialised with the default value of that type which is also known
    as zero value of that type. In Go default value or zero value of **int** is zero
  prefs: []
  type: TYPE_NORMAL
- en: '**var <variable_name> <type>**'
  prefs: []
  type: TYPE_NORMAL
- en: See the below example, it declares a var named **aaa** of type **int**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:** It will print the default value of int which is zero'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Single variable declaration with initial value**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is the format of a single variable declaration with initial value being
    assigned. Everything is same as above, only thing additional is that we assign
    value to the variable at the end
  prefs: []
  type: TYPE_NORMAL
- en: '**var <variable_name> <type> = <value>**'
  prefs: []
  type: TYPE_NORMAL
- en: See below example, it declares a var named **aaa** of type **int** and gives
    a value **8** to it
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Multiple variable declaration without initial value**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is the format of a multiple variable declaration without initial value
    being assigned. Please note only variables of same type can be declared together.
    The type comes at the end
  prefs: []
  type: TYPE_NORMAL
- en: '**var <name1>, <name2>**,….**<nameN> <type>**'
  prefs: []
  type: TYPE_NORMAL
- en: See below example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:** It will print the default or zero value of **int** which is zero
    for both **aaa** and **bbb**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Multiple variable declaration with initial value**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is the format of a multiple variable declaration with initial value being
    assigned. Please note only variables of same type can be declared together. The
    type comes at the end
  prefs: []
  type: TYPE_NORMAL
- en: '**var <name1>, <name2>, …..,<nameN> <type> = <value1>, <value2>, …..,<valueN>**'
  prefs: []
  type: TYPE_NORMAL
- en: See below code example. Variable **aaa** and **bbb** are given a value of 8
    and 9 respectively in a single declaration
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Declare variables of different types**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is the format for declaring multiple variables with different types. Value
    can or cannot be assigned to the variable at that time. Variables for which value
    is not assigned will get default value of that type. In below example we see three
    declarations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Variable Declaration with no type or Type Inference**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Variables can also be declared without specifying the type.
  prefs: []
  type: TYPE_NORMAL
- en: The GO compiler based upon the value assigned to the variable will figure out
    the type. So if the variable has an initial value, then the type can be omitted. 
    This is also called **Type Inference**. Below is the format for such declaration
  prefs: []
  type: TYPE_NORMAL
- en: '**var <varialbe_name> = <value>**'
  prefs: []
  type: TYPE_NORMAL
- en: Below is the type inference table for basic types **int**, **float**, **complex
    numbers**, **string**, **boolean**, **characters**. It basically means that if
    the value is an integer the type of the variable inferred will be **int**, if
    the value is a float then type of the variable inferred will be **float64** and
    so on based upon below table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Integers | int |'
  prefs: []
  type: TYPE_TB
- en: '| Floats | float64 |'
  prefs: []
  type: TYPE_TB
- en: '| Complex Numbers | complex128 |'
  prefs: []
  type: TYPE_TB
- en: '| Strings | string |'
  prefs: []
  type: TYPE_TB
- en: '| Booleans | bool |'
  prefs: []
  type: TYPE_TB
- en: '| Characters | int32 or rune |'
  prefs: []
  type: TYPE_TB
- en: For other types such as **Array**, **Pointer**, **Structure,** etc, type Inference
    will happen based on the value. Let’s see a working example of the above point. 
    Notice that type of t is correctly inferred as int as the value assigned to it
    is 123 which is int. Similarly type of u is also correctly inferred as **string**
    as the value assigned to it is a **string**.
  prefs: []
  type: TYPE_NORMAL
- en: Also notice that the type of variable **z** is inferred correctly as a struct
    **main.sample**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Short variable declaration**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go provides another way of declaring variables which is using the **:=** operator.
    When **:=** operator is used both **var** keyword and type info can be omitted.
    Below is the format for such declaration
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Type inference will happen as explained above. Let’s see a working example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Some points to be noted about the := operator
  prefs: []
  type: TYPE_NORMAL
- en: := operator is only available within a function. It is not allowed outside the
    function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A variable once declared using := cannot be redeclared using the := operator.
    So below statement will raise a compiler error  “**no new variables in the left
    side of :=”** .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: := operator can also be used to declare multiple variables in a single line.
    See below example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In case of multiple declaration, := can also be used again for a particular
    variable if atleast one of the variables on left hand side is new. See below example.
    Notice that b is again declared using := This is only possible if atleast one
    of the variable is new which is variable **c** here. In this case it acts as a
    assignment for variable **b**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**Important Points**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A unused variable will be reported as a compiler error. GO compiler doesn’t
    allow any unused variable. This is an optimization in GO. Same is applicable for
    constant too as we will see later. For eg below program will raise a compiler
    error
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: A variable declared within an inner scope having the same name as variable declared
    in the outer scope will shadow the variable in the outer scope.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Variable Expression – While the declaration variable can also be assigned an
    expression or a function call. See the below example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variable **a** is declared with expression 5 +3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Variable **b** is declared with a function call  math.Max(4, 5), whose result
    will be assigned to b at run time.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: A variable once intialized with a particular type, cannot be assigned a value
    of different type later. This is applicable for short hand declaration is well.
    See below example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Variable **aaa** has been assigned a type of **int**, hence compiler raises
    error on assigning a value of type string to it. For variable **bbb**, the type
    inferred is **int,** hence it also raises a compiler error on assigning a value
    of type string to it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scope of a Variable (Local and Global Variable)**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A variable declaration can be done at the package level or a function level
    or a block level. Scope of a variable defines where that variable is accessible
    and also the life of the variable. Golang variables can be divided into two categories
    based on scope
  prefs: []
  type: TYPE_NORMAL
- en: Local Variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global Variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Local Variable**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Local variables are variables which are defined within a block or a function
    level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example of the block is a for loop or a range loop etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These variables are only be accessed from within their block or function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These variables only live till the end of the block or a function in which they
    are declared. After that, they are Garbage Collected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See below example
  prefs: []
  type: TYPE_NORMAL
- en: i is not available after the for loop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly aaa is not available outside the function in which it is declared.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hence below program will raise compiler error
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '**Global Variable**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A variable will be global within a package if it is declared at the top of a
    file outside the scope of any function or block.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If this variable name starts with a lowercase letter then it can be accessed
    from within the the package which contains this variable definition.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the variable name stats with a uppercase letter then it can be accessed from
    outside different package other than which it is declared.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global variable are available throughout the lifetime of a program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example in below program variable **aaa** will be a global variable available
    throughout **main** package. It will be available in any function inside **main**
    package. Do note that variable name will not be available outside **main** package
    as its name starts with a lowercase letter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '**Conclusion**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is all about variables  in golang. Hope you have liked this article. Please
    share feedback or improvements or mistakes in comments.
  prefs: []
  type: TYPE_NORMAL
- en: '****Next Tutorial** – [All basic data types](https://golangbyexample.com/all-basic-data-types-golang/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous Tutorial** – [Packages and Modules – Part 2](https://golangbyexample.com/packages-modules-go-second/)**'
  prefs: []
  type: TYPE_NORMAL
- en: '[golang](https://golangbyexample.com/tag/golang/)*   [understanding variables
    in go](https://golangbyexample.com/tag/understanding-variables-in-go/)*   [using
    variables in go](https://golangbyexample.com/tag/using-variables-in-go/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
