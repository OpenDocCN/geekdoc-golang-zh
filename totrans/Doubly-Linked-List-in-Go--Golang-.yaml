- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:37:56'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Doubly Linked List in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/doubly-linked-list-golang/](https://golangbyexample.com/doubly-linked-list-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Program](#Program "Program")*  *## **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Doubly Linked List contains three fields in its node.
  prefs: []
  type: TYPE_NORMAL
- en: Data field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One Next pointer points to the next node in the list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One Previous pointer which points to the previous node in the list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here **“Data”** and **“Next”** fields are the same as in the case of a singly
    linked list. **“Previous”** pointer field is new which makes a linked list a doubly
    linked list.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to this article to learn about single linked list
  prefs: []
  type: TYPE_NORMAL
- en: '[https://golangbyexample.com/singly-linked-list-in-golang/](https://golangbyexample.com/singly-linked-list-in-golang/)'
  prefs: []
  type: TYPE_NORMAL
- en: Below is an example of a doubly linked list. Prev pointer of head (start) node
    points to Null. Similarly, the **Next** pointer of the last node points to Null.
  prefs: []
  type: TYPE_NORMAL
- en: '![double linked list](img/e89fb825a0cb856cfc39da333a6770e2.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Program**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To implement a doubly linked list in Go language, create a node struct with
    **data**, **prev** pointer, and **next** pointer, methods to add nodes in the
    doubly linked list (from the front end from the back end both), and methods to
    traverse forward and reverse.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]*'
  prefs: []
  type: TYPE_NORMAL
