["```\nInput:  3->2->1\nOutput: 1->2->3\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfirst := initList()\n\tfirst.AddFront(1)\n\tfirst.AddFront(2)\n\tfirst.AddFront(3)\n\tfirst.AddFront(4)\n\n\tfirst.Head.Traverse()\n\tfirst.Reverse()\n        fmt.Println(\"\")\n\tfirst.Head.Traverse()\n\n}\n\nfunc initList() *SingleList {\n\treturn &SingleList{}\n}\n\ntype ListNode struct {\n\tVal  int\n\tNext *ListNode\n}\n\nfunc (l *ListNode) Traverse() {\n\tfor l != nil {\n\t\tfmt.Println(l.Val)\n\t\tl = l.Next\n\t}\n}\n\ntype SingleList struct {\n\tLen  int\n\tHead *ListNode\n}\n\nfunc (s *SingleList) Reverse() {\n\n\tcurr := s.Head\n\tvar prev *ListNode\n\tvar next *ListNode\n\n\tfor curr != nil {\n\t\tnext = curr.Next\n\t\tcurr.Next = prev\n\t\tprev = curr\n\t\tcurr = next\n\t}\n\ts.Head = prev\n}\nfunc (s *SingleList) AddFront(num int) {\n\tele := &ListNode{\n\t\tVal: num,\n\t}\n\tif s.Head == nil {\n\t\ts.Head = ele\n\t} else {\n\t\tele.Next = s.Head\n\t\ts.Head = ele\n\t}\n\ts.Len++\n}\n```", "```\n4\n3\n2\n1\n\n1\n2\n3\n4\n```"]