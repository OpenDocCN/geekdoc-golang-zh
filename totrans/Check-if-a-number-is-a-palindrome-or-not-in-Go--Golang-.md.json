["```\n1\n121\n12321\n9\n0\n```", "```\n-121\n1211\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\toutput := isPalindrome(121)\n\tfmt.Println(output)\n\n\toutput = isPalindrome(12)\n\tfmt.Println(output)\n\n\toutput = isPalindrome(1234)\n\tfmt.Println(output)\n\n\toutput = isPalindrome(12321)\n\tfmt.Println(output)\n\n\toutput = isPalindrome(-101)\n\tfmt.Println(output)\n\n}\n\nfunc isPalindrome(x int) bool {\n\n\tif x < 0 {\n\t\treturn false\n\t}\n\tif x < 10 {\n\t\treturn true\n\t}\n\txReversed := reverse(x)\n\n\treturn xReversed == x\n}\n\nfunc reverse(x int) int {\n\tsign := \"positive\"\n\tif x >= 0 {\n\t\tsign = \"positive\"\n\t} else {\n\t\tsign = \"negative\"\n\t}\n\n\tx = int(math.Abs(float64(x)))\n\n\tvar reversedDigit int\n\n\tfor x > 0 {\n\t\tlastDigit := x % 10\n\t\treversedDigit = reversedDigit*10 + lastDigit\n\n\t\tx = x / 10\n\t}\n\n\tif sign == \"negative\" {\n\t\treversedDigit = reversedDigit * -1\n\t}\n\n\treturn reversedDigit\n}\n```", "```\ntrue\nfalse\nfalse\ntrue\nfalse\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\ta := 121\n\toutput := isPalindrome(a, &a)\n\tfmt.Println(output)\n\n\ta = 12\n\toutput = isPalindrome(a, &a)\n\tfmt.Println(output)\n\n\ta = 1234\n\toutput = isPalindrome(a, &a)\n\tfmt.Println(output)\n\n\ta = 12321\n\toutput = isPalindrome(a, &a)\n\tfmt.Println(output)\n\n\ta = -121\n\toutput = isPalindrome(-a, &a)\n\tfmt.Println(output)\n\n}\n\nfunc isPalindrome(x int, dup *int) bool {\n\tif x < 0 {\n\t\treturn false\n\t}\n\tif x < 10 {\n\t\treturn true\n\t}\n\n\tpalin := isPalindrome(x/10, dup)\n\n\t*dup = *dup / 10\n\tlastDigit := x % 10\n\n\tif palin && *dup%10 == lastDigit {\n\t\treturn true\n\t}\n\n\treturn false\n\n}\n```", "```\ntrue\nfalse\nfalse\ntrue\nfalse\n```"]