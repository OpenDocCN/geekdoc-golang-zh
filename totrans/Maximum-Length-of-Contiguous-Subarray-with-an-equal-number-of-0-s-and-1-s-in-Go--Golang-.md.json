["```\nInput: intervals = [0, 1]\nOutput: 2\n```", "```\nInput: intervals = [0, 1, 1, 0, 1, 1]\nOutput: 4\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc findMaxLength(nums []int) int {\n\tlenNums := len(nums)\n\n\tif lenNums == 0 {\n\t\treturn 0\n\t}\n\n\tcurrentSum := 0\n\n\tsumLeft := make([]int, lenNums)\n\n\tfor i := 0; i < lenNums; i++ {\n\t\tif nums[i] == 0 {\n\t\t\tcurrentSum = currentSum - 1\n\t\t} else {\n\t\t\tcurrentSum = currentSum + 1\n\t\t}\n\t\tsumLeft[i] = currentSum\n\t}\n\n\tmaxLength := 0\n\n\tmax := 0\n\tmin := 0\n\n\tfor i := 0; i < lenNums; i++ {\n\t\tif sumLeft[i] == 0 {\n\t\t\tmaxLength = i + 1\n\t\t}\n\t\tif sumLeft[i] > max {\n\t\t\tmax = sumLeft[i]\n\t\t}\n\n\t\tif sumLeft[i] < min {\n\t\t\tmin = sumLeft[i]\n\t\t}\n\t}\n\n\tnumMap := make(map[int]int, max-min+1)\n\n\tfor i := 0; i < lenNums; i++ {\n\t\tindex, ok := numMap[sumLeft[i]]\n\n\t\tif ok {\n\t\t\tcurrentLength := i - index\n\t\t\tif currentLength > maxLength {\n\t\t\t\tmaxLength = currentLength\n\t\t\t}\n\t\t} else {\n\t\t\tnumMap[sumLeft[i]] = i\n\t\t}\n\t}\n\n\treturn maxLength\n\n}\nfunc main() {\n\toutput := findMaxLength([]int{0, 1})\n\tfmt.Println(output)\n\n\toutput = findMaxLength([]int{0, 1, 1, 0, 1, 1})\n\tfmt.Println(output)\n}\n```", "```\n2\n4\n```"]