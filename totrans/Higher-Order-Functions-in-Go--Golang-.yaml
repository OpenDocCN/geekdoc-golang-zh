- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:11:15'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Higher-Order Functions in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/gohigher-order-functions/](https://golangbyexample.com/gohigher-order-functions/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Code:](#Code "Code:")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Example 1](#Example_1 "Example 1")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Example 2:](#Example_2 "Example 2:")*  *# **Overview**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Higher-order functions are those functions that either accept a function as
    a type or return function. Since a function is a first-order variable in Golang
    they can be passed around and also returned from some function and assigned to
    a variable.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In below Example 1
  prefs: []
  type: TYPE_NORMAL
- en: '**print** function takes a function of type **func(int, int) int** as an argument'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**getAreafunc** returns a function of type **func(int, int) int**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example 1**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Example 2:**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s see one more little complex example where
  prefs: []
  type: TYPE_NORMAL
- en: Two functions are passed as an argument
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two functions are returned from a function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]*'
  prefs: []
  type: TYPE_NORMAL
