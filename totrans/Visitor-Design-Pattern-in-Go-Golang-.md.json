["```\nif shape.type == square {\n   //Calculate area for squre\n} elseif shape.type == circle {\n    //Calculate area of triangle \n} elseif shape.type == \"triangle\" {\n    //Calculate area of triangle\n} else {\n   //Raise error\n} \n```", "```\ntype visitor interface {\n   visitForSquare(square)\n   visitForCircle(circle)\n   visitForTriangle(triangle)\n}\n```", "```\nfunc accept(v visitor)\n```", "```\nfunc (obj *squre) accept(v visitor){\n    v.visitForSquare(obj)\n}\n```", "```\ntype areaCalculator struct{\n    area int\n}\n\nfunc (a *areaCalculator) visitForSquare(s *square){\n    //Calculate are for square\n}\nfunc (a *areaCalculator) visitForCircle(s *square){\n    //Calculate are for circle\n}\nfunc (a *areaCalculator) visitForTriangle(s *square){\n    //Calculate are for triangle\n}\n```", "```\nsq := &square{}\nac := &areaCalculator{}\nsq.accept(ac)\n```", "```\ntype middleCoordinates struct {\n    x int\n    y int\n}\n\nfunc (a *middleCoordinates) visitForSquare(s *square) {\n    //Calculate middle point coordinates for square. After calculating the area assign in to the x and y instance variable.\n}\n\nfunc (a *middleCoordinates) visitForCircle(c *circle) {\n    //Calculate middle point coordinates for square. After calculating the area assign in to the x and y instance variable.\n}\n\nfunc (a *middleCoordinates) visitForTriangle(t *triangle) {\n    //Calculate middle point coordinates for square. After calculating the area assign in to the x and y instance variable.\n}\n```", "```\npackage main\n\ntype shape interface {\n    getType() string\n    accept(visitor)\n}\n```", "```\npackage main\n\ntype square struct {\n    side int\n}\n\nfunc (s *square) accept(v visitor) {\n    v.visitForSquare(s)\n}\n\nfunc (s *square) getType() string {\n    return \"Square\"\n}\n```", "```\npackage main\n\ntype circle struct {\n    radius int\n}\n\nfunc (c *circle) accept(v visitor) {\n    v.visitForCircle(c)\n}\n\nfunc (c *circle) getType() string {\n    return \"Circle\"\n}\n```", "```\npackage main\n\ntype rectangle struct {\n    l int\n    b int\n}\n\nfunc (t *rectangle) accept(v visitor) {\n    v.visitForrectangle(t)\n}\n\nfunc (t *rectangle) getType() string {\n    return \"rectangle\"\n}\n```", "```\npackage main\n\ntype visitor interface {\n    visitForSquare(*square)\n    visitForCircle(*circle)\n    visitForrectangle(*rectangle)\n}\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n)\n\ntype areaCalculator struct {\n    area int\n}\n\nfunc (a *areaCalculator) visitForSquare(s *square) {\n    //Calculate area for square. After calculating the area assign in to the area instance variable\n    fmt.Println(\"Calculating area for square\")\n}\n\nfunc (a *areaCalculator) visitForCircle(s *circle) {\n    //Calculate are for circle. After calculating the area assign in to the area instance variable\n    fmt.Println(\"Calculating area for circle\")\n}\n\nfunc (a *areaCalculator) visitForrectangle(s *rectangle) {\n    //Calculate are for rectangle. After calculating the area assign in to the area instance variable\n    fmt.Println(\"Calculating area for rectangle\")\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype middleCoordinates struct {\n    x int\n    y int\n}\n\nfunc (a *middleCoordinates) visitForSquare(s *square) {\n    //Calculate middle point coordinates for square. After calculating the area assign in to the x and y instance variable.\n    fmt.Println(\"Calculating middle point coordinates for square\")\n}\n\nfunc (a *middleCoordinates) visitForCircle(c *circle) {\n    //Calculate middle point coordinates for square. After calculating the area assign in to the x and y instance variable.\n    fmt.Println(\"Calculating middle point coordinates for circle\")\n}\n\nfunc (a *middleCoordinates) visitForrectangle(t *rectangle) {\n    //Calculate middle point coordinates for square. After calculating the area assign in to the x and y instance variable.\n    fmt.Println(\"Calculating middle point coordinates for rectangle\")\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    square := &square{side: 2}\n    circle := &circle{radius: 3}\n    rectangle := &rectangle{l: 2, b: 3}\n\n    areaCalculator := &areaCalculator{}\n    square.accept(areaCalculator)\n    circle.accept(areaCalculator)\n    rectangle.accept(areaCalculator)\n\n    fmt.Println()\n    middleCoordinates := &middleCoordinates{}\n    square.accept(middleCoordinates)\n    circle.accept(middleCoordinates)\n    rectangle.accept(middleCoordinates)\n}\n```", "```\nCalculating area for square\nCalculating area for circle\nCalculating area for rectangle\n\nCalculating middle point coordinates for square\nCalculating middle point coordinates for circle\nCalculating middle point coordinates for rectangle\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype shape interface {\n    getType() string\n    accept(visitor)\n}\n\ntype square struct {\n    side int\n}\n\nfunc (s *square) accept(v visitor) {\n    v.visitForSquare(s)\n}\n\nfunc (s *square) getType() string {\n    return \"Square\"\n}\n\ntype circle struct {\n    radius int\n}\n\nfunc (c *circle) accept(v visitor) {\n    v.visitForCircle(c)\n}\n\nfunc (c *circle) getType() string {\n    return \"Circle\"\n}\n\ntype rectangle struct {\n    l int\n    b int\n}\n\nfunc (t *rectangle) accept(v visitor) {\n    v.visitForrectangle(t)\n}\n\nfunc (t *rectangle) getType() string {\n    return \"rectangle\"\n}\n\ntype visitor interface {\n    visitForSquare(*square)\n    visitForCircle(*circle)\n    visitForrectangle(*rectangle)\n}\n\ntype areaCalculator struct {\n    area int\n}\n\nfunc (a *areaCalculator) visitForSquare(s *square) {\n    //Calculate area for square. After calculating the area assign in to the area instance variable\n    fmt.Println(\"Calculating area for square\")\n}\n\nfunc (a *areaCalculator) visitForCircle(s *circle) {\n    //Calculate are for circle. After calculating the area assign in to the area instance variable\n    fmt.Println(\"Calculating area for circle\")\n}\n\nfunc (a *areaCalculator) visitForrectangle(s *rectangle) {\n    //Calculate are for rectangle. After calculating the area assign in to the area instance variable\n    fmt.Println(\"Calculating area for rectangle\")\n}\n\ntype middleCoordinates struct {\n    x int\n    y int\n}\n\nfunc (a *middleCoordinates) visitForSquare(s *square) {\n    //Calculate middle point coordinates for square. After calculating the area assign in to the x and y instance variable.\n    fmt.Println(\"Calculating middle point coordinates for square\")\n}\n\nfunc (a *middleCoordinates) visitForCircle(c *circle) {\n    //Calculate middle point coordinates for square. After calculating the area assign in to the x and y instance variable.\n    fmt.Println(\"Calculating middle point coordinates for circle\")\n}\n\nfunc (a *middleCoordinates) visitForrectangle(t *rectangle) {\n    //Calculate middle point coordinates for square. After calculating the area assign in to the x and y instance variable.\n    fmt.Println(\"Calculating middle point coordinates for rectangle\")\n}\n\nfunc main() {\n    square := &square{side: 2}\n    circle := &circle{radius: 3}\n    rectangle := &rectangle{l: 2, b: 3}\n    areaCalculator := &areaCalculator{}\n    square.accept(areaCalculator)\n    circle.accept(areaCalculator)\n    rectangle.accept(areaCalculator)\n\n    fmt.Println()\n    middleCoordinates := &middleCoordinates{}\n    square.accept(middleCoordinates)\n    circle.accept(middleCoordinates)\n    rectangle.accept(middleCoordinates)\n}\n```", "```\nCalculating area for square\nCalculating area for circle\nCalculating area for rectangle\n\nCalculating middle point coordinates for square\nCalculating middle point coordinates for circle\nCalculating middle point coordinates for rectangle\n```"]