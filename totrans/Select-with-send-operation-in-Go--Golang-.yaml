- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:23:38'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:23:38
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Select with send operation in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go（Golang）中的发送操作选择
- en: 来源：[https://golangbyexample.com/select-send-operation-go/](https://golangbyexample.com/select-send-operation-go/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/select-send-operation-go/](https://golangbyexample.com/select-send-operation-go/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**[概述](#Overview "Overview")**'
- en: '[One send one receive operation](#One_send_one_receive_operation "One send
    one receive operation")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一次发送一次接收操作](#One_send_one_receive_operation "One send one receive operation")'
- en: '[All send operations ](#All_send_operations "All send operations ")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[所有发送操作](#All_send_operations "All send operations")'
- en: '[All receive operations](#All_receive_operations "All receive operations")*  *#
    **Overview**'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[所有接收操作](#All_receive_operations "All receive_operations")*  *# **概述**'
- en: Select allows both send and receive operations from a channel in its case statement.
    Let’s see examples of
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Select 允许在其 case 语句中同时进行发送和接收操作。让我们看看以下示例：
- en: One send one receive operation
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一次发送一次接收操作
- en: All send operations
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有发送操作
- en: All receive operations
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有接收操作
- en: '**One send one receive operation**'
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**一次发送一次接收操作**'
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above program we created two channels which are passed to two different
    goroutines. In the select statement, the first case statement is receiving from **ch1** channel.
    The second case statement is sending data to the **ch2** channel and that data
    is being received in the **goTwo** goroutine. Since it is not deterministic whether
    the receive operation on **ch1** will complete earlier or send operation on **ch2** will
    completely  earlier the program may either output this
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们创建了两个通道，并将其传递给两个不同的 goroutine。在 select 语句中，第一个 case 语句是从 **ch1** 通道接收数据。第二个
    case 语句是向 **ch2** 通道发送数据，而这些数据在 **goTwo** goroutine 中被接收。由于无法确定 **ch1** 的接收操作是否会先完成，或
    **ch2** 的发送操作是否会先完成，程序可能输出如下内容：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: or this
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 或者这个
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**All send operations **'
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**所有发送操作**'
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Output**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the above program, both case statements is sending data to the **ch1** and **ch2** channel
    respectively. The data from the ch1 channel is being received in goOne goroutine
    and the data from the ch2 channel is being received in goTwo goroutine. None of
    the send operation in each of the case statement is blocked.  So the program can
    either output this
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，两个 case 语句分别向 **ch1** 和 **ch2** 通道发送数据。来自 ch1 通道的数据在 goOne goroutine
    中被接收，而来自 ch2 通道的数据在 goTwo goroutine 中被接收。每个 case 语句中的发送操作都没有被阻塞。因此，程序可能输出如下内容：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: or this
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 或者这个
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**All receive operations**'
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**所有接收操作**'
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Output**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the above program we created two channels which are passed to two different
    goroutines. Then each of the  goroutine  is sending one value to the channel.
    In the select  we have two case statement. Each of the two case statement is waiting
    for a receive operation to complete on one of the channels. Once any receive operation
    is complete on any of the channel it is executed and **select** exits. So as seen
    from output, in the above program it  prints the received value from one of the
    channel and exits.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们创建了两个通道，并将其传递给两个不同的 goroutine。然后，每个 goroutine 向通道发送一个值。在 select 中，我们有两个
    case 语句。每个 case 语句都在等待一个通道上的接收操作完成。一旦任何通道上的接收操作完成，就会执行该操作并且 **select** 退出。因此，从输出中可以看出，在上述程序中，它打印了从一个通道接收到的值并退出。
- en: So in the above program since it is not deterministic which of the send operation
    will complete earlier that is why you will see different output if you run the
    program different times.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在上述程序中，由于无法确定哪个发送操作会先完成，所以如果你多次运行该程序，你将看到不同的输出。
- en: '[go](https://golangbyexample.com/tag/go/)*'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*'
