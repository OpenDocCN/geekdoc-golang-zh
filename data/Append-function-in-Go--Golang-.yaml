- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:18:46'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:18:46
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Append function in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go（Golang）中的append函数
- en: 来源：[https://golangbyexample.com/append-function-in-golang/](https://golangbyexample.com/append-function-in-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/append-function-in-golang/](https://golangbyexample.com/append-function-in-golang/)
- en: go **builtin** package provides an **append** function that can be used to append
    to a slice at the end. Below is the signature of this function
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Go **内置**包提供了一个**append**函数，可以用于在切片末尾追加。以下是此函数的签名。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first argument is the slice itself. The second is the variable number of
    arguments which is
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是切片本身。第二个是可变数量的参数。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**‘…’** operator is the variadic syntax. So basically **…Type** means that
    the append function can accept a variable number of arguments of type **Type**.
    Below is the way for using this function. In the below code, we are appending
    4 to a slice which has two elements. It appends at the end and returns the original
    slice. That is why we are collecting results again in **numbers** variable. It
    is also ok to assign the result to some other variable.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**‘…’**运算符是可变参数语法。因此，基本上**…Type**意味着append函数可以接受类型为**Type**的可变数量参数。以下是使用此函数的方法。在下面的代码中，我们将4附加到一个包含两个元素的切片中。它会在末尾追加并返回原始切片。这就是为什么我们再次在**numbers**变量中收集结果。将结果分配给其他变量也是可以的。'
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It is also ok to append many number of elements because the second argument
    is the variadic argument.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 追加多个元素也是可以的，因为第二个参数是可变参数。
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This function in background increases the length and capacity of the slice.
    There are two cases
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数在后台增加切片的长度和容量。总共有两种情况。
- en: When slice length is less than capacity
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当切片长度小于容量时
- en: In this case, on using the append function,  the length of the slice will be
    increased  by one without any change in its capacity. Let’s see a example
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，使用append函数时，切片的长度将增加1，而容量不变。让我们看一个例子。
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Output**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Capacity in all cases doesn’t changes and it is 5 while length increases by
    1.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，容量不变，仍为5，而长度增加1。
- en: When slice length is equal than capacity.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当切片长度等于容量时。
- en: In this case since there is no more capacity, so no new elements can be accommodated. 
    So in this case under the hood an array of double the capacity will be allocated.
    The current array pointed by the  slice will be copied to that new array. Now
    the slice will starting pointing to this new array. Hence the capacity will be
    doubled and length will be increased by 1\. Let’s see a example
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，由于没有更多的容量，因此无法容纳新元素。所以在这种情况下，底层会分配一个容量加倍的数组。当前由切片指向的数组将被复制到该新数组。现在切片将开始指向这个新数组。因此，容量将加倍，长度将增加1。让我们看一个例子
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Output**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice in the above example that the capacity is doubled.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上例中的容量被加倍。
- en: It is also possible to append one slice to another slice. Below is the format
    for that.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以将一个切片附加到另一个切片。以下是该格式。
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notice **‘…’** after the second slice. **‘…’** is the operator which means that
    the argument is a variadic parameter. Meaning that during run time slice2 will
    be expanded to its individual elements which are passed as multiple arguments
    to the append function.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意第二个切片后的**‘…’**。**‘…’**是运算符，表示参数是可变参数。意味着在运行时，slice2将扩展为其各个元素，并作为多个参数传递给append函数。
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Output**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**append function for string**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**字符串的append函数**'
- en: A string in go is nothing but a sequence of bytes. Hence it is legal to append
    a string to a slice of bytes. Below is the program for that. Notice the **‘…’**
    at then end of the string
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中，字符串只是一系列字节。因此，将字符串附加到字节切片是合法的。以下是相关程序。请注意字符串末尾的**‘…’**。
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Output**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
