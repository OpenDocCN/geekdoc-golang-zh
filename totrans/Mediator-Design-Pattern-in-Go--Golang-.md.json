["```\npackage main\n\ntype train interface {\n    requestArrival()\n    departure()\n    permitArrival()\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype passengerTrain struct {\n    mediator mediator\n}\n\nfunc (g *passengerTrain) requestArrival() {\n    if g.mediator.canLand(g) {\n        fmt.Println(\"PassengerTrain: Landing\")\n    } else {\n        fmt.Println(\"PassengerTrain: Waiting\")\n    }\n}\n\nfunc (g *passengerTrain) departure() {\n    fmt.Println(\"PassengerTrain: Leaving\")\n    g.mediator.notifyFree()\n}\n\nfunc (g *passengerTrain) permitArrival() {\n    fmt.Println(\"PassengerTrain: Arrival Permitted. Landing\")\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype goodsTrain struct {\n    mediator mediator\n}\n\nfunc (g *goodsTrain) requestArrival() {\n    if g.mediator.canLand(g) {\n        fmt.Println(\"GoodsTrain: Landing\")\n    } else {\n        fmt.Println(\"GoodsTrain: Waiting\")\n    }\n}\n\nfunc (g *goodsTrain) departure() {\n    g.mediator.notifyFree()\n    fmt.Println(\"GoodsTrain: Leaving\")\n}\n\nfunc (g *goodsTrain) permitArrival() {\n    fmt.Println(\"GoodsTrain: Arrival Permitted. Landing\")\n}\n```", "```\npackage main\n\ntype mediator interface {\n    canLand(train) bool\n    notifyFree()\n}\n```", "```\npackage main\n\nimport \"sync\"\n\ntype stationManager struct {\n    isPlatformFree bool\n    lock           *sync.Mutex\n    trainQueue     []train\n}\n\nfunc newStationManger() *stationManager {\n    return &stationManager{\n        isPlatformFree: true,\n        lock:           &sync.Mutex{},\n    }\n}\n\nfunc (s *stationManager) canLand(t train) bool {\n    s.lock.Lock()\n    defer s.lock.Unlock()\n    if s.isPlatformFree {\n        s.isPlatformFree = false\n        return true\n    }\n    s.trainQueue = append(s.trainQueue, t)\n    return false\n}\n\nfunc (s *stationManager) notifyFree() {\n    s.lock.Lock()\n    defer s.lock.Unlock()\n    if !s.isPlatformFree {\n        s.isPlatformFree = true\n    }\n    if len(s.trainQueue) > 0 {\n        firstTrainInQueue := s.trainQueue[0]\n        s.trainQueue = s.trainQueue[1:]\n        firstTrainInQueue.permitArrival()\n    }\n}\n```", "```\npackage main\n\nfunc main() {\n    stationManager := newStationManger()\n    passengerTrain := &passengerTrain{\n        mediator: stationManager,\n    }\n    goodsTrain := &goodsTrain{\n        mediator: stationManager,\n    }\n    passengerTrain.requestArrival()\n    goodsTrain.requestArrival()\n    passengerTrain.departure()\n}\n```", "```\nPassengerTrain: Landing\nGoodsTrain: Waiting\nPassengerTrain: Leaving\nGoodsTrain: Arrival Permitted. Landing\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"sync\"\n)\n\ntype train interface {\n    requestArrival()\n    departure()\n    permitArrival()\n}\n\ntype passengerTrain struct {\n    mediator mediator\n}\n\nfunc (g *passengerTrain) requestArrival() {\n    if g.mediator.canLand(g) {\n        fmt.Println(\"PassengerTrain: Landing\")\n    } else {\n        fmt.Println(\"PassengerTrain: Waiting\")\n    }\n}\n\nfunc (g *passengerTrain) departure() {\n    fmt.Println(\"PassengerTrain: Leaving\")\n    g.mediator.notifyFree()\n}\n\nfunc (g *passengerTrain) permitArrival() {\n    fmt.Println(\"PassengerTrain: Arrival Permitted. Landing\")\n}\n\ntype goodsTrain struct {\n    mediator mediator\n}\n\nfunc (g *goodsTrain) requestArrival() {\n    if g.mediator.canLand(g) {\n        fmt.Println(\"GoodsTrain: Landing\")\n    } else {\n        fmt.Println(\"GoodsTrain: Waiting\")\n    }\n}\n\nfunc (g *goodsTrain) departure() {\n    g.mediator.notifyFree()\n    fmt.Println(\"GoodsTrain: Leaving\")\n}\n\nfunc (g *goodsTrain) permitArrival() {\n    fmt.Println(\"GoodsTrain: Arrival Permitted. Landing\")\n}\n\ntype mediator interface {\n    canLand(train) bool\n    notifyFree()\n}\n\ntype stationManager struct {\n    isPlatformFree bool\n    lock           *sync.Mutex\n    trainQueue     []train\n}\n\nfunc newStationManger() *stationManager {\n    return &stationManager{\n        isPlatformFree: true,\n        lock:           &sync.Mutex{},\n    }\n}\n\nfunc (s *stationManager) canLand(t train) bool {\n    s.lock.Lock()\n    defer s.lock.Unlock()\n    if s.isPlatformFree {\n        s.isPlatformFree = false\n        return true\n    }\n    s.trainQueue = append(s.trainQueue, t)\n    return false\n}\n\nfunc (s *stationManager) notifyFree() {\n    s.lock.Lock()\n    defer s.lock.Unlock()\n    if !s.isPlatformFree {\n        s.isPlatformFree = true\n    }\n    if len(s.trainQueue) > 0 {\n        firstTrainInQueue := s.trainQueue[0]\n        s.trainQueue = s.trainQueue[1:]\n        firstTrainInQueue.permitArrival()\n    }\n}\n\nfunc main() {\n    stationManager := newStationManger()\n    passengerTrain := &passengerTrain{\n        mediator: stationManager,\n    }\n    goodsTrain := &goodsTrain{\n        mediator: stationManager,\n    }\n    passengerTrain.requestArrival()\n    goodsTrain.requestArrival()\n    passengerTrain.departure()\n}\n```", "```\nPassengerTrain: Landing\nGoodsTrain: Waiting\nPassengerTrain: Leaving\nGoodsTrain: Arrival Permitted. Landing\n```"]