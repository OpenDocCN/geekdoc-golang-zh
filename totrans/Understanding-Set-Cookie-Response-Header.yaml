- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:34:34'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Set-Cookie Response Header
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/set-cookie-response-header/](https://golangbyexample.com/set-cookie-response-header/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview of Set-Cookie Response Header](#Overview_of_Set-Cookie_Response_Header
    "Overview of Set-Cookie Response Header")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Examples](#Examples "Examples")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Program](#Program "Program")*  *# **Overview of Set-Cookie Response Header**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The web server can send the Set-Cookie header back to the client or browsers
    or any other user agent. The client is then supposed to store this cookie at its
    end. This client will send this cookie to the server on each request.
  prefs: []
  type: TYPE_NORMAL
- en: You can read about HTTP cookie in general here – [https://en.wikipedia.org/wiki/HTTP_cookie](https://en.wikipedia.org/wiki/HTTP_cookie)
  prefs: []
  type: TYPE_NORMAL
- en: Below is the syntax of the Set-Cookie header
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Below are the fields of the Set-Cookie header. These fields are joined by **‘;’**
    to create the final Set-Cookie header value
  prefs: []
  type: TYPE_NORMAL
- en: '**name=value** – This is the name-value pair that denotes the <cookie-name>
    and <cookie-value>. Name and Value separated by **‘=’**.  This is a mandatory
    field of a cookie. All other fields are optional fields'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Expires={some_date}** – It specifies the max lifetime of a cookie. It is
    in date format and the cookie will expire after that.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Max-Age={some_integer}** – it represents the number of seconds after which
    the cookie will expire. Max-Age has precedence if both Expires and Max-Date is
    specified'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Domain={some_domain}** – It specifies the domain to which the request will
    be sent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Path={some_path}** – The path to exist in the requested URI for the client
    to send the cookies. If the path does not match the requested URI, the client
    will not send the cookie. The higher level path matches the lower level path. 
    Hence / will match all paths. While /employee will match /employee, /employee/name,
    /employee/details'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secure** – This flag means that cookie will only be sent to the server if
    an HTTPS request is made'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HttpOnly** – With this flag on,  javascript will not be able to access the
    cookie. This is to prevent CSRF attacks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SameSite**=**Strict** or **Lax** or **None** – This option controls whether
    the cookies can be sent when the browser makes a cross-origin call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As mentioned above these fields can be combined using **‘;’** to create the
    final Set-Cookie header.  An important thing to note here is that the client will
    only send the name-value pair back to the server for subsequent calls to the server.
    All other options are for client only. Other important point to note is that server
    can also send multiple **Set-Cookie** header in the response. All the name-value
    pair in all the Set-Cookie response header will be send to the server in subsequent
    calls.
  prefs: []
  type: TYPE_NORMAL
- en: '**Examples**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some samples of Set-Cookie header
  prefs: []
  type: TYPE_NORMAL
- en: Only name-value pair
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: name-value pair with Expires field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: name-value pair with other fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Program**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s see the **Set-Cookie** header in action.  We will see the example in golang.
    For that first create a golang server listening on port 8080\. Create two APIs
  prefs: []
  type: TYPE_NORMAL
- en: '**localhost:8080/doc** – In this API the server will set the **Set-Cookie**
    header in the response. We are going to make this call from the browser. The browser
    is going to save this cookie at its end. The browser will then send the same cookie
    back to the server for any other request to localhost:8080'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**localhost:8080/doc/id** – This is the example API to demonstrate that browser
    actually sends the same cookie in request which in received in response in the
    Set-Cookie header'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s first create a server
  prefs: []
  type: TYPE_NORMAL
- en: '**go.mod**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**main.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See in the above code we have two APIs as discussed above. Run the above program
    using
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The server will start running  on port 8080
  prefs: []
  type: TYPE_NORMAL
- en: Now make the API call **localhost:8080/doc** from a browser. The server is sending
    below **Set-Cookie** in the response
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Same is also visible in the response headers of the API call. See screenshot
    below
  prefs: []
  type: TYPE_NORMAL
- en: '![cookie_set_request](img/5743ff6b7299452f20052240e39f56a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let’s make the other API call from a different tab.  Notice that same cookie
    is send back in the response. Also note that only name-value pair is send back
    as we mentioned above in the article
  prefs: []
  type: TYPE_NORMAL
- en: '![cookie_send_request](img/a3c457587ceebc81af0674c0439a1889.png)'
  prefs: []
  type: TYPE_IMG
- en: Checkout our Golang comprehensive tutorial Series – [Golang Comprehensive Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)*
  prefs: []
  type: TYPE_NORMAL
