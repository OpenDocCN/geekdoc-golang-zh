["```\n[2,6]\n[5,8]\n```", "```\n[2,6]\n[8,9]\n```", "```\nInput: [[1,4], [8,10], [9,12], [3,5]]\nOutput: [[1,5], [8,12]]\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\nfunc main() {\n\toutput := merge([][]int{{1, 4}, {8, 10}, {9, 12}, {3, 5}})\n\tfmt.Println(output)\n\n\toutput = merge([][]int{{1, 4}, {4, 5}})\n\tfmt.Println(output)\n\n\toutput = merge([][]int{{2, 2}, {2, 2}})\n\tfmt.Println(output)\n\n\toutput = merge([][]int{{2, 3}, {4, 5}, {6, 7}, {8, 9}, {1, 10}})\n\tfmt.Println(output)\n}\n\ntype intervalsArray [][]int\n\nfunc (intA intervalsArray) Len() int {\n\treturn len(intA)\n}\n\nfunc (intA intervalsArray) Swap(i, j int) {\n\tintA[i], intA[j] = intA[j], intA[i]\n}\n\nfunc (intA intervalsArray) Less(i, j int) bool {\n\treturn intA[i][0] < intA[j][0]\n}\n\nfunc merge(intervals [][]int) [][]int {\n\n\tintA := intervalsArray(intervals)\n\n\tsort.Sort(intA)\n\n\tintervalsSorted := [][]int(intA)\n\t//fmt.Println(intervalsSorted)\n\n\tvar output [][]int\n\tcurrentIntervalStart := intervalsSorted[0][0]\n\tcurrentIntervalEnd := intervalsSorted[0][1]\n\tfor j := 1; j < len(intervalsSorted); j++ {\n\t\tif currentIntervalEnd >= intervalsSorted[j][0] {\n\t\t\tif intervalsSorted[j][1] > currentIntervalEnd {\n\t\t\t\tcurrentIntervalEnd = intervalsSorted[j][1]\n\t\t\t}\n\t\t} else {\n\t\t\toutput = append(output, []int{currentIntervalStart, currentIntervalEnd})\n\t\t\tcurrentIntervalStart = intervalsSorted[j][0]\n\t\t\tcurrentIntervalEnd = intervalsSorted[j][1]\n\t\t}\n\t}\n\toutput = append(output, []int{currentIntervalStart, currentIntervalEnd})\n\treturn output\n\n}\n```", "```\n[[1 5] [8 12]]\n[[1 5]]\n[[2 2]]\n[[1 10]]\n```"]