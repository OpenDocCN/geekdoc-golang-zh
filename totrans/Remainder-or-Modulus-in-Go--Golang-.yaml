- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:15:22'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Remainder or Modulus in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/remainder-modulus-go-golang/](https://golangbyexample.com/remainder-modulus-go-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[% Operator](#_Operator "% Operator")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Code](#Code "Code")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Mod function for floats](#Mod_function_for_floats "Mod function for floats")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Code](#Code-2 "Code")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[IEEE 754 Remainder](#IEEE_754_Remainder "IEEE 754 Remainder")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Code](#Code-3 "Code")*  *# **Overview**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In this tutorial we will study about
  prefs: []
  type: TYPE_NORMAL
- en: '**% Operator** – applicable to get remainder for integers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mod function** – can be used to get remainder in case of floats also'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remainder function** – can be used to get IEEE 754 remainder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**% Operator**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Golang has a modulus operator **(‘ %’),** that can be used to get the remainder
    on dividing two integer numbers. Let’s see a working program illustrating this
  prefs: []
  type: TYPE_NORMAL
- en: '**Code**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Mod function for floats**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '% function doesn’t work for floats. For getting remainder when dividing two
    floats we can use the **Mod** function provided by the **math** package itself.
    Below is the signature of the function. It takes in two floats and returns a float.
    It will return floating point remainder of x/y. The output will take the sign
    on x'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Some special cases of **Mod** function are
  prefs: []
  type: TYPE_NORMAL
- en: Mod(±Inf, y) = NaN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mod(NaN, y) = NaN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mod(x, 0) = NaN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mod(x, ±Inf) = x
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mod(x, NaN) = NaN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**IEEE 754 Remainder**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**math** package of GO provides a **Remainder** method that can be used to
    get **IEEE 754 Remainder** of two numbers, one acting as a Numerator and the acting
    as a denominator.'
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about why do we need **IEEE 754 Remainder** here – [https://stackoverflow.com/questions/26671975/why-do-we-need-ieee-754-remainder](https://stackoverflow.com/questions/26671975/why-do-we-need-ieee-754-remainder)
  prefs: []
  type: TYPE_NORMAL
- en: Below is the signature of the function. It takes input two numbers as float64
    and returns a remainder which is also an **IEEE 754 float64 Remainder**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Some special cases of Remainder function are
  prefs: []
  type: TYPE_NORMAL
- en: Remainder(±Inf, y) = NaN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remainder(NaN, y) = NaN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remainder(x, 0) = NaN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remainder(x, ±Inf) = x
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remainder(x, NaN) = NaN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[go](https://golangbyexample.com/tag/go/)*   [math](https://golangbyexample.com/tag/math/)*   [mod](https://golangbyexample.com/tag/mod/)*   [modulus](https://golangbyexample.com/tag/modulus/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
