- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:50:42'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:50:42
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Detonate the maximum bombs program in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Go (Golang) 中引爆最大炸弹的程序
- en: 来源：[https://golangbyexample.com/detonate-maximum-bombs-golang/](https://golangbyexample.com/detonate-maximum-bombs-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/detonate-maximum-bombs-golang/](https://golangbyexample.com/detonate-maximum-bombs-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *# **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *# **概述**'
- en: A 2d array  is given where each entry in an  array has three values
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个二维数组，其中每个数组的条目有三个值
- en: i- Denotes the x coordinates of the bomb
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: i - 表示炸弹的 x 坐标
- en: j – Denotes the y  coordinates of the  bomb
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: j - 表示炸弹的 y 坐标
- en: r –  Denotes the radius of the range of the bomb
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: r - 表示炸弹范围的半径
- en: A bomb when exploded would cause an explosion of all the bombs within its range. 
    When those bombs are exploded they will in turn cause all the bombs in their range
    to be exploded.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个炸弹爆炸时会导致其范围内所有炸弹的爆炸。当这些炸弹被引爆时，它们又会导致其范围内所有炸弹的爆炸。
- en: You can only detonate one bomb. Idea is to find the maximum number of bombs 
    that  can be detonated
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你只能引爆一个炸弹。目标是找到可以引爆的最大炸弹数量
- en: '**Example 1**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 1**'
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first bomb lies in the range of the second bomb. So when we explode the 
    second bomb, both the second  and first bomb will  be exploded
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个炸弹位于第二个炸弹的范围内。因此，当我们引爆第二个炸弹时，第二个和第一个炸弹都会被引爆。
- en: '**Example 2**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 2**'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Both the bomb are outside the range of each other.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 两个炸弹彼此不在范围内。
- en: The idea to solve this problem is to view everything as a directed graph where
    a directed node from the first bomb to the second bomb exists if the second bomb
    lies within the range of the first bomb.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的思路是将一切视为有向图，如果第二个炸弹位于第一个炸弹的范围内，则从第一个炸弹到第二个炸弹存在一个有向节点。
- en: Once this graph is constructed, we can do DFS  from each node to get the maximum
    number of bombs it can explode. We will also store the results previously computed
    as well.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建了这个图，我们可以从每个节点进行深度优先搜索（DFS），以获取它可以引爆的最大炸弹数量。我们还会存储先前计算的结果。
- en: '**Program**'
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Below is the program for the same
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是相应的程序
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output:**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 查看我们的 Golang 高级教程。本系列的教程内容详尽，我们尽力涵盖所有概念并附上示例。本教程适合那些希望获得专业知识和对 Golang
    有扎实理解的人 – [Golang 高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you – [All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对了解所有设计模式在 Golang 中如何实现感兴趣。如果是的话，这篇文章适合你 – [所有设计模式 Golang](https://golangbyexample.com/all-design-patterns-golang/)
- en: Also, check out our system design tutorial series here – [System Design Tutorial
    Series](https://techbyexample.com/system-design-questions/)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请查看我们的系统设计教程系列 – [系统设计教程系列](https://techbyexample.com/system-design-questions/)
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
