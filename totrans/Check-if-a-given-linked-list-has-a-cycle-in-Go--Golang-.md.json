["```\nslow := slow.Next\nfast := fast.Next.Next\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfirst := initList()\n\tele4 := first.AddFront(4)\n\tfirst.AddFront(3)\n\tele2 := first.AddFront(2)\n\tfirst.AddFront(1)\n\n\t//Create cycle\n\tele4.Next = ele2\n\n\toutput := hasCycle(first.Head)\n\tfmt.Println(output)\n\n}\n\ntype ListNode struct {\n\tVal  int\n\tNext *ListNode\n}\n\ntype SingleList struct {\n\tLen  int\n\tHead *ListNode\n}\n\nfunc (s *SingleList) AddFront(num int) *ListNode {\n\tele := &ListNode{\n\t\tVal: num,\n\t}\n\tif s.Head == nil {\n\t\ts.Head = ele\n\t} else {\n\t\tele.Next = s.Head\n\t\ts.Head = ele\n\t}\n\ts.Len++\n\treturn ele\n}\n\nfunc initList() *SingleList {\n\treturn &SingleList{}\n}\nfunc hasCycle(head *ListNode) bool {\n\n\tif head == nil || head.Next == nil {\n\t\treturn false\n\t}\n\n\thasCycle := false\n\tslow := head\n\tfast := head\n\n\tfor slow != nil && fast != nil && fast.Next != nil {\n\t\tslow = slow.Next\n\t\tfast = fast.Next.Next\n\n\t\tif slow == fast {\n\t\t\thasCycle = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn hasCycle\n\n}\n```", "```\ntrue\n```"]