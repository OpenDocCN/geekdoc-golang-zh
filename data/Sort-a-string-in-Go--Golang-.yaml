- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '<!--yml '
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类 '
- en: 'date: 2024-10-13 06:43:56'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-10-13 06:43:56 '
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '--> '
- en: Sort a string in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '在Go中对字符串进行排序(Golang) '
- en: 来源：[https://golangbyexample.com/sort-string-golang/](https://golangbyexample.com/sort-string-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '来源：[https://golangbyexample.com/sort-string-golang/](https://golangbyexample.com/sort-string-golang/) '
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '目录 '
- en: '**   [Overview](#Overview "Overview")*  *## **Overview**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")*  *## **概述** '
- en: In Golang string is a sequence of bytes. A string literal actually represents
    a UTF-8 sequence of bytes. In UTF-8, ASCII characters are single-byte corresponding
    to the first 128 Unicode characters. All other characters are between 1 -4 bytes.
    To understand it more consider the below string
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '在Golang中，字符串是字节的序列。字符串字面量实际上表示一个UTF-8字节序列。在UTF-8中，ASCII字符是单字节，对应前128个Unicode字符。所有其他字符的字节数在1到4之间。要更好地理解，请考虑下面的字符串 '
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In above string
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '在上述字符串中 '
- en: ‘a’ takes one byte as per UTF-8
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '‘a’根据UTF-8编码占用一个字节 '
- en: ‘£’ takes two bytes as per UTF-8
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '‘£’根据UTF-8编码占用两个字节 '
- en: ‘b’ takes one byte as per UTF-8
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '‘b’根据UTF-8编码占用一个字节 '
- en: The above string has 1+2+1 = 4 bytes altogether. Therefore when we try to print
    the length of the string using the standard **len()** function it will output
    4 and not 3 as **len()** function returns the number of bytes in the string.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '上述字符串总共占用1+2+1 = 4个字节。因此，当我们使用标准的**len()**函数打印字符串长度时，它将输出4，而不是3，因为**len()**函数返回字符串中的字节数。 '
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Therefore to sort a string we need to convert it to a rune array and then sort
    that using the **sort.Sort** function of go.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '因此，为了对字符串进行排序，我们需要将其转换为rune数组，然后使用Go的**sort.Sort**函数对其进行排序。 '
- en: Below is the signature of **sort.Sort** function
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '以下是**sort.Sort**函数的签名 '
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: where this is the definition of **Interface**
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '这里是**接口**的定义 '
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So whatever we want to sort using the **sort.Sort** function then that needs
    to implement above three functions
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，无论我们想用**sort.Sort**函数排序什么，都需要实现上述三个函数。
- en: Len() int
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Len() int '
- en: Less(i, j int) bool
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Less(i, j int) bool '
- en: Swap(i, j int)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Swap(i, j int) '
- en: In the below program, we did the same
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '在下面的程序中，我们做了同样的事情 '
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Output**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出** '
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 请查看我们的Golang高级教程。本系列教程内容详尽，我们尽力涵盖所有概念并附上示例。本教程适合那些希望获得专业知识和扎实理解Golang的读者
    - [Golang高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/) '
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you -[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你有兴趣了解所有设计模式如何在Golang中实现。如果是的话，那么这篇文章适合你 - [所有设计模式Golang](https://golangbyexample.com/all-design-patterns-golang/) '
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)* '
