["```\nfunc After(d Duration) <-chan Time\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tch1 := make(chan string)\n\tgo goOne(ch1)\n\n\tselect {\n\tcase msg := <-ch1:\n\t\tfmt.Println(msg)\n\tcase <-time.After(time.Second * 1):\n\t\tfmt.Println(\"Timeout\")\n\t}\n}\n\nfunc goOne(ch chan string) {\n\ttime.Sleep(time.Second * 2)\n\tch <- \"From goOne goroutine\"\n}\n```", "```\nTimeout\n```", "```\nTimeout\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tnews := make(chan string)\n\tgo newsFeed(news)\n\n\tprintAllNews(news)\n}\n\nfunc printAllNews(news chan string) {\n\tfor {\n\t\tselect {\n\t\tcase n := <-news:\n\t\t\tfmt.Println(n)\n\t\tcase <-time.After(time.Second * 1):\n\t\t\tfmt.Println(\"Timeout: News feed finished\")\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc newsFeed(ch chan string) {\n\tfor i := 0; i < 2; i++ {\n\t\ttime.Sleep(time.Millisecond * 400)\n\t\tch <- fmt.Sprintf(\"News: %d\", i+1)\n\t}\n}\n```", "```\nNews: 1\nNews: 2\nTimeout: News feed finished\n```"]