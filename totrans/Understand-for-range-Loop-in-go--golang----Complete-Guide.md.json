["```\nfor index, value := range array/slice {\n    //Do something with index and value\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    letters := []string{\"a\", \"b\", \"c\"}\n\n    //With index and value\n    fmt.Println(\"Both Index and Value\")\n    for i, letter := range letters {\n        fmt.Printf(\"Index: %d Value:%s\\n\", i, letter)\n    }\n\n    //Only value\n    fmt.Println(\"\\nOnly value\")\n    for _, letter := range letters {\n        fmt.Printf(\"Value: %s\\n\", letter)\n    }\n\n    //Only index\n    fmt.Println(\"\\nOnly Index\")\n    for i := range letters {\n        fmt.Printf(\"Index: %d\\n\", i)\n    }\n\n    //Without index and value. Just print array values\n    fmt.Println(\"\\nWithout Index and Value\")\n    i := 0\n    for range letters {\n        fmt.Printf(\"Index: %d Value: %s\\n\", i, letters[i])\n        i++\n    }\n}\n```", "```\nBoth Index and Value\nIndex: 0 Value:a\nIndex: 1 Value:b\nIndex: 2 Value:c\n\nOnly value\nValue: a\nValue: b\nValue: c\n\nOnly Index\nIndex: 0\nIndex: 1\nIndex: 2\n\nWithout Index and Value\nIndex: 0 Value: a\nIndex: 1 Value: b\nIndex: 2 Value: c\n```", "```\nsample := \"a£c\"\n```", "```\nfmt.Printf(\"Length is %d\\n\", len(sample))\n```", "```\n for i := 0; i < len(sample); i++ {\n    fmt.Printf(\"%c\\n\", sample[i])\n }\n```", "```\naÂ£b\n```", "```\nfor index, character := range string {\n    //Do something with index and character\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := \"a£b\"\n\n    //With index and value\n    fmt.Println(\"Both Index and Value\")\n    for i, letter := range sample {\n        fmt.Printf(\"Start Index: %d Value:%s\\n\", i, string(letter))\n    }\n\n    //Only value\n    fmt.Println(\"\\nOnly value\")\n    for _, letter := range sample {\n        fmt.Printf(\"Value:%s\\n\", string(letter))\n    }\n\n    //Only index\n    fmt.Println(\"\\nOnly Index\")\n    for i := range sample {\n        fmt.Printf(\"Start Index: %d\\n\", i)\n    }\n}\n```", "```\nBoth Index and Value\nStart Index: 0 Value:a\nStart Index: 1 Value:£\nStart Index: 3 Value:b\n\nOnly value\nValue:a\nValue:£\nValue:b\n\nOnly Index\nStart Index: 0\nStart Index: 1\nStart Index: 3\n```", "```\nfor key, value := range map {\n    //Do something with key and value\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := map[string]string{\n        \"a\": \"x\",\n        \"b\": \"y\",\n    }\n\n    //Iterating over all keys and values\n    fmt.Println(\"Both Key and Value\")\n    for k, v := range sample {\n        fmt.Printf(\"key :%s value: %s\\n\", k, v)\n    }\n\n    //Iterating over only keys\n    fmt.Println(\"\\nOnly keys\")\n    for k := range sample {\n        fmt.Printf(\"key :%s\\n\", k)\n    }\n\n    //Iterating over only values\n    fmt.Println(\"\\nOnly values\")\n    for _, v := range sample {\n        fmt.Printf(\"value :%s\\n\", v)\n    }\n}\n```", "```\nBoth Key and Value\nkey :a value: x\nkey :b value: y\n\nOnly keys\nkey :a\nkey :b\n\nOnly values\nvalue :x\nvalue :y\n```", "```\nfor value := range channel {\n    //Do something value\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    ch := make(chan string)\n    go pushToChannel(ch)\n    for val := range ch {\n        fmt.Println(val)\n    }\n}\nfunc pushToChannel(ch chan<- string) {\n    ch <- \"a\"\n    ch <- \"b\"\n    ch <- \"c\"\n    close(ch)\n}\n```", "```\na\nb\nc\n```"]