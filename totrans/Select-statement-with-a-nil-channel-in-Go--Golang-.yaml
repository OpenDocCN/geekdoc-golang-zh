- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:23:43'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Select statement with a nil channel in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/select-with-nil-channel-golang/](https://golangbyexample.com/select-with-nil-channel-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Code](#Code "Code")*  *# **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send or receive operation on nil channel blocks forever. Hence a use case of
    having a nil channel in the select statement is to disable that case statement
    after the the send or receive operation is completed on that case statement. The
    channel then can simply be set to nil. That case statement will be  ignored when
    the select statement is executed again and receive or send operation will be e
    waited on another case statement. So it is meant to ignore that case statement
    and execute the other case statement
  prefs: []
  type: TYPE_NORMAL
- en: '**Code**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the above program, we have created a channel named **news**  which will hold
    data of string type. Then we pass this channel to the **newsfeed** function which
    is pushing the news feed to this channel . In the select statement, we are receiving
    the news feed from the **news** channel. This select statement is inside an infinite
    for loop  so the select statement will be executed multiple times until we  exit
    out of for loop . We also have **time.After** with a duration for 1 second as
    one of the case statements. So this set up will receive all the news from the
    **news** channel for  1  second and then exit.
  prefs: []
  type: TYPE_NORMAL
- en: After we receive the first news, we disabled the case statement by setting the
    news channel to nil.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Hence we only received the first news and after that, it times out.  This is
    the use case of nil channel in the select statement. If we remove the below line
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: then we will receive all the news in the ouput i.e, output will be
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[go](https://golangbyexample.com/tag/go/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
