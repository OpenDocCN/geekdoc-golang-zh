["```\npackage main\n\nimport \"fmt\"\n\ntype walletFacade struct {\n    account      *account\n    wallet       *wallet\n    securityCode *securityCode\n    notification *notification\n    ledger       *ledger\n}\n\nfunc newWalletFacade(accountID string, code int) *walletFacade {\n    fmt.Println(\"Starting create account\")\n    walletFacacde := &walletFacade{\n        account:      newAccount(accountID),\n        securityCode: newSecurityCode(code),\n        wallet:       newWallet(),\n        notification: &notification{},\n        ledger:       &ledger{},\n    }\n    fmt.Println(\"Account created\")\n    return walletFacacde\n}\n\nfunc (w *walletFacade) addMoneyToWallet(accountID string, securityCode int, amount int) error {\n    fmt.Println(\"Starting add money to wallet\")\n    err := w.account.checkAccount(accountID)\n    if err != nil {\n        return err\n    }\n    err = w.securityCode.checkCode(securityCode)\n    if err != nil {\n        return err\n    }\n    w.wallet.creditBalance(amount)\n    w.notification.sendWalletCreditNotification()\n    w.ledger.makeEntry(accountID, \"credit\", amount)\n    return nil\n}\n\nfunc (w *walletFacade) deductMoneyFromWallet(accountID string, securityCode int, amount int) error {\n    fmt.Println(\"Starting debit money from wallet\")\n    err := w.account.checkAccount(accountID)\n    if err != nil {\n        return err\n    }\n    err = w.securityCode.checkCode(securityCode)\n    if err != nil {\n        return err\n    }\n    err = w.wallet.debitBalance(amount)\n    if err != nil {\n        return err\n    }\n    w.notification.sendWalletDebitNotification()\n    w.ledger.makeEntry(accountID, \"credit\", amount)\n    return nil\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype account struct {\n    name string\n}\n\nfunc newAccount(accountName string) *account {\n    return &account{\n        name: accountName,\n    }\n}\n\nfunc (a *account) checkAccount(accountName string) error {\n    if a.name != accountName {\n        return fmt.Errorf(\"Account Name is incorrect\")\n    }\n    fmt.Println(\"Account Verified\")\n    return nil\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype securityCode struct {\n    code int\n}\n\nfunc newSecurityCode(code int) *securityCode {\n    return &securityCode{\n        code: code,\n    }\n}\n\nfunc (s *securityCode) checkCode(incomingCode int) error {\n    if s.code != incomingCode {\n        return fmt.Errorf(\"Security Code is incorrect\")\n    }\n    fmt.Println(\"SecurityCode Verified\")\n    return nil\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype wallet struct {\n    balance int\n}\n\nfunc newWallet() *wallet {\n    return &wallet{\n        balance: 0,\n    }\n}\n\nfunc (w *wallet) creditBalance(amount int) {\n    w.balance += amount\n    fmt.Println(\"Wallet balance added successfully\")\n    return\n}\n\nfunc (w *wallet) debitBalance(amount int) error {\n    if w.balance < amount {\n        return fmt.Errorf(\"Balance is not sufficient\")\n    }\n    fmt.Println(\"Wallet balance is Sufficient\")\n    w.balance = w.balance - amount\n    return nil\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype ledger struct {\n}\n\nfunc (s *ledger) makeEntry(accountID, txnType string, amount int) {\n    fmt.Printf(\"Make ledger entry for accountId %s with txnType %s for amount %d\", accountID, txnType, amount)\n    return\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype notification struct {\n}\n\nfunc (n *notification) sendWalletCreditNotification() {\n    fmt.Println(\"Sending wallet credit notification\")\n}\n\nfunc (n *notification) sendWalletDebitNotification() {\n    fmt.Println(\"Sending wallet debit notification\")\n}\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n)\n\nfunc main() {\n    fmt.Println()\n    walletFacade := newWalletFacade(\"abc\", 1234)\n    fmt.Println()\n    err := walletFacade.addMoneyToWallet(\"abc\", 1234, 10)\n    if err != nil {\n        log.Fatalf(\"Error: %s\\n\", err.Error())\n    }\n    fmt.Println()\n    err = walletFacade.deductMoneyFromWallet(\"ab\", 1234, 5)\n    if err != nil {\n        log.Fatalf(\"Error: %s\\n\", err.Error())\n    }\n}\n```", "```\nStarting create account\nAccount created\n\nStarting add money to wallet\nAccount Verified\nSecurityCode Verified\nWallet balance added successfully\nSending wallet credit notification\nMake ledger entry for accountId abc with txnType credit for amount 10\n\nStarting debit money from wallet\nAccount Verified\nSecurityCode Verified\nWallet balance is Sufficient\nSending wallet debit notification\nMake ledger entry for accountId abc with txnType debit for amount 5 \n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n)\n\ntype walletFacade struct {\n    account      *account\n    wallet       *wallet\n    securityCode *securityCode\n    notification *notification\n    ledger       *ledger\n}\n\nfunc newWalletFacade(accountID string, code int) *walletFacade {\n    fmt.Println(\"Starting create account\")\n    walletFacacde := &walletFacade{\n        account:      newAccount(accountID),\n        securityCode: newSecurityCode(code),\n        wallet:       newWallet(),\n        notification: &notification{},\n        ledger:       &ledger{},\n    }\n    fmt.Println(\"Account created\")\n    return walletFacacde\n}\n\nfunc (w *walletFacade) addMoneyToWallet(accountID string, securityCode int, amount int) error {\n    fmt.Println(\"Starting add money to wallet\")\n    err := w.account.checkAccount(accountID)\n    if err != nil {\n        return err\n    }\n    err = w.securityCode.checkCode(securityCode)\n    if err != nil {\n        return err\n    }\n    w.wallet.creditBalance(amount)\n    w.notification.sendWalletCreditNotification()\n    w.ledger.makeEntry(accountID, \"credit\", amount)\n    return nil\n}\n\nfunc (w *walletFacade) deductMoneyFromWallet(accountID string, securityCode int, amount int) error {\n    fmt.Println(\"Starting debit money from wallet\")\n    err := w.account.checkAccount(accountID)\n    if err != nil {\n        return err\n    }\n    err = w.securityCode.checkCode(securityCode)\n    if err != nil {\n        return err\n    }\n    err = w.wallet.debitBalance(amount)\n    if err != nil {\n        return err\n    }\n    w.notification.sendWalletDebitNotification()\n    w.ledger.makeEntry(accountID, \"credit\", amount)\n    return nil\n}\n\ntype account struct {\n    name string\n}\n\nfunc newAccount(accountName string) *account {\n    return &account{\n        name: accountName,\n    }\n}\n\nfunc (a *account) checkAccount(accountName string) error {\n    if a.name != accountName {\n        return fmt.Errorf(\"Account Name is incorrect\")\n    }\n    fmt.Println(\"Account Verified\")\n    return nil\n}\n\ntype securityCode struct {\n    code int\n}\n\nfunc newSecurityCode(code int) *securityCode {\n    return &securityCode{\n        code: code,\n    }\n}\n\nfunc (s *securityCode) checkCode(incomingCode int) error {\n    if s.code != incomingCode {\n        return fmt.Errorf(\"Security Code is incorrect\")\n    }\n    fmt.Println(\"SecurityCode Verified\")\n    return nil\n}\n\ntype wallet struct {\n    balance int\n}\n\nfunc newWallet() *wallet {\n    return &wallet{\n        balance: 0,\n    }\n}\n\nfunc (w *wallet) creditBalance(amount int) {\n    w.balance += amount\n    fmt.Println(\"Wallet balance added successfully\")\n    return\n}\n\nfunc (w *wallet) debitBalance(amount int) error {\n    if w.balance < amount {\n        return fmt.Errorf(\"Balance is not sufficient\")\n    }\n    fmt.Println(\"Wallet balance is Sufficient\")\n    w.balance = w.balance - amount\n    return nil\n}\n\ntype ledger struct {\n}\n\nfunc (s *ledger) makeEntry(accountID, txnType string, amount int) {\n    fmt.Printf(\"Make ledger entry for accountId %s with txnType %s for amount %d\\n\", accountID, txnType, amount)\n    return\n}\n\ntype notification struct {\n}\n\nfunc (n *notification) sendWalletCreditNotification() {\n    fmt.Println(\"Sending wallet credit notification\")\n}\n\nfunc (n *notification) sendWalletDebitNotification() {\n    fmt.Println(\"Sending wallet debit notification\")\n}\n\nfunc main() {\n    fmt.Println()\n    walletFacade := newWalletFacade(\"abc\", 1234)\n    fmt.Println()\n    err := walletFacade.addMoneyToWallet(\"abc\", 1234, 10)\n    if err != nil {\n        log.Fatalf(\"Error: %s\\n\", err.Error())\n    }\n    fmt.Println()\n    err = walletFacade.deductMoneyFromWallet(\"abc\", 1234, 5)\n    if err != nil {\n        log.Fatalf(\"Error: %s\\n\", err.Error())\n    }\n} \n```", "```\nStarting create account\nAccount created\n\nStarting add money to wallet\nAccount Verified\nSecurityCode Verified\nWallet balance added successfully\nSending wallet credit notification\nMake ledger entry for accountId abc with txnType credit for amount 10\n\nStarting debit money from wallet\nAccount Verified\nSecurityCode Verified\nWallet balance is Sufficient\nSending wallet debit notification\nMake ledger entry for accountId abc with txnType debit for amount 5 \n```"]