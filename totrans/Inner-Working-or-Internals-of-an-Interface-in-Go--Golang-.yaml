- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:22:47'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:22:47
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Inner Working or Internals of an Interface in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go（Golang）中接口的内部工作或内部机制
- en: 来源：[https://golangbyexample.com/inner-working-interface-golang/](https://golangbyexample.com/inner-working-interface-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/inner-working-interface-golang/](https://golangbyexample.com/inner-working-interface-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概览](#Overview "Overview")'
- en: '[Code](#Code "Code")*  *# **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[代码](#Code "Code")*  *# **概览**'
- en: Like any other variable, an interface variable is represented by a type and
    value. Interface value, in turn under the hood consists of two tuple
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 和其他变量一样，接口变量由类型和值表示。接口值在内部由两个元组组成
- en: Underlying Type
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底层类型
- en: Underlying Value
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底层值
- en: See below diagram which illustrates what we mentioned above
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见下图，说明我们上述提到的内容
- en: '![](img/e09464771d53171817cfeecf9da6a93e.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e09464771d53171817cfeecf9da6a93e.png)'
- en: Let’s see an example and then we can create a similar diagram as above for that
    example.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个例子，然后为该例子创建一个类似于上述的图表。
- en: Assume we have an interface **animal** as below
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个接口**动物**如下
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We also have a **lion** struct implementing this **animal** interface
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个实现了这个**动物**接口的**狮子**结构
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Code**'
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**代码**'
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For the above case,  lion struct implementing the animal interface would be
    like below
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上述案例，狮子结构实现动物接口如下所示
- en: '![](img/c9cc4eb8c2e7148fd7877e127d773ca6.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c9cc4eb8c2e7148fd7877e127d773ca6.png)'
- en: Golang provides format identifiers to print the underlying type and underlying
    value represented by the interface value.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Golang提供格式标识符来打印由接口值表示的底层类型和底层值。
- en: '%T can be used to print the concrete type of the interface value'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '%T可以用于打印接口值的具体类型'
- en: '%v can be used to print the concrete value of the interface value.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '%v可以用于打印接口值的具体值。'
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Output**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
