- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:18:12'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Switch Statement in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/switch-statement-golang/](https://golangbyexample.com/switch-statement-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is the  chapter 13 of the golang comprehensive tutorial series. Refer to
    this link for other chapters of the series – [Golang Comprehensive Tutorial Series](https://golangbyexample.com/golang-comprehensive-tutorial/)
  prefs: []
  type: TYPE_NORMAL
- en: '**Next Tutorial** – [Defer keyword](https://golangbyexample.com/defer-golang)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous Tutorial** – [If Else](https://golangbyexample.com/understand-if-else-statement-golang/)'
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s check out the current tutorial. Below is the table of contents for
    current tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: '**Overview**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Switch statement are a perfect way to prevent a if-else ladder. Here is the
    format for switch statement
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is how switch works. Give a **switch expression**, it goes through all
    cases and tries to find the first **case expression** that matches the **switch
    expression** otherwise the default case is executed if present. The order of matching
    is from top to bottom and then left to right (when the case contains multiple
    expressions as we will see later in this tutorial).
  prefs: []
  type: TYPE_NORMAL
- en: '**Important Points**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some important things to know about switch before we move to code examples
  prefs: []
  type: TYPE_NORMAL
- en: Both **switch statement** and **switch expression** are optional statement.
    So four possible scenario exist for them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both **switch statement** and **switch expression** are present
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Only **switch statement** is present. Notice the syntax below. Semicolon needs
    to be present after **switch statement**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Only **switch expression** is present. Notice the syntax below. No semicolon
    after **switch expression**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Both **switch statement** and **switch expression** are absent.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If the **switch expression** is not provided then the default type assumed by
    the compiler is **boolean**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The type of **switch expression** and all of **case expression*** should match
    other wise there will be a compiler error raised. When **switch expression** is
    not provided the type of all **case expression*** needs to be a boolean too.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**switch statement** can be any statement with a short declaration, function
    call or assignment. If **switch statement** has a variable declaration then the
    scope of that variable is limited to the switch block'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can have any number of case statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: default case is optional
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: case can have multiple expression separated by comma. Then case will look like
    as below
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: case block also allows **fallthrough** keyword which transfer control to the
    next case even though the current case might have matched
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: break statement that is needed in switch cases in many other languages is not
    needed in go. Go automatically provides a break statement at the end of each case
    block. However, it is also correct to explicitly use the **break** keyword which
    terminates execution out of switch statement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two cases cannot have the same constant value. There will be a compiler error
    raised in that case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: switch statement can also be used as a type switch, where it is used to know
    the type of an empty interface at run time as we will see in examples below
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Examples**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s see some simple example which illustrates the points above.
  prefs: []
  type: TYPE_NORMAL
- en: '**Both switch statement and switch expression**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Some points to note:'
  prefs: []
  type: TYPE_NORMAL
- en: In the above example, we have switch statement having a short declaration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then the switch case matches the switch expression which is “b” here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, there can be multiple expression in the case, as we see above that second
    case has two expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**ch** variable is only available within **switch** block. Uncomment the line
    **fmt.Println(ch)** which is present outside switch block and it will raise an
    error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Both switch statement and switch expression absent**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s see another example where we omit the **switch statement** as well as
    the **switch expression**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Couple of points to notice about above example:'
  prefs: []
  type: TYPE_NORMAL
- en: Since we omitted the switch expression, the default type of switch expression
    is boolean. Each of the case expressions also evaluates to boolean hence the program
    works fine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default case is executed in the above example as none of the case expression
    matched.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Only switch statement**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Notice the **';'** after the statement
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Only switch expression**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**Duplicate case**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Two case statement cannot have the same constant. For example in below case
    there will be a compiler error raised as  "a"  is present in two case
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Fallthrough keyword**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See below code for **fallthrough** keyword example. In below example even though
    the second case matched it went through the third case because of **fallthrough**
    keyword
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**fallthrough** needs to be final statement within the switch block. If it
    is not then compiler raise error'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Below program will raise the above error as we have **fmt.Println** after the
    **fallthrough** statement
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**Break statement**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is the **break** statement example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**break** statement will terminate the execution of the switch and below line
    below will never be executed'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**Type Switch**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Switch statement can also be used to know the type of an interface at run time
    as shown in below example. The type switch compare types instead of values
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '**Conclusion**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is all about switch statement in go. Hope you have liked the article. Please
    share feedback/improvements/mistakes in comments.
  prefs: []
  type: TYPE_NORMAL
- en: '**Next Tutorial** – [Defer keyword](https://golangbyexample.com/defer-golang)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous Tutorial** – [If Else](https://golangbyexample.com/understand-if-else-statement-golang/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*   [switch](https://golangbyexample.com/tag/switch/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
