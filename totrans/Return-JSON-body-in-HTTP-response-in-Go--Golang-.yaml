- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:39:02'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Return JSON body in HTTP response in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/json-response-body-http-go/](https://golangbyexample.com/json-response-body-http-go/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Example](#Example "Example")*  *## **Overvie**w'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Write** method of the ResponseWriter interface in **net/http** package can
    be used to set the JSON body in an HTTP response'
  prefs: []
  type: TYPE_NORMAL
- en: In GO a response is represented by the **ResponseWriter** Interface.  Here is
    the link to the interface –
  prefs: []
  type: TYPE_NORMAL
- en: '[https://golang.org/pkg/net/http/#ResponseWriter](https://golang.org/pkg/net/http/#ResponseWriter)'
  prefs: []
  type: TYPE_NORMAL
- en: ResponseWriter interface is used by an HTTP handler to construct an HTTP response.
    It provides three functions to set the response parameters
  prefs: []
  type: TYPE_NORMAL
- en: Header – For writing response header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write([]byte) – For writing response body
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WriteHeader(statusCode int) – For writing the http status code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Write** function can be used to set the response body. It takes a slice of
    bytes as input. Also, there is a **Header** function. This function can be used
    to set the content type of the response body using the Content-Type header. For
    eg in the case of the JSON response body, we need to set the Content-Type header
    as **“application/json”.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Also, note that **WriteHeader** function can be used to set the HTTP status
    code for the response
  prefs: []
  type: TYPE_NORMAL
- en: '**Example**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s see an example of sending http status code and JSON response body
  prefs: []
  type: TYPE_NORMAL
- en: Below is the program for the same
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the above program, this is how we create a JSON response. We use the **json.Marshal**
    function to convert the **map[string]string** into json bytes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: It then uses the **Write** function to return the JSON response body. The above
    code returns the below JSON response body back in response
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Also, we are using the **WriteHeader** function to specify the 201 http status
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Run the above program. It will start a server on 8080 port on your local machine.
    Now make the below curl call to the server
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Below will be the output
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the output, it will correctly return the **201** status
    code along with the JSON body.
  prefs: []
  type: TYPE_NORMAL
- en: Also, check out our Golang advance tutorial Series - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
