["```\nInput: [3, 2, -2]\nOutput: 1\n\nInput: [7, 8, 9, 11, 12]\nOutput: 1\n\nInput: [1, 2, 3]\nOutput: 4\n```", "```\ntotal_num_of_positive_int + 1\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\toutput := firstMissingPositive([]int{3, 2, -2})\n\tfmt.Println(output)\n\n\toutput = firstMissingPositive([]int{-3, -2, -1})\n\tfmt.Println(output)\n\n\toutput = firstMissingPositive([]int{7, 8, 9, 11, 12})\n\tfmt.Println(output)\n\n\toutput = firstMissingPositive([]int{1, 2, -1})\n\tfmt.Println(output)\n\n\toutput = firstMissingPositive([]int{1, 2, 3})\n\tfmt.Println(output)\n\n\toutput = firstMissingPositive([]int{1, 1})\n\tfmt.Println(output)\n}\n\nfunc firstMissingPositive(nums []int) int {\n\n\tonlyPositiveNumsArray, k := segregate((nums))\n\n\tfor i := 0; i < k; i++ {\n\t\tvalue := int(math.Abs(float64(onlyPositiveNumsArray[i])))\n\n\t\tif value > 0 && value <= k {\n\t\t\tif onlyPositiveNumsArray[value-1] > 0 {\n\t\t\t\tonlyPositiveNumsArray[value-1] = -1 * onlyPositiveNumsArray[value-1]\n\t\t\t}\n\n\t\t}\n\t}\n\n\tfor i := 0; i < k; i++ {\n\t\tif onlyPositiveNumsArray[i] > 0 {\n\t\t\treturn i + 1\n\t\t}\n\t}\n\n\treturn k + 1\n}\n\nfunc segregate(nums []int) ([]int, int) {\n\n\tk := 0\n\n\tfor i := 0; i < len(nums); i++ {\n\t\tif nums[i] > 0 {\n\t\t\tnums[k] = nums[i]\n\t\t\tk++\n\t\t}\n\t}\n\n\treturn nums[0:k], k\n\n}\n```", "```\n1\n1\n1\n3\n4\n2\n```"]