- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:37:45'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Printf function in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/printf-golang/](https://golangbyexample.com/printf-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![printf image](img/f431e47ca15664fa153f6a9b962dacbc.png)'
  prefs: []
  type: TYPE_IMG
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Program](#Program "Program")*  *## **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Printf** is defined in the **fmt** package and is used to format a string
    and write to standard output'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://golang.org/pkg/fmt/#Printf](https://golang.org/pkg/fmt/#Printf)'
  prefs: []
  type: TYPE_NORMAL
- en: Below is the function prototype of **Printf**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Printf** formats the string using custom specifiers. It also doesn’t add
    a new line. **Printf** is also a variadic function meaning that it can have multiple
    arguments. There are two important points about its argument list'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the first argument is a **format** or **template** string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next is a variable number of arguments. Each of the arguments in this list
    could be string, int, struct, or anything. That is why it is an empty interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **format** or **template** string contains the actual string that needs
    to be formatted plus some formating verbs. These formating verbs tell how the
    trailing arguments will be formatted in the final string.  So basically the format
    string argument contains certain symbols which are replaced by trailing arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Eg
  prefs: []
  type: TYPE_NORMAL
- en: '**Printing a string variable**'
  prefs: []
  type: TYPE_NORMAL
- en: '**%s** symbol is used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Printing an integer**'
  prefs: []
  type: TYPE_NORMAL
- en: '**%d** symbol is used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Printing a struct**'
  prefs: []
  type: TYPE_NORMAL
- en: For example, there are three format specifiers for printing a struct.
  prefs: []
  type: TYPE_NORMAL
- en: '**%v** – It will print only values. The field name will not be printed. This
    is the default way of printing a struct when using Println'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**%+v – **It will print both field and value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**%#v – **It will print the struct, also both field name and value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That is why
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: prints below respectively
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It is as per the explanation above.
  prefs: []
  type: TYPE_NORMAL
- en: Also, note that this function returns the number of characters printed and any
    error if happens. Unlike **Println** it does add a new line. You will have to
    add **“\n”** explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: Program
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is the working program for the same
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Notice that in below **Printf**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**%s** is replaced by name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**%d** is replaced by age.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So basically the symbols or verbs in the format string argument are replaced
    by trailing arguments in order
  prefs: []
  type: TYPE_NORMAL
- en: If the number of format specifiers in the format string does not match the number
    of next variable arguments then the format specifier will be printed as is. For
    example, in the below code, we have two format specifier
  prefs: []
  type: TYPE_NORMAL
- en: '%d'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '%s'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While the next variable number of arguments is only one. Hence when we print
    it then it will print the second format specifier as is with MISSING as a warning
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Also, check out our Golang advance tutorial Series – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)*
  prefs: []
  type: TYPE_NORMAL
