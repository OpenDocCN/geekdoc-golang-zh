- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:21:31'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Understanding := symbol or short variable declaration in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/short-variable-declaration-go/](https://golangbyexample.com/short-variable-declaration-go/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Go provides another way of declaring variables which is using the **:=** operator.
    When **:=** operator is used both **var** keyword and type info can be omitted.
    Below is the format for such declaration
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Type inference will happen based upon the type of value. Also please refer to
    this article for details on type inference. Let’s see a working example. In below
    code
  prefs: []
  type: TYPE_NORMAL
- en: Type of **m2** is correctly inferred as **int** as value assigned to it is 123
    which is **int**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, type of n2 is also correctly inferred as string as the value assigned
    to it is **“circle”** which is a **string** and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also notice that the type of variable **t2** is inferred correctly as a struct
    **main.sample**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type of **u2** is also correctly inferred as **[]string** as this is type returned
    by the **get()** function call.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Some points to be noted about the := operator
  prefs: []
  type: TYPE_NORMAL
- en: := operator is only available within a function. It is not allowed outside the
    function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A variable once declared using := cannot be redeclared using the := operator.
    So the below statement will raise a compiler error  “**no new variables in the
    left side of :=”.**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: := operator can also be used to declare multiple variables in a single line.
    See below example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the case of multiple declarations, := can also be used again for a particular
    variable if at least one of the variables on the left-hand side is new. See the
    below example. Notice that b is again declared using := This is only possible
    if at least one of the variables is new which is variable **c** here. In this
    case it acts as a assignment for variable **b**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
