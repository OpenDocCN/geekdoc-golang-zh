- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '类别: 未分类'
- en: 'date: 2024-10-13 06:50:25'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-10-13 06:50:25'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Find the number which appears once in an array in Go(Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Go(Golang) 中找到数组中只出现一次的数字
- en: 来源：[https://golangbyexample.com/number-array-once-golang/](https://golangbyexample.com/number-array-once-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/number-array-once-golang/](https://golangbyexample.com/number-array-once-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *# **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *# **概述**'
- en: An array is given in which every element is present twice except one element.
    The objective is to find that element in constant extra space
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个数组，其中每个元素出现两次，只有一个元素出现一次。目标是以常量额外空间找到该元素
- en: '**Example 1**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 1**'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Example 2**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 2**'
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The idea is to use XOR here. Here we will use two properties of XOR
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的思路是使用 XOR。我们将利用 XOR 的两个特性
- en: XOR of a number with itself is 0
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个数字与其自身进行 XOR 结果是 0
- en: XOR of 0 and any number is that number
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0 和任何数字的 XOR 结果是该数字
- en: So the idea is to do an XOR of all the numbers in the array. The number that
    we obtain at the end will be the answer.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这个思路是对数组中的所有数字进行 XOR。最终得到的数字就是答案。
- en: '**Program**'
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Below is the program for the same
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相应的程序
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output:**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 请查看我们的 Golang 高级教程。本系列教程内容详细，我们尽力涵盖所有概念及示例。这个教程适合那些希望获得专业知识和扎实理解 Golang
    的人 - [Golang 高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you - [All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对了解如何在 Golang 中实现所有设计模式感兴趣。那么这篇文章适合你 - [所有设计模式 Golang](https://golangbyexample.com/all-design-patterns-golang/)
- en: Also, check out our system design tutorial series here - [System Design Tutorial
    Series](https://techbyexample.com/system-design-questions/)*
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，请查看我们的系统设计教程系列 - [系统设计教程系列](https://techbyexample.com/system-design-questions/)*
