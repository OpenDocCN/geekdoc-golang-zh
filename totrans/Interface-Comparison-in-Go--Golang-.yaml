- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:22:11'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Interface Comparison in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/interface-comparison-golang/](https://golangbyexample.com/interface-comparison-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For understanding whether two interface variables are equal or not, we first
    need to understand the internal representation of an interface. Like any other
    variable, an interface variable is represented by a type and value. Interface
    variable value, in turn under the hood, consists of two tuple
  prefs: []
  type: TYPE_NORMAL
- en: Underlying Type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Underlying Value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See below diagram which illustrates what we mentioned above
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e09464771d53171817cfeecf9da6a93e.png)'
  prefs: []
  type: TYPE_IMG
- en: Two interface are comparable if either
  prefs: []
  type: TYPE_NORMAL
- en: Interface value is nil or
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The underlying type is the same and comparable. Underlying Value is also the
    same
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of the comparable types as defined by go specification are
  prefs: []
  type: TYPE_NORMAL
- en: boolean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: numeric
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: string,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: interface types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structs – if all it’s field type is comparable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: array – if the type of value of array element is comparable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of the types which are not comparable as per go specification
  prefs: []
  type: TYPE_NORMAL
- en: Slice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two interface variable can be compared using **==** or **!=** operators
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see a program
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the above program, we have animal interface and we have a lion struct that
    implements the animal interface by defining two of its methods.
  prefs: []
  type: TYPE_NORMAL
- en: Interface variable **a** and **b** are equal because
  prefs: []
  type: TYPE_NORMAL
- en: Underlying type is same i.e  **lion** struct
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Underlying type is comparable i.e **lion** struct has only one field of **int**
    type and **int** type is comparable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Underlying value is same i.e **lion.age** is 10 for both
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First two points also apply for comparing a and c, but they are not equal because
  prefs: []
  type: TYPE_NORMAL
- en: Underlying value is not same i.e **lion.age** is 10 for **a** while it is 5
    for **c**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interface variable d and e are equal because**'
  prefs: []
  type: TYPE_NORMAL
- en: '***   Interface value is nil for both'
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
