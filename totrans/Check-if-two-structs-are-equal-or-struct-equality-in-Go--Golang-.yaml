- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:19:39'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Check if two structs are equal or struct equality in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/struct-equality-golang/](https://golangbyexample.com/struct-equality-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first thing to know before considering struct equality is weather if all
    struct fields types are comparable or not
  prefs: []
  type: TYPE_NORMAL
- en: Some of the comparable types as defined by go specification are
  prefs: []
  type: TYPE_NORMAL
- en: boolean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: numeric
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: string,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pointer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: interface types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: structs – if all it’s field type is comparable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: array – if the type of value of array element is comparable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of the types which are not comparable as per go specification and which
    cannot be used as a key in a map are.
  prefs: []
  type: TYPE_NORMAL
- en: Slice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So two struct will be equal if first all their field types are comparable and
    all the corresponding field values are equal.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see an example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If the struct field type are not comparable then there will be compilation error
    on checking struct equality using the == operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Above program will raise compilation error as **employee** struct contains a
    field **deparments** which is a **slice** of **string**. **slice** is not a comparable
    type and hence the compilation error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
