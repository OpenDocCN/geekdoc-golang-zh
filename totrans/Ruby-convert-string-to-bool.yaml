- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:52:56'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Ruby convert string to bool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/string-bool-ruby/](https://golangbyexample.com/string-bool-ruby/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")*  *# **Overview**'
  prefs: []
  type: TYPE_NORMAL
- en: In the Ruby language, strings “true” and “false” are interpreted as true when
    used in the **if** condition. See example below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: “false” evaluates to true
  prefs: []
  type: TYPE_NORMAL
- en: Therefore it becomes important to handle string “false” or string “true” correctly.
  prefs: []
  type: TYPE_NORMAL
- en: We can create a custom method that can return boolean true or false based on
    the content of the string
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We can try out the above function
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Also, note that for strings other than “false” it will give true in return,
    but the function could be easily modified to handle that case*
  prefs: []
  type: TYPE_NORMAL
