- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:43:40'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Evaluation of Postfix Expression in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/evaluation-of-postfix-expression-golang/](https://golangbyexample.com/evaluation-of-postfix-expression-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Evaluation of Postfix Expression](#Evaluation_of_Postfix_Expression "Evaluation
    of Postfix Expression")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Implementation](#Implementation "Implementation")*  *## **Evaluation of Postfix
    Expression**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this tutorial, we will evaluate a postfix expression.
  prefs: []
  type: TYPE_NORMAL
- en: '**Algorithm:**'
  prefs: []
  type: TYPE_NORMAL
- en: Scan postfix expression from left to right.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the current scanned character is an operand, push it in the stack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the current scanned character is an operator, then pop two operands from
    the stack. Evaluate the operator on the two popped operands and push the result
    in the stack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When postfix expression is scanned completely, there should be only one value
    in the stack which is the result of postfix expression.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implementation**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is the implementation of Infix to Postfix Conversion’ in golang.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We can check the status of the stack after every push and pop operation by uncommenting
    **fmt.Println** line in Push and Pop function declaration.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  prefs: []
  type: TYPE_NORMAL
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you -[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
