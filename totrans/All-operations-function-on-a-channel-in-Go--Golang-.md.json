["```\nch <- data\n```", "```\ndata := <- ch \n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    ch := make(chan int)\n\n    fmt.Println(\"Sending value to channnel\")\n    go send(ch)\n\n    fmt.Println(\"Receiving from channnel\")\n    go receive(ch)\n\n    time.Sleep(time.Second * 1)\n}\n\nfunc send(ch chan int) {\n    ch <- 1\n}\n\nfunc receive(ch chan int) {\n    val := <-ch\n    fmt.Printf(\"Value Received=%d in receive function\\n\", val)\n}\n```", "```\nSending value to channel\nReceiving from channel\nValue Received=1 in receive function\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    ch := make(chan int)\n    go sum(ch, 3)\n    ch <- 2\n    ch <- 2\n    ch <- 2\n    close(ch)\n    time.Sleep(time.Second * 1)\n}\n\nfunc sum(ch chan int, len int) {\n    sum := 0\n    for i := 0; i < len; i++ {\n        sum += <-ch\n    }\n    fmt.Printf(\"Sum: %d\\n\", sum)\n}\n```", "```\nSum: 6\n```", "```\npackage main\n\nfunc main() {\n    ch := make(chan int)\n    close(ch)\n    ch <- 2\n}\n```", "```\npanic: send on closed channel\n```", "```\nval,ok <- ch\n```", "```\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    ch := make(chan int, 1)\n    ch <- 2\n    val, ok := <-ch\n    fmt.Printf(\"Val: %d OK: %t\\n\", val, ok)\n\n    close(ch)\n    val, ok = <-ch\n    fmt.Printf(\"Val: %d OK: %t\\n\", val, ok)\n}\n```", "```\nVal: 2 OK: true\nVal: 0 OK: false\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tch := make(chan int, 3)\n\tch <- 5\n\tfmt.Printf(\"Len: %d\\n\", len(ch))\n\n\tch <- 6\n\tfmt.Printf(\"Len: %d\\n\", len(ch))\n\tch <- 7\n\tfmt.Printf(\"Len: %d\\n\", len(ch))\n}\n```", "```\nLen: 1\nLen: 2\nLen: 3\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    ch := make(chan int, 3)\n    fmt.Printf(\"Capacity: %d\\n\", cap(ch))\n}\n```", "```\nCapacity: 3\n```", "```\nmake(chan int, 3)\n```"]