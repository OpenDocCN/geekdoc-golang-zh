- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:11:11'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Anonymous Function in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/go-anonymous-function/](https://golangbyexample.com/go-anonymous-function/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Code](#Code "Code")*  *# **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the name suggests anonymous functions are function which does not have any
    name.  In Golang function are first-class variables meaning that
  prefs: []
  type: TYPE_NORMAL
- en: They can be assigned to a variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passed around as function argument
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returned from a function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A function in Go is a first-class variable so it can be used as a value as well.
    When using a function as a value, it is not named and can be assigned to a variable.
    Such a function is called anonymous functions because the function is not named.
  prefs: []
  type: TYPE_NORMAL
- en: They are generally created for short term use or for limited functionality.
    See the below example.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, a function is assigned to the variable **max**. The function
    assigned to **max** does not have any name. The only way to call this function
    is using the **max** variable and that is what we are doing in this program as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: Also notice that we can pass arguments to the anonymous function as well as
    return values from them.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The anonymous function can also be executed as IIF or Immediately Invoked Function.
    In such a case, you don’t need to assign it to any variable. See below example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
