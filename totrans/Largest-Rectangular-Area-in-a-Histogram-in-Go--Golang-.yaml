- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:46:54'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Largest Rectangular Area in a Histogram in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/largest-rectangular-area-histogram-go/](https://golangbyexample.com/largest-rectangular-area-histogram-go/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Program](#Program "Program")*  *## **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a set of bars each of 1 unit width but different heights placed alongside.
    The height of the bars is represented using an array
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The array represents that
  prefs: []
  type: TYPE_NORMAL
- en: The total number of bars is 5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first bar is of height 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second bar is of height 0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third bar is of height 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fourth bar is of height 1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fifth bar is of height 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sixth bar is of height 1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The objective is to find the maximum rectangular area in the histogram. As seen
    from the diagram the maximum rectangular area is 4.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ccccd1ceb90e3a1ef0bbed77118cc2a.png)'
  prefs: []
  type: TYPE_IMG
- en: Below is the approach we can take to solve this question. We will use the stack
    and will find out the area at every index of the bar assuming that the bar is
    fully included in the largest rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: Push the first element of the given array to the stack. Traverse through the
    given array. For every bar, we need to find out the nearest smaller bar on the
    left side and the nearest smaller bar on the right side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the current element, check if the height of the top element is greater than
    the height of the current element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If yes then the current element is the nearest smaller bar on the right side.
    And the element in the stack after the top element is the nearest smaller bar
    on the left side.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pop this element and calculate the largest rectangular area assuming that the
    bar is included fully. Keep track of the maximum rectangular area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeat the above two steps till the stack is empty or the height of the top
    element is less than the current element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Push the current element to the stack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return the maximum rectangular area at the end.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Program**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is the program for the same.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  prefs: []
  type: TYPE_NORMAL
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you –[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
