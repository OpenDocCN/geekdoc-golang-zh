["```\nfunc Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error)\n```", "```\nname := \"John\"\nfmt.Fprintf(os.Stdout, \"Name is: %s\\n\", name)\n```", "```\nName is John\n```", "```\nage := 21\nfmt.Fprintf(os.Stdout, \"Age is: %d\\n\", age)\n```", "```\nfmt.Fprintf(os.Stdout, \"Employee is %v\\n\", e)\nfmt.Fprintf(os.Stdout, \"Employee is %+v\\n\", e)\nfmt.Fprintf(os.Stdout,\"Employee is %#v\\n\", e)\n```", "```\nEmployee is {John 21}\nEmployee is {Name:John Age:21}\nEmployee is main.employee{Name:\"John\", Age:21}\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n)\n\ntype employee struct {\n\tName string\n\tAge  int\n}\n\nfunc main() {\n\tname := \"John\"\n\tage := 21\n\n\tfmt.Fprintf(os.Stdout, \"Name is: %s\\n\", name)\n\tfmt.Fprintf(os.Stdout, \"Age is: %d\\n\", age)\n\n\tfmt.Fprintf(os.Stdout, \"Name: %s Age: %d\\n\", name, age)\n\n\te := employee{\n\t\tName: name,\n\t\tAge:  age,\n\t}\n\n\tfmt.Fprintf(os.Stdout, \"Employee is %v\\n\", e)\n\tfmt.Fprintf(os.Stdout, \"Employee is %+v\\n\", e)\n\tfmt.Fprintf(os.Stdout, \"Employee is %#v\\n\", e)\n\n\tbytesPrinted, err := fmt.Fprintf(os.Stdout, \"Name is: %s\\n\", name)\n\tif err != nil {\n\t\tlog.Fatalln(\"Error occured\", err)\n\t}\n\tfmt.Println(bytesPrinted)\n}\n```", "```\nName is: John\nAge is: 21\nName: John Age: 21\nEmployee is {John 21}\nEmployee is {Name:John Age:21}\nEmployee is main.employee{Name:\"John\", Age:21}\nName is: John\n14\n```", "```\nStdout = NewFile(uintptr(syscall.Stdout), \"/dev/stdout\")\n```", "```\nfmt.Fprintf(os.Stdout, \"Name: %s Age: %d\\n\", name, age)\n```", "```\npackage main\nimport (\n    \"fmt\"\n    \"log\"\n    \"os\"\n)\ntype employee struct {\n    Name string\n    Age  int\n}\nfunc main() {\n    name := \"John\"\n    age := 21\n    file, err := os.Create(\"./temp.txt\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Fprintf(file, \"Name is: %s\\n\", name)\n    fmt.Fprintf(file, \"Age is: %d\\n\", age)\n    fmt.Fprintf(file, \"Name: %s Age: %d\\n\", name, age)\n    e := employee{\n        Name: name,\n        Age:  age,\n    }\n    fmt.Fprintf(file, \"Employee is %v\\n\", e)\n    fmt.Fprintf(file, \"Employee is %+v\\n\", e)\n    fmt.Fprintf(file, \"Employee is %#v\\n\", e)\n}\n```", "```\nName is: John\nAge is: 21\nName: John Age: 21\nEmployee is {John 21}\nEmployee is {Name:John Age:21}\nEmployee is main.employee{Name:\"John\", Age:21}\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\ntype employee struct {\n\tName string\n\tAge  int\n}\n\nfunc main() {\n\tname := \"John\"\n\n\tfmt.Fprintf(os.Stdout, \"Name is: %s %d\\n\", name)\n}\n```", "```\nName is: John %!d(MISSING)\n```"]