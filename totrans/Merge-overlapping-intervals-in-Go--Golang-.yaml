- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-10-13 06:44:33'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-10-13 06:44:33'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Merge overlapping intervals in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Go中合并重叠区间（Golang）
- en: 来源：[https://golangbyexample.com/merge-overlapping-intervals-golang/](https://golangbyexample.com/merge-overlapping-intervals-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/merge-overlapping-intervals-golang/](https://golangbyexample.com/merge-overlapping-intervals-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *## **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *## **概述**'
- en: Given an array of intervals where each interval has a start time and end time,
    merge the overlapping intervals. Two intervals are said to be overlapping if the
    end time of the first interval is greater than the start time of the second interval.
    This is assuming that both the intervals are sorted on start time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个区间数组，每个区间都有开始时间和结束时间，合并重叠区间。如果第一个区间的结束时间大于第二个区间的开始时间，则这两个区间被称为重叠。假设两个区间都是按开始时间排序的。
- en: Example.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 示例。
- en: Let’s say we have below two intervals
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有下面两个区间
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then these intervals are overlapping as the end time of the first interval is
    greater than the start time of the second interval.  Also here the above intervals
    are sorted on start time.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后这些区间是重叠的，因为第一个区间的结束时间大于第二个区间的开始时间。同时，上述区间是按开始时间排序的。
- en: Similarly, below two intervals are not overlapping
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，下面两个区间不重叠
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: So the objective is to merge overlapping intervals in a given array of intervals
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因此目标是合并给定数组中的重叠区间
- en: Eg.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如。
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Program**'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Below will be the logic
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下将是逻辑
- en: Sort the interval array on the basis of the start time.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据开始时间对区间数组进行排序。
- en: Start from index 0 and merge overlapping intervals. As mentioned above two intervals
    are said to be overlapping if the end time of the first interval is greater than
    the start time of the second interval
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从索引0开始合并重叠区间。如上所述，如果第一个区间的结束时间大于第二个区间的开始时间，则这两个区间被称为重叠。
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Output**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 查看我们的Golang高级教程。本系列的教程内容详尽，我们尝试覆盖所有概念并附有例子。此教程适合那些希望获得专业知识和扎实理解Golang的人——[Golang高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you –[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解如何在Golang中实现所有设计模式。如果是的话，这篇文章适合你——[所有设计模式Golang](https://golangbyexample.com/all-design-patterns-golang/)
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
