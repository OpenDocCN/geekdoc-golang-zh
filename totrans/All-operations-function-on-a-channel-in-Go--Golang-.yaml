- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类。
- en: 'date: 2024-10-13 06:24:41'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:24:41。
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: All operations/function on a channel in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go（Golang）中通道的所有操作/函数。
- en: 来源：[https://golangbyexample.com/all-operations-channel-golang/](https://golangbyexample.com/all-operations-channel-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/all-operations-channel-golang/](https://golangbyexample.com/all-operations-channel-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "概述")'
- en: '[Send Operation](#Send_Operation "Send Operation")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[发送操作](#Send_Operation "发送操作")'
- en: '[Receive Operation](#Receive_Operation "Receive Operation")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[接收操作](#Receive_Operation "接收操作")'
- en: '[Close operation on a channel](#Close_operation_on_a_channel "Close operation
    on a channel")'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通道的关闭操作](#Close_operation_on_a_channel "通道的关闭操作")'
- en: '[Length of a channel using len() function](#Length_of_a_channel_using_len_function
    "Length of a channel using len() function")'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 len() 函数的通道长度](#Length_of_a_channel_using_len_function "使用 len() 函数的通道长度")'
- en: '[Capacity of a channel using cap() function](#Capacity_of_a_channel_using_cap_function
    "Capacity of a channel using cap() function")*  *# **Overview**'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 cap() 函数的通道容量](#Capacity_of_a_channel_using_cap_function "使用 cap() 函数的通道容量")*  *#
    **概述**'
- en: Below operations/functions are applicable for channel in golang
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的操作/函数适用于 Golang 中的通道。
- en: Send the data to the channel
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据发送到通道。
- en: Receive the data from the  channel
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从通道接收数据。
- en: Close a channel
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭通道。
- en: Length of a channel using len() function
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 len() 函数的通道长度。
- en: Capacity of a channel using cap()  function
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 cap() 函数的通道容量。
- en: Let’s look at each operation/functions on a channel one by one
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一看一下通道上的每个操作/函数。
- en: '**Send Operation**'
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**发送操作**'
- en: The send operation used to send data to the channel. Below is the format for
    sending to a channel
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 发送操作用于将数据发送到通道。以下是发送到通道的格式。
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: where
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在哪里
- en: ch is the channel variable
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ch 是通道变量。
- en: data is what is being sent to the channel
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据是发送到通道的内容。
- en: Note that type of data and type of channel should match.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，数据类型和通道类型应匹配。
- en: Send operation can block for a buffered or unbuffered channel in the following
    way
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 发送操作对于缓冲或无缓冲通道可以以下列方式阻塞。
- en: '**Buffered Channel-** Send on a buffer channel only blocks if the buffer is
    full'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓冲通道 -** 仅在缓冲区满时，发送到缓冲通道才会阻塞。'
- en: '**Unbuffered Channel**- Send on a channel is block unless there is another
    goroutine to receive.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无缓冲通道** - 发送到通道将阻塞，除非有另一个 goroutine 来接收。'
- en: Let's look at the program for send operation after we have understood the receive
    operation as well
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们理解接收操作后，让我们看看发送操作的程序。
- en: '**Receive Operation**'
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**接收操作**'
- en: The receive operation used to read data from the channel Below is the format
    for receiving from a channel
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接收操作用于从通道读取数据。以下是从通道接收的格式。
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: where
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在哪里
- en: ch is the channel variable
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ch 是通道变量。
- en: data is a variable on which the read data from the channel will be stored.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: data 是一个变量，用于存储从通道读取的数据。
- en: Let's see an example of where we will send data from one goroutine and receive
    that data in another goroutine.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个示例，其中我们将从一个 goroutine 发送数据，并在另一个 goroutine 中接收这些数据。
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the above program, we created a channel that can only transport data of type
    int. Function **send()** and **receive()** are started as a goroutine. We are
    sending data to the channel in send() goroutine and receiving data in the receive()
    goroutine.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，我们创建了一个只能传输 int 类型数据的通道。函数 **send()** 和 **receive()** 作为 goroutine 启动。我们在
    send() goroutine 中向通道发送数据，并在 receive() goroutine 中接收数据。
- en: Receive operation can block for a buffered or unbuffered channel in the following
    way
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接收操作对于缓冲或无缓冲通道可以以下列方式阻塞。
- en: '**Buffered Channel -** Receiving is only blocked is channel is empty'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓冲通道 -** 仅在通道为空时接收才会阻塞。'
- en: '**Unbuffered Channel -** Receiving is blocked until there is another goroutine
    on the other side to send.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无缓冲通道 -** 接收会阻塞，直到另一侧有另一个 goroutine 发送。'
- en: '**Close operation on a channel**'
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**通道的关闭操作**'
- en: Close is an inbuilt function that can be used to close a channel. Closing of
    a channel means that no more data can we send to the channel.  Channel is generally
    closed when all the data has been sent and there's no more data to be send. Let's
    see a program
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Close 是一个内置函数，可用于关闭通道。关闭通道意味着不能再向通道发送数据。当所有数据发送完毕且没有更多数据可发送时，通道通常会关闭。让我们看看一个程序。
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Output**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the above program, we created a channel.  Then we called the **sum** function
    in a goroutine. In the main function, we send 3 values to the channel and after
    that, we closed the channel indicating that no more values can be sent to the
    channel. The **sum** function iterates over the channel using the for loop and
    calculates the sum value.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，我们创建了一个通道。然后我们在一个 goroutine 中调用了**sum**函数。在主函数中，我们向通道发送了3个值，之后关闭了通道，表示不能再向通道发送更多的值。**sum**函数使用for循环迭代通道并计算总和。
- en: Sending on a close channel will cause a panic.  See the program below
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在关闭的通道上发送将导致恐慌。请参见下面的程序。
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Output**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Also closing a already closed channel will cause a panic
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭一个已关闭的通道将导致恐慌
- en: While receiving from a  channel we can also use an additional variable  to determine
    if the channel  has been closed.  Below is the syntax for the same
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在从通道接收时，我们还可以使用一个额外的变量来确定通道是否已关闭。以下是相应的语法。
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The value of ok will be
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: ok的值将是
- en: True if the channel is not closed
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果通道未关闭则为真
- en: False every channel is closed
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个通道都已关闭为假
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Output**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the above program created a channel of capacity one.  Then we send one value
    to the channel.  The **ok** variable in the first receive is true since the channel
    is not closed. The ok variable in the second  receive is  false because the channel
    is closed
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中创建了一个容量为1的通道。然后我们向通道发送了一个值。在第一次接收中，**ok**变量为true，因为通道未关闭。在第二次接收中，ok变量为false，因为通道已关闭。
- en: '**Length of a channel using len() function**'
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**使用len()函数获取通道的长度**'
- en: Builtin **len()** function can be used to get the length of a channel. The length
    of a channel is the number of elements that are already there in the channel.
    So length actually represents the number of elements queued in the buffer of the
    channel. Length of a channel is always less than or equal to the capacity of the
    channel.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的**len()**函数可用于获取通道的长度。通道的长度是通道中已有元素的数量。因此，长度实际上表示通道缓冲区中排队的元素数量。通道的长度始终小于或等于通道的容量。
- en: Length of unbuffered channel is always zero
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 无缓冲通道的长度始终为零
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Output**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the above code, the first created a channel of capacity 3.  After that, we
    keep sending some value to the channel. As you can notice from your output that
    after each send operation to the length of channel increases by one as the length
    denotes the number of item in the buffer of channel.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，首先创建了一个容量为3的通道。之后，我们持续向通道发送一些值。从你的输出中可以注意到，在每次发送操作后，通道的长度增加了1，因为长度表示通道缓冲区中的项目数量。
- en: '**Capacity of a channel using cap() function**'
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**使用cap()函数获取通道的容量**'
- en: The capacity of a buffered channel is the number of elements that channel can
    hold. Capacity refers to the size of the buffer of the channel. The capacity of
    the channel can be specified during the creation of the channel while using the
    make function. The second argument is the capacity
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲通道的容量是通道可以容纳的元素数量。容量指的是通道缓冲区的大小。通道的容量可以在创建通道时通过使用make函数指定。第二个参数是容量。
- en: The capacity of an unbuffered channel is always zero
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 无缓冲通道的容量始终为零
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Output**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the above program we specified the capacity as 3 in the make function
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，我们在make函数中指定了容量为3。
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Let's see summary table which shows the result of each operation on the different
    types of channel
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下总结表，展示了对不同类型通道的每个操作结果
- en: '| **Command** | **Unbuffered Channel****(Not Closed and not nil)** | **Buffered
    Channel****(Not Closed and not nil)** | **Closed Channel** | **Nil Channel** |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **无缓冲通道**（未关闭且不为nil） | **缓冲通道**（未关闭且不为nil） | **已关闭通道** | **空通道**
    |'
- en: '| Send | Block if there is is no corresponding receiver otherwise success |
    Block if the channel is full otherwise success | Panic | Block forever |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 发送 | 如果没有相应的接收者则阻塞，否则成功 | 如果通道已满则阻塞，否则成功 | 恐慌 | 永久阻塞 |'
- en: '| Receive | Block if there is no corresponding sender otherwise success | Block
    if the channel is empty otherwise success | Receives the default value of data
    type from the channel if channel is empty else  receives the actual value | Block
    forever |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 接收 | 如果没有相应的发送者则阻塞，否则成功 | 如果通道为空则阻塞，否则成功 | 如果通道为空则接收数据类型的默认值，否则接收实际值 | 永久阻塞
    |'
- en: '| Close | Success | Success | Panic | Panic |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 关闭 | 成功 | 成功 | 恐慌 | 恐慌 |'
- en: '| Length | 0 | Number of elements queued in the buffer of the channel | -0
    if unbuffered channel-Number of elements queued in the buffer if buffered channel
    | 0 |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 长度 | 0 | 在通道缓冲区中排队的元素数量 | - 如果是无缓冲通道则为0 - 如果是有缓冲通道则为缓冲区中的排队元素数量 | 0 |'
- en: '| Capacity | 0 | Size of the buffer of the channel | -0 if unbuffered channel-Size
    of the buffer if buffered channel | 0 |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 容量 | 0 | 通道缓冲区的大小 | - 如果是无缓冲通道则为0 - 如果是有缓冲通道则为缓冲区大小 | 0 |'
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
