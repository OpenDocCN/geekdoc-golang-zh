["```\ntype taxCalculator interface{\n    calculateTax()\n}\n```", "```\npackage main\nimport \"fmt\"\ntype taxSystem interface {\n    calculateTax() int\n}\ntype indianTax struct {\n    taxPercentage int\n    income        int\n}\nfunc (i *indianTax) calculateTax() int {\n    tax := i.income * i.taxPercentage / 100\n    return tax\n}\ntype singaporeTax struct {\n    taxPercentage int\n    income        int\n}\nfunc (i *singaporeTax) calculateTax() int {\n    tax := i.income * i.taxPercentage / 100\n    return tax\n}\ntype usaTax struct {\n    taxPercentage int\n    income        int\n}\nfunc (i *usaTax) calculateTax() int {\n    tax := i.income * i.taxPercentage / 100\n    return tax\n}\nfunc main() {\n    indianTax := &indianTax{\n        taxPercentage: 30,\n        income:        1000,\n    }\n    singaporeTax := &singaporeTax{\n        taxPercentage: 10,\n        income:        2000,\n    }\n\n    taxSystems := []taxSystem{indianTax, singaporeTax}\n    totalTax := calculateTotalTax(taxSystems)\n\n    fmt.Printf(\"Total Tax is %d\\n\", totalTax)\n}\nfunc calculateTotalTax(taxSystems []taxSystem) int {\n    totalTax := 0\n    for _, t := range taxSystems {\n        totalTax += t.calculateTax() //This is where runtime polymorphism happens\n    }\n    return totalTax\n}\n```", "```\nTotal Tax is 300\n```", "```\n totalTax += t.calculateTax() //This is where runtime polymorphism happens\n```", "```\ntype usaTax struct {\n    taxPercentage int\n    income        int\n}\n\nfunc (i *usaTax) calculateTax() int {\n    tax := i.income * i.taxPercentage / 100\n    return tax\n}\n```", "```\nfunc main() {\n    indianTax := &indianTax{\n        taxPercentage: 30,\n        income:        1000,\n    }\n    singaporeTax := &singaporeTax{\n        taxPercentage: 10,\n        income:        2000,\n    }\n    usaTax := &usaTax{\n        taxPercentage: 40,\n        income:        500,\n    }\n\n    taxSystems := []taxSystem{indianTax, singaporeTax, usaTax}\n    totalTax := calculateTotalTax(taxSystems)\n    fmt.Printf(\"Total Tax is %d\\n\", totalTax)\n}\nfunc calculateTotalTax(taxSystems []taxSystem) int {\n    totalTax := 0\n    for _, t := range taxSystems {\n        totalTax += t.calculateTax()\n    }\n    return totalTax\n}\n```", "```\nTotal Tax is 700\n```"]