- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:31:23'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:31:23
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Golang Advanced Tutorial
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Golang高级教程
- en: 来源：[https://golangbyexample.com/golang-comprehensive-tutorial/](https://golangbyexample.com/golang-comprehensive-tutorial/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/golang-comprehensive-tutorial/](https://golangbyexample.com/golang-comprehensive-tutorial/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "概述")'
- en: '[Golang Basic Tutorial](#Golang_Basic_Tutorial "Golang Basic Tutorial")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Golang基础教程](#Golang_Basic_Tutorial "Golang基础教程")'
- en: '[About](#About "About")'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[关于](#About "关于")'
- en: '[Basics](#Basics "Basics")'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[基础](#Basics "基础")'
- en: '[Loops/Iterations/Flow Control](#LoopsIterationsFlow_Control "Loops/Iterations/Flow
    Control")'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[循环/迭代/流程控制](#LoopsIterationsFlow_Control "循环/迭代/流程控制")'
- en: '[More Types](#More_Types "More Types")'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[更多类型](#More_Types "更多类型")'
- en: '[Concurrency](#Concurrency "Concurrency")'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[并发](#Concurrency "并发")'
- en: '[Error Handling](#Error_Handling "Error Handling")'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[错误处理](#Error_Handling "错误处理")'
- en: '[Golang Advanced Tutorial](#Golang_Advanced_Tutorial "Golang Advanced Tutorial")'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Golang高级教程](#Golang_Advanced_Tutorial "Golang高级教程")'
- en: '[OOPS in Golang](#OOPS_in_Golang "OOPS in Golang")'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Golang中的面向对象编程](#OOPS_in_Golang "Golang中的面向对象编程")'
- en: '[Others](#Others "Others")'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[其他](#Others "其他")'
- en: '[All Design Patterns in Golang](#All_Design_Patterns_in_Golang "All Design
    Patterns in Golang")'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Golang中的所有设计模式](#All_Design_Patterns_in_Golang "Golang中的所有设计模式")'
- en: '[Creational Design Patterns](#Creational_Design_Patterns "Creational Design
    Patterns")'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建型设计模式](#Creational_Design_Patterns "创建型设计模式")'
- en: '[Behavioural Design Patterns](#Behavioural_Design_Patterns "Behavioural Design
    Patterns")'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[行为型设计模式](#Behavioural_Design_Patterns "行为型设计模式")'
- en: '[Structural Design Patterns](#Structural_Design_Patterns "Structural Design
    Patterns")'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[结构型设计模式](#Structural_Design_Patterns "结构型设计模式")'
- en: '[Data Structures in Golang](#Data_Structures_in_Golang "Data Structures in
    Golang")*  *## **Overview**'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Golang中的数据结构](#Data_Structures_in_Golang "Golang中的数据结构")*  *## **概述**'
- en: Welcome to the Golang advanced tutorial series. The tutorial in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang.
    We are looking for feedback as well if you find any mistakes or any improvements
    to be done.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到Golang高级教程系列。本系列教程内容详尽，我们尽量用示例覆盖所有概念。本教程适合那些希望深入理解和掌握Golang的人。如果您发现任何错误或改进的地方，我们也欢迎您的反馈。
- en: Here is the link to the golang official website for reference [https://golang.org/](https://golang.org/)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Golang官方网站的链接供参考 [https://golang.org/](https://golang.org/)
- en: This tutorial is divided into four parts
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程分为四个部分
- en: Golang Basic Topics
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Golang基础主题
- en: Golang Advanced Topics
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Golang高级主题
- en: All Design Patterns in Golang
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有Golang设计模式
- en: Data structures in Golang
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Golang中的数据结构
- en: '**Golang Basic Tutorial**'
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**Golang基础教程**'
- en: Let’s see some basic topics in go first
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看Go中的一些基础主题
- en: '**About**'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**关于**'
- en: Chapter 1   – [About Golang](https://golangbyexample.com/about-golang/)
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一章 – [关于Golang](https://golangbyexample.com/about-golang/)
- en: Chapter 2   – [GO installation](https://golangbyexample.com/golang-installation/)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二章 – [GO安装](https://golangbyexample.com/golang-installation/)
- en: Chapter 3   – [Set up Go Workspace and hello world program](https://golangbyexample.com/workspace-hello-world-golang)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三章 – [设置Go工作空间和Hello World程序](https://golangbyexample.com/workspace-hello-world-golang)
- en: '**Basics**'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**基础**'
- en: Chapter 4   – [Packages and Modules – Part 1](https://golangbyexample.com/packages-modules-go-first)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四章 – [包和模块 – 第1部分](https://golangbyexample.com/packages-modules-go-first)
- en: Chapter 5   – [Packages and Modules – Part 2](https://golangbyexample.com/packages-modules-go-second/)
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第五章 – [包和模块 – 第2部分](https://golangbyexample.com/packages-modules-go-second/)
- en: Chapter 6   – [Variables](https://golangbyexample.com/variables-in-golang-complete-guide/)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第六章 – [变量](https://golangbyexample.com/variables-in-golang-complete-guide/)
- en: Chapter 7   – [All basic data types](https://golangbyexample.com/all-basic-data-types-golang/)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第七章 – [所有基本数据类型](https://golangbyexample.com/all-basic-data-types-golang/)
- en: Chapter 8   – [Functions](https://golangbyexample.com/function-golang-complete-guide/)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第八章 – [函数](https://golangbyexample.com/function-golang-complete-guide/)
- en: Chapter 9   – [Constants](https://golangbyexample.com/constant-golang/)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第九章 – [常量](https://golangbyexample.com/constant-golang/)
- en: '**Loops/Iterations/Flow Control**'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**循环/迭代/流程控制**'
- en: Chapter 10 – [For Loop](https://golangbyexample.com/for-loop-in-golang/)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第十章 – [for循环](https://golangbyexample.com/for-loop-in-golang/)
- en: Chapter 11 – [For Range loop](https://golangbyexample.com/understand-for-range-loop-golang/)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第十一章 – [范围循环](https://golangbyexample.com/understand-for-range-loop-golang/)
- en: Chapter 12 – [If Else](https://golangbyexample.com/understand-if-else-statement-golang/)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第12章 – [如果否则](https://golangbyexample.com/understand-if-else-statement-golang/)
- en: Chapter 13 – [Switch](https://golangbyexample.com/switch-statement-golang/)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第13章 – [选择语句](https://golangbyexample.com/switch-statement-golang/)
- en: Chapter 14 – [Defer keyword](https://golangbyexample.com/defer-golang)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第14章 – [延迟关键字](https://golangbyexample.com/defer-golang)
- en: '**More Types**'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**更多类型**'
- en: Chapter 15 – [Pointer](https://golangbyexample.com/pointer-golang/)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第15章 – [指针](https://golangbyexample.com/pointer-golang/)
- en: Chapter 16 – [Struct](https://golangbyexample.com/struct-in-golang-complete-guide/)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第16章 – [结构体](https://golangbyexample.com/struct-in-golang-complete-guide/)
- en: Chapter 17 – [Array](https://golangbyexample.com/understanding-array-golang-complete-guid)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第17章 – [数组](https://golangbyexample.com/understanding-array-golang-complete-guid)
- en: Chapter 18 – [Slice](https://golangbyexample.com/slice-in-golang/)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第18章 – [切片](https://golangbyexample.com/slice-in-golang/)
- en: Chapter 19 – [Maps](https://golangbyexample.com/maps-in-golang)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第19章 – [映射](https://golangbyexample.com/maps-in-golang)
- en: Chapter 20 – [Method](https://golangbyexample.com/method-in-golang/)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第20章 – [方法](https://golangbyexample.com/method-in-golang/)
- en: Chapter 21 – [Interface](https://golangbyexample.com/interface-in-golang/)
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第21章 – [接口](https://golangbyexample.com/interface-in-golang/)
- en: Chapter 22 – [Iota](https://golangbyexample.com/iota-in-golang)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第22章 – [Iota](https://golangbyexample.com/iota-in-golang)
- en: '**Concurrency**'
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**并发**'
- en: Chapter 23 – [Goroutines](https://golangbyexample.com/goroutines-golang/)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第23章 – [协程](https://golangbyexample.com/goroutines-golang/)
- en: Chapter 24 – [Channel](https://golangbyexample.com/channel-golang/)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第24章 – [通道](https://golangbyexample.com/channel-golang/)
- en: Chapter 25 – [Select Statement](https://golangbyexample.com/select-statement-golang/)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第25章 – [选择语句](https://golangbyexample.com/select-statement-golang/)
- en: '**Error Handling**'
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**错误处理**'
- en: Chapter 26 – [Error](https://golangbyexample.com/error-in-golang/)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第26章 – [错误](https://golangbyexample.com/error-in-golang/)
- en: Chapter 27 – [Error -Part 2](https://golangbyexample.com/error-in-golang-advanced/)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第27章 – [错误 - 第二部分](https://golangbyexample.com/error-in-golang-advanced/)
- en: Chapter 28- [Panic and Recover](https://golangbyexample.com/panic-and-recover-golang/)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第28章 – [恐慌和恢复](https://golangbyexample.com/panic-and-recover-golang/)
- en: '**Golang Advanced Tutorial**'
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**Golang高级教程**'
- en: Let’s look at some advanced topics in go now.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来深入探讨一些Go中的高级主题。
- en: '**OOPS in Golang**'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Golang中的面向对象编程**'
- en: '[OOP: Inheritance in GOLANG complete guide](https://golangbyexample.com/oop-inheritance-golang-complete/)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[OOP：GOLANG中的继承完整指南](https://golangbyexample.com/oop-inheritance-golang-complete/)'
- en: '[Encapsulation in Golang](https://golangbyexample.com/encapsulation-in-go/)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Golang中的封装](https://golangbyexample.com/encapsulation-in-go/)'
- en: '[Runtime Polymorphism](https://golangbyexample.com/runtime-polymorphism-go/)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[运行时多态性](https://golangbyexample.com/runtime-polymorphism-go/)'
- en: '[Compile Time Polymorphism](https://golangbyexample.com/compile-time-polymorphism-go/)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[编译时多态性](https://golangbyexample.com/compile-time-polymorphism-go/)'
- en: '**Others**'
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**其他**'
- en: '[Understanding time and date in Go](https://golangbyexample.com/all-about-time-and-date-golang/)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[理解Go中的时间和日期](https://golangbyexample.com/all-about-time-and-date-golang/)'
- en: '[Using Context Package in GO Complete Guide](https://golangbyexample.com/using-context-in-golang-complete-guide/)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在GO中使用上下文包的完整指南](https://golangbyexample.com/using-context-in-golang-complete-guide/)'
- en: '[Goto statement in go](https://golangbyexample.com/goto-statement-go/)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Go中的Goto语句](https://golangbyexample.com/goto-statement-go/)'
- en: '[More about uintptr](https://golangbyexample.com/understanding-uintptr-golang)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[更多关于uintptr的信息](https://golangbyexample.com/understanding-uintptr-golang)'
- en: '[Basic HTTP server implementation](https://golangbyexample.com/basic-http-server-go/)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[基本HTTP服务器实现](https://golangbyexample.com/basic-http-server-go/)'
- en: '**All Design Patterns in Golang**'
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**Golang中的所有设计模式**'
- en: Below is the list of all design patterns in go
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Go中的所有设计模式列表
- en: '**Creational Design Patterns**'
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**创建型设计模式**'
- en: '[Abstract Factory](https://golangbyexample.com/abstract-factory-design-pattern-go/)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[抽象工厂](https://golangbyexample.com/abstract-factory-design-pattern-go/)'
- en: '[Builder](https://golangbyexample.com/builder-pattern-golang/)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[构建器](https://golangbyexample.com/builder-pattern-golang/)'
- en: '[Factory](https://golangbyexample.com/golang-factory-design-pattern/)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[工厂](https://golangbyexample.com/golang-factory-design-pattern/)'
- en: '[Object Pool](https://golangbyexample.com/golang-object-pool/)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[对象池](https://golangbyexample.com/golang-object-pool/)'
- en: '[Prototype](https://golangbyexample.com/prototype-pattern-go/)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[原型模式](https://golangbyexample.com/prototype-pattern-go/)'
- en: '[Singleton](https://golangbyexample.com/singleton-design-pattern-go/)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[单例模式](https://golangbyexample.com/singleton-design-pattern-go/)'
- en: '**Behavioural Design Patterns**'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**行为设计模式**'
- en: '[Chain of Responsiblity](https://golangbyexample.com/chain-of-responsibility-design-pattern-in-golang/)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[责任链](https://golangbyexample.com/chain-of-responsibility-design-pattern-in-golang/)'
- en: '[Command](https://golangbyexample.com/command-design-pattern-in-golang/)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[命令](https://golangbyexample.com/command-design-pattern-in-golang/)'
- en: '[Iterator](https://golangbyexample.com/go-iterator-design-pattern/)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[迭代器](https://golangbyexample.com/go-iterator-design-pattern/)'
- en: '[Mediator](https://golangbyexample.com/mediator-design-pattern-golang/)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[中介者](https://golangbyexample.com/mediator-design-pattern-golang/)'
- en: '[Memento](https://golangbyexample.com/memento-design-pattern-go/)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[备忘录](https://golangbyexample.com/memento-design-pattern-go/)'
- en: '[Null Object](https://golangbyexample.com/null-object-design-pattern-golang/)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[空对象](https://golangbyexample.com/null-object-design-pattern-golang/)'
- en: '[Observer](https://golangbyexample.com/observer-design-pattern-golang/)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[观察者](https://golangbyexample.com/observer-design-pattern-golang/)'
- en: '[State](https://golangbyexample.com/state-design-pattern-go/)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[状态](https://golangbyexample.com/state-design-pattern-go/)'
- en: '[Template Method](https://golangbyexample.com/template-method-design-pattern-golang/)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[模板方法](https://golangbyexample.com/template-method-design-pattern-golang/)'
- en: '[Visitor](https://golangbyexample.com/visitor-design-pattern-go/)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[访问者](https://golangbyexample.com/visitor-design-pattern-go/)'
- en: '**Structural Design Patterns**'
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**结构设计模式**'
- en: '[Adapter](https://golangbyexample.com/adapter-design-pattern-go/)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[适配器](https://golangbyexample.com/adapter-design-pattern-go/)'
- en: '[Bridge](https://golangbyexample.com/bridge-design-pattern-in-go/)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[桥接](https://golangbyexample.com/bridge-design-pattern-in-go/)'
- en: '[Composite](https://golangbyexample.com/composite-design-pattern-golang/)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[组合模式](https://golangbyexample.com/composite-design-pattern-golang/)'
- en: '[Decorator](https://golangbyexample.com/decorator-pattern-golang/)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[装饰者](https://golangbyexample.com/decorator-pattern-golang/)'
- en: '[Facade](https://golangbyexample.com/facade-design-pattern-in-golang/)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[外观](https://golangbyexample.com/facade-design-pattern-in-golang/)'
- en: '[Flyweight](https://golangbyexample.com/flyweight-design-pattern-golang/)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[享元](https://golangbyexample.com/flyweight-design-pattern-golang/)'
- en: '[Proxy](https://golangbyexample.com/proxy-design-pattern-in-golang/)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[代理](https://golangbyexample.com/proxy-design-pattern-in-golang/)'
- en: '**Data Structures in Golang**'
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**Golang中的数据结构**'
- en: '[Queue](https://golangbyexample.com/queue-in-golang/)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[队列](https://golangbyexample.com/queue-in-golang/)'
- en: '[Stack](https://golangbyexample.com/stack-in-golang/)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[栈](https://golangbyexample.com/stack-in-golang/)'
- en: '[Set](https://golangbyexample.com/set-implementation-in-golang/)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[集合](https://golangbyexample.com/set-implementation-in-golang/)'
- en: '[Linked List](https://golangbyexample.com/singly-linked-list-in-golang/)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[链表](https://golangbyexample.com/singly-linked-list-in-golang/)'
- en: '[Doubly Linked List](https://golangbyexample.com/doubly-linked-list-golang/)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[双向链表](https://golangbyexample.com/doubly-linked-list-golang/)'
- en: Binary Search Tree
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二叉搜索树
- en: '[Recursive](https://golangbyexample.com/binary-search-tree-in-go)'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[递归](https://golangbyexample.com/binary-search-tree-in-go)'
- en: '[Iterative](https://golangbyexample.com/iterative-binary-search-tree-go/)'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[迭代](https://golangbyexample.com/iterative-binary-search-tree-go/)'
- en: Heap
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆
- en: '[Minheap](https://golangbyexample.com/minheap-in-golang/)'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[最小堆](https://golangbyexample.com/minheap-in-golang/)'
- en: '[Maxheap](https://golangbyexample.com/maxheap-in-golang/)'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[最大堆](https://golangbyexample.com/maxheap-in-golang/)'
- en: '[Trie](https://golangbyexample.com/trie-implementation-in-go/)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[字典树](https://golangbyexample.com/trie-implementation-in-go/)'
- en: '***   [go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)***'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '***   [Go](https://golangbyexample.com/tag/go/)*   [Golang](https://golangbyexample.com/tag/golang/)***'
