- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:23:18'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:23:18
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Goroutines in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go中的协程（Golang）
- en: 来源：[https://golangbyexample.com/goroutines-golang/](https://golangbyexample.com/goroutines-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/goroutines-golang/](https://golangbyexample.com/goroutines-golang/)
- en: This is the  chapter 23 of the golang comprehensive tutorial series. Refer to
    this link for other chapters of the series – [Golang Comprehensive Tutorial Series](https://golangbyexample.com/golang-comprehensive-tutorial/)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是golang综合教程系列的第23章。有关该系列其他章节，请参考此链接 – [Golang综合教程系列](https://golangbyexample.com/golang-comprehensive-tutorial/)
- en: '**Next Tutorial** – [Channel](https://golangbyexample.com/channel-golang/)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**下一个教程** – [通道](https://golangbyexample.com/channel-golang/)'
- en: '**Previous Tutorial** – [Iota](https://golangbyexample.com/iota-in-golang)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**上一个教程** – [Iota](https://golangbyexample.com/iota-in-golang)'
- en: Now let’s check out the current tutorial. Below is the table of contents for
    current tutorial.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们查看当前教程。以下是当前教程的目录。
- en: Table of Contents
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Start a go routine](#Start_a_go_routine "Start a go routine")'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[启动一个go协程](#Start_a_go_routine "Start a go routine")'
- en: '[Main goroutine](#Main_goroutine "Main goroutine")'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[主协程](#Main_goroutine "Main goroutine")'
- en: '[Creating Multiple Goroutines](#Creating_Multiple_Goroutines "Creating Multiple
    Goroutines")'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建多个协程](#Creating_Multiple_Goroutines "Creating Multiple Goroutines")'
- en: '[Scheduling of the goroutines](#Scheduling_of_the_goroutines "Scheduling of
    the goroutines")'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[协程调度](#Scheduling_of_the_goroutines "Scheduling of the goroutines")'
- en: '[Local run queue](#Local_run_queue "Local run queue ")'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[本地运行队列](#Local_run_queue "Local run queue ")'
- en: '[Global Run Queue](#Global_Run_Queue "Global Run Queue")'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[全局运行队列](#Global_Run_Queue "Global Run Queue")'
- en: '[Golang scheduler is a Cooperative Scheduler](#Golang_scheduler_is_a_Cooperative_Scheduler
    "Golang scheduler is a Cooperative Scheduler")'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Golang调度器是一个协作调度器](#Golang_scheduler_is_a_Cooperative_Scheduler "Golang scheduler
    is a Cooperative Scheduler")'
- en: '[Advantages of goroutines over threads](#Advantages_of_goroutines_over_threads
    "Advantages of goroutines over threads")'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[协程相较于线程的优势](#Advantages_of_goroutines_over_threads "Advantages of goroutines
    over threads")'
- en: '[Anonymous Goroutines](#Anonymous_Goroutines "Anonymous Goroutines")'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[匿名协程](#Anonymous_Goroutines "Anonymous Goroutines")'
- en: '[Conclusion](#Conclusion "Conclusion")*  *# **Overview**'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[结论](#Conclusion "Conclusion")*  *# **概述**'
- en: Goroutines can be thought of as a lightweight thread that has a separate independent
    execution and which can execute concurrently with other goroutines. It is a function
    or method that is executing concurrently with other goroutines. It is entirely
    managed by the GO runtime. Golang is a concurrent language. Each goroutine is
    an independent execution.  It is goroutine that helps achieve concurrency in golang
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 协程可以被视为一种轻量级线程，具有独立的执行，并可以与其他协程并发执行。它是一个与其他协程并发执行的函数或方法。它完全由GO运行时管理。Golang是一种并发语言。每个协程都是一个独立的执行。正是协程帮助在golang中实现并发。
- en: '**Start a go routine**'
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**启动一个go协程**'
- en: Golang uses a special keyword **‘go’**  for starting a goroutine. To start one
    just add **go** keyword before a function or method call. That function or method
    will now be executed in the goroutine.  Note that it is not the function or method
    which determines if it is a goroutine. If we call that method or function with
    a go keyword then that function or method is said to be executing in a goroutine.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Golang使用特殊关键字**‘go’**来启动协程。只需在函数或方法调用之前添加**go**关键字即可启动一个。该函数或方法现在将在协程中执行。请注意，并不是函数或方法决定是否是协程。如果我们用go关键字调用该方法或函数，那么该函数或方法就被认为是在协程中执行。
- en: Let’s understand the difference between normal running a function and running
    a function as a goroutine.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解正常运行函数与将函数作为协程运行之间的区别。
- en: Normal Running a function
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正常运行一个函数
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the normal running of a function for the above scenario.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述场景中正常运行函数。
- en: First, **statement1** will be executed
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将执行**statement1**
- en: Then **start()** function will be called
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将调用**start()**函数
- en: Once the start() function finishes then **statement2** will be executed
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦start()函数完成，**statement2**将被执行
- en: Running a function as a goroutine
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将函数作为协程运行
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In running a function as a goroutine for the above scenario
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述场景中将函数作为协程运行
- en: First, statement1 will be executed
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将执行statement1
- en: Then function start() will be called as a goroutine which will execute asynchronously.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将作为协程调用start()函数，该函数将异步执行。
- en: '**statement2** will be executed immediately. It will not wait for **start()**
    function to complete. The start function will be executed concurrently as a goroutine
    while the rest of the program continues its execution.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**statement2**将立即执行。它不会等待**start()**函数完成。开始函数将作为协程并发执行，而程序的其余部分将继续执行。'
- en: So basically when calling a function as a goroutine, call will return immediately
    the execution will continue from the next line while the goroutine will be executed
    concurrently in the background. Also note that any return value from the goroutine
    will be ignored.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所以基本上，当以协程方式调用一个函数时，调用将立即返回，执行将从下一行继续，而协程将在后台并发执行。此外，请注意，从协程返回的任何值都将被忽略。
- en: Let’s see a program to understand the above point
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个程序以理解上述观点。
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In above program we use the ‘go’ keyword before a function call to start a goroutine.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们在函数调用前使用“go”关键字来启动协程。
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The above line will start a goroutine which will run the **start()** function.
    The program first prints “Started”. Notice that the line in which we print “Started”
    is after the goroutine is started. This illustrates the point mentioned above
    that after a goroutine is started the call is continued from the next line. We
    then put a timeout. The timeout is there so that the goroutine gets scheduled
    before the main goroutine has existed.  So now goroutine executes and it prints
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码将启动一个协程，该协程将运行**start()**函数。程序首先打印“Started”。注意打印“Started”的行是在协程启动之后。这说明了上述提到的，在协程启动后调用会从下一行继续。然后我们设置一个超时。超时的目的是确保协程在主协程退出之前被调度。因此，现在协程执行并打印。
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Then it prints
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它打印。
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: What happens when we remove the timeout.  Let’s see a program.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们移除超时时，会发生什么？让我们看一个程序。
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Output**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The program above never prints
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的程序从未打印。
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: That means that the goroutine never got executed . This is because the main
    goroutine or the program exited before the goroutine can be scheduled. That brings
    into discussion about the main goroutine
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着协程从未被执行。这是因为主协程或程序在协程被调度之前就退出了。这引发了关于主协程的讨论。
- en: '**Main goroutine**'
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**主协程**'
- en: The **main** function in the **main** package is the main goroutine. All  goroutines
    are started from the main goroutine. These goroutines can then start multiple
    other goroutine and so on.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**main**包中的**main**函数是主协程。所有协程都是从主协程启动的。这些协程可以再启动多个其他协程，依此类推。'
- en: The main goroutine represents the main program. Once it exits then it means
    that the program has exited.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 主协程代表主程序。一旦它退出，就意味着程序已退出。
- en: Goroutines don’t have parents or children. When you start a goroutine it just
    executes alongside all other running goroutines. Each goroutine exits only when
    its function returns. The only exception to that is that all goroutines exit when
    the main goroutine (the one that runs function **main**) exits.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 协程没有父子关系。当你启动一个协程时，它只是与所有其他正在运行的协程并行执行。每个协程仅在其函数返回时退出。唯一的例外是所有协程在主协程（运行**main**函数的那个）退出时也会退出。
- en: Let’s see a program to demonstrate that goroutines don’t have parents or children.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个程序来演示协程没有父子关系。
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Output**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the above program, the first goroutine starts the second goroutine. The first
    goroutine then prints **“In Goroutine”** and then it exits. The second goroutine
    then starts and prints **“In Goroutine2”**. It shows that goroutines don’t have
    parents or children and they exist as an independent execution.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，第一个协程启动第二个协程。第一个协程然后打印**“In Goroutine”**，随后退出。第二个协程开始并打印**“In Goroutine2”**。这表明协程没有父子关系，它们作为独立的执行存在。
- en: Also, please note that Timeout was just for illustration and should never be
    used in a production environment.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意，超时只是为了说明，不应在生产环境中使用。
- en: '**Creating Multiple Goroutines**'
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**创建多个协程**'
- en: Let’s see below program to start multiple goroutines. This example will also
    demonstrate that goroutines are executed concurrently
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看下面的程序以启动多个协程。这个例子也将演示协程是并发执行的。
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Output**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The above program will spawn 10 goroutines in a loop. Every time you will run
    the program it will give different outputs since the goroutines will be run concurrently
    and it is not deterministic which will run first.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序将在循环中生成10个协程。每次运行程序时，它都会给出不同的输出，因为协程将并发运行，无法确定哪个会先运行。
- en: Lets understand the working of go scheduler. Understanding goroutines will be
    much easier after that.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解Go调度器的工作原理。理解协程后将更容易。
- en: '**Scheduling of the goroutines**'
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**协程的调度**'
- en: Once the go program starts,  go runtime will launch OS threads equivalent to
    the number of number of logical CPUs usable by the current process.  There is
    one logical CPU per virtual core where virtual core means
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Go程序启动，Go运行时将启动与当前进程可用的逻辑CPU数量相等的操作系统线程。每个虚拟核心有一个逻辑CPU，其中虚拟核心的含义是
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: where x=number of hardware threads per core
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 其中x=每个核心的硬件线程数量
- en: The **runtime.Numcpus** function can be used to get the the number of logical
    processors available to the GO program. See below program
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**runtime.Numcpus**函数可用于获取可用于Go程序的逻辑处理器数量。见下面的程序'
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: On my machine it prints 16 . My machine has 8 physical cores with 2 hardware
    thread per core. Hence 2*8 = 16.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的机器上显示16。我的机器有8个物理核心，每个核心有2个硬件线程。因此2*8=16。
- en: The go program will launch OS threads equal to the number of logical CPUs available
    to it or the output of runtime.NumCPU(). These threads will be managed by the
    OS and scheduling of these threads onto CPU cores is the responsibility of OS
    only.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Go程序将启动与可用逻辑CPU数量相等的操作系统线程，或运行时的`runtime.NumCPU()`输出。这些线程将由操作系统管理，这些线程调度到CPU核心的责任仅在于操作系统。
- en: The go runtime has its own scheduler that will multiplex the groutines on the
    OS level threads in the go runtime. So essentially each goroutine is running on
    an OS thread that is assigned to a logical CPU
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Go运行时有自己的调度器，它将在Go运行时的操作系统级线程上复用协程。因此，本质上每个协程在分配给逻辑CPU的操作系统线程上运行。
- en: There are two queues involved for managing the goroutines and assigning it to
    the OS threads
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 管理协程并将其分配给操作系统线程涉及两个队列
- en: '**Local run queue**'
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**本地运行队列**'
- en: Within go runtime each of this OS thread will have one queue associated with
    it. It is called Local Run Queue. It contains all the goroutines that will be
    executed in the context of that thread. The go runtime will be doing the scheduling
    and context switching of the goroutines belonging to a particular LRQ to the corresponding
    OS level thread which owns this LRQ
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go运行时，每个操作系统线程都有一个关联的队列。称为本地运行队列。它包含在该线程上下文中执行的所有协程。Go运行时将调度并进行上下文切换，将属于特定LRQ的协程分配到拥有该LRQ的相应操作系统线程。
- en: '**Global Run Queue**'
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**全局运行队列**'
- en: It contains all the goroutines that haven't been moved to any LRQ of any OS
    thread. The Go scheduler will assign a goroutine from this queue to the Local
    Run Queue of any OS thread
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含所有尚未移动到任何操作系统线程LRQ的协程。Go调度器将从此队列中将一个协程分配到任何操作系统线程的本地运行队列。
- en: Below diagram depicits how the scheduler works.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图示说明了调度器的工作原理。
- en: '![](img/ddadf96d5c501fe34af12075fcb1e18d.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ddadf96d5c501fe34af12075fcb1e18d.png)'
- en: '**Golang scheduler is a Cooperative Scheduler**'
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**Golang调度器是一个协作调度器**'
- en: The go scheduler is a cooperative scheduler. Means that is non-preemptive one. 
    There is no time based preemption that is happening which is the case with a preemptive
    scheduler.  In a cooperative scheduler threads have to explicitly yield execution.
    There are some specific check points where goroutine can yield its execution to
    other goroutine.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Go调度器是一个协作调度器。这意味着它是非抢占式的。没有基于时间的抢占，这是抢占式调度器的情况。在协作调度器中，线程必须明确让出执行。协程可以在某些特定检查点让出其执行给其他协程。
- en: The runtime calls the scheduler on function calls to decide weather a new goroutine
    needs to be scheduled . So basically when a goroutine makes any function call,
    in that case scheduler will be called and context switch might happen meaning
    a new goroutine might be scheduled . It is also possible that existing goroutine
    also continues execution.  The scheduler also gets the opportunity for contexts
    switch on below events too
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时在函数调用时调用调度器，以决定是否需要调度一个新的协程。因此，当一个协程进行任何函数调用时，调度器将被调用，可能发生上下文切换，这意味着可能调度一个新的协程。现有的协程也可能继续执行。调度器还可以在以下事件中进行上下文切换。
- en: Functions Call
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数调用
- en: Garbage Collection
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 垃圾回收
- en: Network Calls
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络调用
- en: Channel operations
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通道操作
- en: On using go keyword
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用go关键字时
- en: Blocking on primitives such as mutex etc
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在原语（如互斥锁等）上阻塞
- en: It is to mention that scheduler runs during above events but it doesn't mean
    that context switch will happen. It is just that the scheduler gets the opportunity.
    It is up to the scheduler then weather to do a context switch or not.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 需要提到的是，调度器在上述事件中运行，但这并不意味着上下文切换会发生。只是调度器获得了机会。是否进行上下文切换则取决于调度器。
- en: '**Advantages of goroutines over threads**'
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**goroutines 相对于线程的优势**'
- en: Goroutines starts with 8kb in size and its size can grow or shrink based upon
    runtime requirements.  Whereas OS threads are more than 1 mb in size. So goroutines
    are extremely cheap to allocate. Hence a large number of goroutines can be launched
    at once. The shrinking and growing of a goroutine is managed by the go runtime
    internally. Since goroutines are cheap you can launch hundred thousands of go
    routines while you can only launch few thousands threads.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Goroutines 的初始大小为 8kb，其大小可以根据运行时需求进行增长或缩小。而操作系统线程的大小则超过 1 mb。因此，分配 goroutines
    的成本极低。这样可以同时启动大量 goroutines。goroutine 的增长和缩小由 Go 运行时内部管理。由于 goroutines 成本低，你可以启动成千上万的
    goroutines，而线程则只能启动几千个。
- en: Goroutine scheduling is by go runtime. As discussed above, the go runtime internally
    launches os threads equivalent to the number of logical CPU.  Then it reschedules
    the goroutines onto each of OS threads. So the scheduling of goroutines is done
    by go runtime and hence it is quite faster. In case of threads the the scheduling
    of threads is done by OS runtime. Hence the context switching time of goroutines
    is much faster than context switching time of threads. So thousand of goroutines
    are multiplexed on one or two OS threads. If you launch 1000 threads in JAVA then
    it would consume lot of resources and these 1000 threads needs to be managed by
    OS. Moreover each of these threads will be more than 1 MB in size
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: goroutine 的调度由 Go 运行时管理。如上所述，Go 运行时内部启动与逻辑 CPU 数量相等的操作系统线程。然后，它将 goroutines
    重新调度到每个操作系统线程上。因此，goroutines 的调度由 Go 运行时完成，因此速度非常快。在线程的情况下，线程的调度由操作系统运行时完成。因此，goroutines
    的上下文切换时间远快于线程的上下文切换时间。因此，成千上万的 goroutines 被多路复用在一两个操作系统线程上。如果你在 JAVA 中启动 1000
    个线程，它将消耗大量资源，这 1000 个线程需要由操作系统管理。此外，这些线程的大小都将超过 1 MB。
- en: Goroutines communicate through built in primivate channel which are built to
    handle race conditions. Hence the communication between go routines is safe and
    prevent explicit locking. So the data structure that is shared between goroutines
    doesn't have to be locked. Threaded programming uses locks in order to access
    a shared variable. These can to lead to deadlocks and race conditions which are
    difficult to detect.  As compared goroutines uses channel for communication and
    the entire synchronization is managed by go runtime. In this way deadlocks and
    race conditons are avoided. Infact go believes in the mantra
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Goroutines 通过内置的原始 channel 进行通信，这些 channel 是为处理竞争条件而设计的。因此，goroutines 之间的通信是安全的，并且避免了显式锁定。所以在
    goroutines 之间共享的数据结构不需要被锁定。多线程编程需要使用锁来访问共享变量，这可能导致死锁和竞争条件，且难以检测。相比之下，goroutines
    使用 channel 进行通信，整个同步由 Go 运行时管理。这样就避免了死锁和竞争条件。实际上，Go 信奉这样一个口号
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**Anonymous Goroutines**'
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**匿名 goroutines**'
- en: Anonymous functions in golang can also be called using goroutine. Refer to this
    article for understanding more about anonymous functions - [https://golangbyexample.com/go-anonymous-function/](https://golangbyexample.com/go-anonymous-function/)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Golang 中，匿名函数也可以通过 goroutine 调用。有关匿名函数的更多理解，请参考这篇文章 - [https://golangbyexample.com/go-anonymous-function/](https://golangbyexample.com/go-anonymous-function/)
- en: Below is the format for calling a anonymous function in a goroutine
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是调用匿名函数在 goroutine 中的格式
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: There is no difference in behaviour though when calling a anonymous function
    using goroutine or calling a normal function using goroutine
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 goroutine 调用匿名函数和调用普通函数时，行为没有区别。
- en: 'Let''s see an example:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Output**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**Conclusion**'
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结论**'
- en: This was all about goroutines in golang. Hope you have liked this tutorial.
    Please share feedback/improvements/mistakes in comments
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是关于 Golang 中 goroutines 的所有内容。希望你喜欢这个教程。请在评论中分享反馈/改进/错误。
- en: '**Next Tutorial** – [Channel](https://golangbyexample.com/channel-golang/)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**下一个教程** – [Channel](https://golangbyexample.com/channel-golang/)'
- en: '**Previous Tutorial** – [Iota](https://golangbyexample.com/iota-in-golang)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**上一个教程** – [Iota](https://golangbyexample.com/iota-in-golang)'
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
