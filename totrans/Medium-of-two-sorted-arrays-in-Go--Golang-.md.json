["```\n[1,5]\n[3,4,6]\n```", "```\n[1,3,4,5,6]\n```", "```\n(n/2 + (n/2 +1 ))/2\n```", "```\n[1,2]\n[3,4]\n```", "```\n[1,2,3,4]\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tmedian := findMedianSortedArrays([]int{1, 2}, []int{3, 4})\n\tfmt.Println(median)\n}\n\nfunc findMedianSortedArrays(nums1 []int, nums2 []int) float64 {\n\tfirstArrayLen := len(nums1)\n\tsecondArrayLen := len(nums2)\n\n\tvar mid int\n\ti := 0\n\tj := 0\n\tvar k int\n\tmid = (firstArrayLen+secondArrayLen)/2 + 1\n\n\t//This is the case in which the total lenght of two arrays is odd and there is only one median\n\tif (firstArrayLen+secondArrayLen)%2 == 1 {\n\t\tvar median float64\n\n\t\tfor k < mid {\n\t\t\tif i < firstArrayLen && j < secondArrayLen {\n\t\t\t\tif nums1[i] <= nums2[j] {\n\t\t\t\t\tmedian = float64(nums1[i])\n\t\t\t\t\ti++\n\t\t\t\t\tk++\n\t\t\t\t} else {\n\t\t\t\t\tmedian = float64(nums2[j])\n\t\t\t\t\tj++\n\t\t\t\t\tk++\n\t\t\t\t}\n\t\t\t} else if i < firstArrayLen {\n\t\t\t\tmedian = float64(nums1[i])\n\t\t\t\ti++\n\t\t\t\tk++\n\t\t\t} else {\n\t\t\t\tmedian = float64(nums2[j])\n\t\t\t\tj++\n\t\t\t\tk++\n\t\t\t}\n\n\t\t}\n\t\treturn median\n\t} else { //This is the case in which the total lenght of two arrays is even and there is only two medians. We need to return average of these two medians\n\t\tvar median1 float64\n\t\tvar median2 float64\n\n\t\tfor k < mid {\n\t\t\tmedian1 = median2\n\t\t\tif i < firstArrayLen && j < secondArrayLen {\n\t\t\t\tif nums1[i] <= nums2[j] {\n\t\t\t\t\tmedian2 = float64(nums1[i])\n\t\t\t\t\ti++\n\t\t\t\t\tk++\n\t\t\t\t} else {\n\t\t\t\t\tmedian2 = float64(nums2[j])\n\t\t\t\t\tj++\n\t\t\t\t\tk++\n\t\t\t\t}\n\t\t\t} else if i < firstArrayLen {\n\t\t\t\tmedian2 = float64(nums1[i])\n\t\t\t\ti++\n\t\t\t\tk++\n\t\t\t} else {\n\t\t\t\tmedian2 = float64(nums2[j])\n\t\t\t\tj++\n\t\t\t\tk++\n\t\t\t}\n\n\t\t}\n\t\treturn (median1 + median2) / 2\n\t}\n}\n```", "```\n2.5\n```"]