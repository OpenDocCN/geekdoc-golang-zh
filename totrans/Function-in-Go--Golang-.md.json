["```\nfunc func_name(input_parameters) return_values{\n  //body\n}\n```", "```\nfunc sum(a int, b int) int {\n  return a + b \n}\n```", "```\nresults := sum(2, 3)\n```", "```\nfunc sum(a, b int)\n```", "```\nfunc sum_avg(a, b int) (int, int)\n```", "```\nfunc sum(a, b int) (int, error)\n```", "```\nresult, err := sum(2, 3) \n```", "```\nfunc sum(a, b int) (result int)\n```", "```\nfunc sum_avg(a, b int) (sum, avg int)\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    res := sum(2, 3)\n    fmt.Println(res)\n}\n\nfunc sum(a, b int) int {\n    return a + b\n}\n```", "```\n5\n```", "```\narea() int\ngetType() string\n```", "```\npackage main\nimport \"fmt\"\nfunc main() {\n    var shapes []shape\n    s := &square{side: 2}\n    shapes = append(shapes, s)\n    r := &rectangle{length: 2, breath: 3}\n    shapes = append(shapes, r)\n    for _, shape := range shapes {\n        fmt.Printf(\"Type: %s, Area %d\\n\", shape.getType(), shape.area())\n    }\n}\ntype shape interface {\n    area() int\n    getType() string\n}\ntype rectangle struct {\n    length int\n    breath int\n}\nfunc (r *rectangle) area() int {\n    return r.length * r.breath\n}\nfunc (r *rectangle) getType() string {\n    return \"rectangle\"\n}\ntype square struct {\n    side int\n}\nfunc (s *square) area() int {\n    return s.side * s.side\n}\nfunc (s *square) getType() string {\n    return \"square\"\n}\n```", "```\nType: square, Area 4\nType: rectangle, Area 6\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    areaF := getAreaFunc()\n    print(3, 4, areaF)\n}\n\ntype area func(int, int) int\n\nfunc print(x, y int, a area) {\n    fmt.Printf(\"Area is: %d\\n\", a(x, y))\n}\n\nfunc getAreaFunc() area {\n    return func(x, y int) int {\n        return x * y\n    }\n}\n```", "```\n12\n```", "```\npackage main\n\nimport \"fmt\"\n\nvar max = func(a, b int) int {\n    if a >= b {\n        return a\n    }\n    return b\n}\n\nfunc main() {\n    res := max(2, 3)\n    fmt.Println(res)\n}\n```", "```\n3\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    modulus := getModulus()\n    modulus(-1)\n    modulus(2)\n    modulus(-5)\n}\n\nfunc getModulus() func(int) int {\n    count := 0\n    return func(x int) int {\n        count = count + 1\n        fmt.Printf(\"modulus function called %d times\\n\", count)\n        if x < 0 {\n            x = x * -1\n        }\n        return x\n    }\n}\n```", "```\nmodulus function called 1 times\nmodulus function called 2 times\nmodulus function called 3 times\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    areaF := getAreaFunc()\n    print(3, 4, areaF)\n}\n\nfunc print(x, y int, area func(int, int) int) {\n    fmt.Printf(\"Area is: %d\\n\", area(x, y))\n}\n\nfunc getAreaFunc() func(int, int) int {\n    return func(x, y int) int {\n        return x * y\n    }\n}\n```", "```\n12\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    squareOf2 := func() int {\n        return 2 * 2\n    }()\n    fmt.Println(squareOf2)\n}\n```", "```\n4\n```", "```\nfunc add(numbers ...int)\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(add(1, 2))\n    fmt.Println(add(1, 2, 3))\n    fmt.Println(add(1, 2, 3, 4))\n}\n\nfunc add(numbers ...int) int {\n    sum := 0\n    for _, num := range numbers {\n        sum += num\n    }\n    return sum\n}\n```", "```\n3\n6\n10\n```", "```\nfunc some_func_name(arguments) return_values\n```", "```\nfunc (receiver receiver_type) some_func_name(arguments) return_values\n```"]