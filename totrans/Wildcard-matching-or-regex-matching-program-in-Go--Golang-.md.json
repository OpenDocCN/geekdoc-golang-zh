["```\nInput String: aa\nRegex Sring: aa\nOutput: true\n\nInput String: ab\nRegex Sring: a?\nOutput: true\n\nInput String: aaaa\nRegex Sring: *\nOutput: true\n\nInput String: aa\nRegex Sring: a\nOutput: false\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\toutput := isMatch(\"aa\", \"aa\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"aaaa\", \"*\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"ab\", \"a?\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"adceb\", \"*a*b\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"aa\", \"a\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"mississippi\", \"m??*ss*?i*pi\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"acdcb\", \"a*c?b\")\n\tfmt.Println(output)\n}\n\nfunc isMatch(s string, p string) bool {\n\truneInputArray := []rune(s)\n\trunePatternArray := []rune(p)\n\tif len(runeInputArray) > 0 && len(runePatternArray) > 0 {\n\t\tif runePatternArray[len(runePatternArray)-1] != '*' && runePatternArray[len(runePatternArray)-1] != '?' && runeInputArray[len(runeInputArray)-1] != runePatternArray[len(runePatternArray)-1] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn isMatchUtil([]rune(s), []rune(p), 0, 0, len([]rune(s)), len([]rune(p)))\n}\n\nfunc isMatchUtil(input, pattern []rune, inputIndex, patternIndex int, inputLength, patternLength int) bool {\n\n\tif inputIndex == inputLength && patternIndex == patternLength {\n\t\treturn true\n\t} else if patternIndex == patternLength {\n\t\treturn false\n\t} else if inputIndex == inputLength {\n\t\tif pattern[patternIndex] == '*' && restPatternStar(pattern, patternIndex+1, patternLength) {\n\t\t\treturn true\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tif pattern[patternIndex] == '*' {\n\t\treturn isMatchUtil(input, pattern, inputIndex, patternIndex+1, inputLength, patternLength) ||\n\t\t\tisMatchUtil(input, pattern, inputIndex+1, patternIndex, inputLength, patternLength)\n\n\t}\n\n\tif pattern[patternIndex] == '?' {\n\t\treturn isMatchUtil(input, pattern, inputIndex+1, patternIndex+1, inputLength, patternLength)\n\t}\n\n\tif inputIndex < inputLength {\n\t\tif input[inputIndex] == pattern[patternIndex] {\n\t\t\treturn isMatchUtil(input, pattern, inputIndex+1, patternIndex+1, inputLength, patternLength)\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn false\n\n}\n\nfunc restPatternStar(pattern []rune, patternIndex int, patternLength int) bool {\n\tfor patternIndex < patternLength {\n\t\tif pattern[patternIndex] != '*' {\n\t\t\treturn false\n\t\t}\n\t\tpatternIndex++\n\t}\n\n\treturn true\n\n}\n```", "```\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\n```", "```\nIf both input and pattern is empty\nisMatchingMatrix[0][0] = true\n\nIf pattern is empty \nisMatchingMatrix[i][0] = fasle\n\nIf the input string is empty \nisMatchingMatrix[0][j] = isMatchingMatrix[0][j - 1] if pattern[j â€“ 1] is '*'\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\toutput := isMatch(\"aa\", \"aa\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"aaaa\", \"*\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"ab\", \"a?\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"adceb\", \"*a*b\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"aa\", \"a\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"mississippi\", \"m??*ss*?i*pi\")\n\tfmt.Println(output)\n\n\toutput = isMatch(\"acdcb\", \"a*c?b\")\n\tfmt.Println(output)\n}\n\nfunc isMatch(s string, p string) bool {\n\n\truneInput := []rune(s)\n\trunePattern := []rune(p)\n\n\tlenInput := len(runeInput)\n\tlenPattern := len(runePattern)\n\n\tisMatchingMatrix := make([][]bool, lenInput+1)\n\n\tfor i := range isMatchingMatrix {\n\t\tisMatchingMatrix[i] = make([]bool, lenPattern+1)\n\t}\n\n\tisMatchingMatrix[0][0] = true\n\tfor i := 1; i < lenInput; i++ {\n\t\tisMatchingMatrix[i][0] = false\n\t}\n\n\tif lenPattern > 0 {\n\t\tif runePattern[0] == '*' {\n\t\t\tisMatchingMatrix[0][1] = true\n\t\t}\n\t}\n\n\tfor j := 2; j <= lenPattern; j++ {\n\t\tif runePattern[j-1] == '*' {\n\t\t\tisMatchingMatrix[0][j] = isMatchingMatrix[0][j-1]\n\t\t}\n\n\t}\n\n\tfor i := 1; i <= lenInput; i++ {\n\t\tfor j := 1; j <= lenPattern; j++ {\n\n\t\t\tif runePattern[j-1] == '*' {\n\t\t\t\tisMatchingMatrix[i][j] = isMatchingMatrix[i-1][j] || isMatchingMatrix[i][j-1]\n\t\t\t}\n\n\t\t\tif runePattern[j-1] == '?' || runeInput[i-1] == runePattern[j-1] {\n\t\t\t\tisMatchingMatrix[i][j] = isMatchingMatrix[i-1][j-1]\n\t\t\t}\n\t\t}\n\t}\n\n\treturn isMatchingMatrix[lenInput][lenPattern]\n}\n```", "```\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\n```"]