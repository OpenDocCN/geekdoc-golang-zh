["```\nvar variable_name chan type\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var a chan int\n    fmt.Println(a)\n}\n```", "```\n{nil}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var a chan int\n    a = make(chan int)\n    fmt.Println(a)\n}\n```", "```\n0xc0000240c0\n```", "```\ntype hchan struct {\n    qcount   uint           // total data in the queue\n    dataqsiz uint           // size of the circular queue\n    buf      unsafe.Pointer // points to an array of dataqsiz elements\n    elemsize uint16\n    closed   uint32         // denotes weather channel is closed or not\n    elemtype *_type         // element type\n    sendx    uint           // send index\n    recvx    uint           // receive index\n    recvq    waitq          // list of recv waiters\n    sendq    waitq          // list of send waiters\n    lock     mutex\n}\n```", "```\nch <- val\n```", "```\nval := <- ch \n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    ch := make(chan int)\n\n    fmt.Println(\"Sending value to channel\")\n    go send(ch)\n\n    fmt.Println(\"Receiving from channel\")\n    go receive(ch)\n\n    time.Sleep(time.Second * 1)\n}\n\nfunc send(ch chan int) {\n    ch <- 1\n}\n\nfunc receive(ch chan int) {\n    val := <-ch\n    fmt.Printf(\"Value Received=%d in receive function\\n\", val)\n}\n```", "```\nSending value to channel\nReceiving from channel\nValue Received=1 in receive function\n```", "```\nch <- 1\n```", "```\nval := <-ch\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tch := make(chan int)\n\tgo send(ch)\n\tgo receive(ch)\n\ttime.Sleep(time.Second * 2)\n}\n\nfunc send(ch chan int) {\n\tch <- 1\n\tfmt.Println(\"Sending value to channel complete\")\n}\n\nfunc receive(ch chan int) {\n\ttime.Sleep(time.Second * 1)\n\tfmt.Println(\"Timeout finished\")\n\t_ = <-ch\n\treturn\n}\n```", "```\nTimeout finished\nSending value to channel complete\n```", "```\nTimeout finished\n```", "```\nSending value to channel complete\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n  ch := make(chan int)\n  go send(ch)\n\n  go receive(ch)\n  time.Sleep(time.Second * 2)\n}\n\nfunc send(ch chan int) {\n  time.Sleep(time.Second * 1)\n  fmt.Println(\"Timeout finished\")\n  ch <- 1\n}\n\nfunc receive(ch chan int) {\n  val := <-ch\n  fmt.Printf(\"Receiving Value from channel finished. Value received: %d\\n\", val)\n}\n```", "```\nTimeout finished\nReceiving Value from channel finished. Value received: 1\n```", "```\nTimeout finished\n```", "```\nReceiving Value from channel finished. Value received: 1\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    ch := make(chan int)\n    fmt.Println(\"Sending value to channel start\")\n    go send(ch)\n    val := <-ch\n    fmt.Printf(\"Receiving Value from channel finished. Value received: %d\\n\", val)\n}\n\nfunc send(ch chan int) {\n    ch <- 1\n}\n```", "```\nSending value to channel start\nReceiving Value from channel finished. Value received: 1\n```", "```\na = make(chan <type>, capacity)</type>\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    ch := make(chan int, 1)\n    ch <- 1\n    fmt.Println(\"Sending value to channnel complete\")\n    val := <-ch\n    fmt.Printf(\"Receiving Value from channel finished. Value received: %d\\n\", val)\n}\n```", "```\nch := make(chan int, 1)\n```", "```\nch <- 1\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    ch := make(chan int, 1)\n    ch <- 1\n    ch <- 1\n    fmt.Println(\"Sending value to channnel complete\")\n    val := <-ch\n    fmt.Printf(\"Receiving Value from channel finished. Value received: %d\\n\", val)\n}\n```", "```\nfatal error: all goroutines are asleep - deadlock!\n```", "```\nch <- 1\nch <- 1\n```", "```\nfatal error: all goroutines are asleep - deadlock!\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    ch := make(chan int, 1)\n    ch <- 1\n    fmt.Println(\"Sending value to channnel complete\")\n    val := <-ch\n    val = <-ch\n    fmt.Printf(\"Receiving Value from channel finished. Value received: %d\\n\", val)\n}\n```", "```\nfatal error: all goroutines are asleep - deadlock!\n```", "```\nfatal error: all goroutines are asleep - deadlock!\n```", "```\nchan<- int\n```", "```\n<-chan in\n```", "```\nfunc process(ch chan<- int){ //doSomething }\n```", "```\ninvalid operation: <-ch (receive from send-only type chan<- int)\n```", "```\ns := <-ch\n```", "```\npackage main\nimport \"fmt\"\nfunc main() {\n    ch := make(chan int, 3)\n    process(ch)\n    fmt.Println(<-ch)\n}\nfunc process(ch chan<- int) {\n    ch <- 2\n    //s := <-ch\n}\n```", "```\nfunc process(ch <-chan int){ //doSomething }\n```", "```\ninvalid operation: ch <- 2 (send to receive-only type <-chan int)\n```", "```\nch <- 2\n```", "```\npackage main\nimport \"fmt\"\nfunc main() {\n    ch := make(chan int, 3)\n    ch <- 2\n    process(ch)\n    fmt.Println()\n}\nfunc process(ch <-chan int) {\n    s := <-ch\n    fmt.Println(s)\n    //ch <- 2\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    ch := make(chan int, 3)\n    fmt.Printf(\"Capacity: %d\\n\", cap(ch))\n}\n```", "```\nCapacity: 3\n```", "```\nmake(chan int, 3)\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tch := make(chan int, 3)\n\tch <- 5\n\tfmt.Printf(\"Len: %d\\n\", len(ch))\n\n\tch <- 6\n\tfmt.Printf(\"Len: %d\\n\", len(ch))\n\tch <- 7\n\tfmt.Printf(\"Len: %d\\n\", len(ch))\n}\n```", "```\nLen: 1\nLen: 2\nLen: 3\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    ch := make(chan int)\n    go sum(ch, 3)\n    ch <- 2\n    ch <- 2\n    ch <- 2\n    close(ch)\n    time.Sleep(time.Second * 1)\n}\n\nfunc sum(ch chan int, len int) {\n    sum := 0\n    for i := 0; i < len; i++ {\n        sum += <-ch\n    }\n    fmt.Printf(\"Sum: %d\\n\", sum)\n}\n```", "```\nSum: 6\n```", "```\npackage main\nfunc main() {\n    ch := make(chan int)\n    close(ch)\n    ch <- 2\n}\n```", "```\npanic: send on closed channel\n```", "```\nval,ok <- ch\n```", "```\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    ch := make(chan int, 1)\n    ch <- 2\n    val, ok := <-ch\n    fmt.Printf(\"Val: %d OK: %t\\n\", val, ok)\n\n    close(ch)\n    val, ok = <-ch\n    fmt.Printf(\"Val: %d OK: %t\\n\", val, ok)\n}\n```", "```\nVal: 2 OK: true\nVal: 0 OK: false\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tch := make(chan int, 3)\n\tch <- 2\n\tch <- 2\n\tch <- 2\n\tclose(ch)\n\tgo sum(ch)\n\ttime.Sleep(time.Second * 1)\n}\n\nfunc sum(ch chan int) {\n\tsum := 0\n\tfor val := range ch {\n\t\tsum += val\n\t}\n\tfmt.Printf(\"Sum: %d\\n\", sum)\n}\n```", "```\nSum: 6\n```", "```\nfatal error: all goroutines are asleep - deadlock!\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var a chan int\n    fmt.Print(\"Default zero value of channel: \")\n    fmt.Println(a)\n}\n```", "```\nnil\n```"]