- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:50:31'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:50:31
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Count unreachable pair of nodes in an undirected graph in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Go (Golang)中计算无向图中无法到达的节点对
- en: 来源：[https://golangbyexample.com/count-unreachable-pair-nodes-golang/](https://golangbyexample.com/count-unreachable-pair-nodes-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/count-unreachable-pair-nodes-golang/](https://golangbyexample.com/count-unreachable-pair-nodes-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *# **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *# **概述**'
- en: An integer n is given. There are n  nodes numbered 0 to n-1.  A 2D integer array
    **edges** is also given where **edges[i] = [ai, bi]** means that there is an undirected
    node from ai to bi.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个整数n。有n个节点编号为0到n-1。还有一个二维整数数组**edges**，其中**edges[i] = [ai, bi]**表示从ai到bi有一个无向节点。
- en: The  objective is  to  find the  number of pairs of nodes that are unreachable
    from each other
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是找到彼此无法到达的节点对数量
- en: '**Example 1**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 1**'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Graph**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**图**'
- en: '![](img/8473545ae2c070f9173a090845f5e532.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8473545ae2c070f9173a090845f5e532.png)'
- en: '**Output**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '2'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: We  have  two pairs that are not connected
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两个未连接的节点
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Example 2**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 2**'
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Graph**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**图**'
- en: '![](img/649eee1225b6dbfbb0bd449cfb524479.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/649eee1225b6dbfbb0bd449cfb524479.png)'
- en: '**Output:**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '**26**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**26**'
- en: We  have  26 pairs that are not connected
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有26对未连接的节点
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Idea is to do a DFS  from each of the nodes which are not visited to identify
    the number of nodes in each connected graph within the disconnected graph. For
    example, above, the number of nodes in each connected graph is
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 思路是从每个未访问的节点开始进行深度优先搜索，以识别每个连接图中的节点数。在上面的例子中，每个连接图中的节点数是
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Then we simply find the number of pairs from each connected graph
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们简单地找到每个连接图中的节点对数量
- en: '**Program**'
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Below is the program for the same
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相应的程序
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Output:**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 请查看我们的Golang高级教程。本系列教程内容详尽，努力覆盖所有概念及示例。此教程适合希望获得Golang专业知识和扎实理解的人 -
    [Golang高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you - [All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解如何在Golang中实现所有设计模式，那么这篇文章适合你 - [所有设计模式Golang](https://golangbyexample.com/all-design-patterns-golang/)
- en: Also, check out our system design tutorial series here - [System Design Tutorial
    Series](https://techbyexample.com/system-design-questions/)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请查看我们的系统设计教程系列 - [系统设计教程系列](https://techbyexample.com/system-design-questions/)
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[去](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
