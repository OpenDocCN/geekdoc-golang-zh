- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '分类: 未分类'
- en: 'date: 2024-10-13 06:49:33'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-10-13 06:49:33'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Kth Distinct String in an Array Program in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Go (Golang)中查找第k个不同字符串的程序
- en: 来源：[https://golangbyexample.com/kth-distinct-string-golang/](https://golangbyexample.com/kth-distinct-string-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/kth-distinct-string-golang/](https://golangbyexample.com/kth-distinct-string-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *## **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *## **概述**'
- en: An input string array is given which can have duplicate strings as well. An
    input number **k** is also provided. Idea is to find the first kth distinct string
    in the given input string array
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个输入字符串数组，可以包含重复字符串。还提供一个输入数字 **k**。其思路是找到给定输入字符串数组中的第k个不同字符串
- en: Let’s understand it with an example
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来理解
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the above array below strings are duplicated
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的数组中，下面的字符串是重复的
- en: “a”
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “a”
- en: “c”
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “c”
- en: “b”
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “b”
- en: and below strings are not duplicated
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 上述字符串未重复
- en: “e”
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “e”
- en: “d”
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “d”
- en: Since string **“d”** appears second in order and k is 2 hence the output is
    **“d”**Another example
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于字符串 **“d”** 在顺序中第二次出现，而k为2，因此输出为 **“d”**另一个例子
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For the same reasoning as above
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以上原因相同
- en: '**Program**'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Here is the program for the same.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是相同的程序。
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 查看我们的Golang高级教程。此系列的教程内容详尽，我们尽力涵盖所有概念及示例。这个教程适合那些希望获得Golang专业知识和扎实理解的人
    – [Golang 高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you –[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解所有设计模式如何在Golang中实现。如果是，那么这篇文章适合你 – [所有设计模式 Golang](https://golangbyexample.com/all-design-patterns-golang/)
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
