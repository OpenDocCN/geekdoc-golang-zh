- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:07:11'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:07:11
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'HTTP client Timeout: All major types of Client timeouts'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP客户端超时：所有主要类型的客户端超时
- en: 来源：[https://golangbyexample.com/all-types-client-timeouts-http-tcp-udp-unix/](https://golangbyexample.com/all-types-client-timeouts-http-tcp-udp-unix/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/all-types-client-timeouts-http-tcp-udp-unix/](https://golangbyexample.com/all-types-client-timeouts-http-tcp-udp-unix/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Dial Timeout:](#Dial_Timeout "Dial Timeout:")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[拨号超时：](#Dial_Timeout "Dial Timeout:")'
- en: '[TLS Handshake Timeout:](#TLS_Handshake_Timeout "TLS Handshake Timeout:")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TLS握手超时：](#TLS_Handshake_Timeout "TLS Handshake Timeout:")'
- en: '[ResponseHeader Timeout:](#ResponseHeader_Timeout "ResponseHeader Timeout:")'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[响应头超时：](#ResponseHeader_Timeout "ResponseHeader Timeout:")'
- en: '[Request Timeout:](#Request_Timeout "Request Timeout:")'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[请求超时：](#Request_Timeout "Request Timeout:")'
- en: '[Socket Timeout:](#Socket_Timeout "Socket Timeout: ")'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[套接字超时：](#Socket_Timeout "Socket Timeout: ")'
- en: '[Wait for Connection Timeout:](#Wait_for_Connection_Timeout "Wait for Connection
    Timeout:")'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[等待连接超时：](#Wait_for_Connection_Timeout "Wait for Connection Timeout:")'
- en: '[Idle Connection Timeout:](#Idle_Connection_Timeout "Idle Connection Timeout:")*  *#
    **Overview**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[空闲连接超时：](#Idle_Connection_Timeout "Idle Connection Timeout:")*  *# **概述**'
- en: In this article, we will study different types of timeouts that are possible
    in HTTP or TCP or UDP or Unix Sockets Communication, etc when connecting from
    **Client** to the **Server**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将研究在连接**客户端**与**服务器**时可能在HTTP、TCP、UDP或Unix套接字通信中出现的不同类型的超时。
- en: There is also something called **ServerTimeout** that specifies when the server
    can close an incoming request. Just to add, the Server timeout exists to protect
    a server from the malicious client or a slow client which is holding a connection
    for very long.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个称为**服务器超时**的概念，指定服务器何时可以关闭传入请求。补充一下，服务器超时存在是为了保护服务器免受恶意客户端或长时间保持连接的慢客户端的影响。
- en: For **Client Timeouts**  please note that different libraries in different programming
    languages may not give you an option to set all the timeouts which are described
    belowFor eg in golang net http package the Client struct ([https://golang.org/pkg/net/http/#Client](https://golang.org/pkg/net/http/#Client))
    allows you to set a single **Timeout.** This timeout specifies below two timeouts
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**客户端超时**，请注意，不同编程语言中的不同库可能无法为您提供设置以下描述的所有超时的选项。例如，在Golang的net http包中，Client结构体（[https://golang.org/pkg/net/http/#Client](https://golang.org/pkg/net/http/#Client)）允许您设置单个**超时**。该超时指定以下两个超时。
- en: Request Timeout
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请求超时
- en: Socket Timeout
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 套接字超时
- en: 'Let’s learn all types of timeouts:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解所有类型的超时：
- en: '**Dial Timeout**:'
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**拨号超时**：'
- en: Dial Timeout specifies the maximum amount of time a dial will wait for a connect
    to complete on a  named network. The named network could be **“TCP”, “UDP” , “IP”,
    “unix”** etc. It is a case where no response at all is received from the server.
    It may happen because
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Dial Timeout指定拨号在命名网络上完成连接所等待的最长时间。命名网络可以是**“TCP”，“UDP”，“IP”，“unix”**等。这是指从服务器完全没有响应的情况。可能发生的原因包括：
- en: Wrong DNS
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误的DNS
- en: The remote server does not respond
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程服务器没有响应
- en: The remote server is dead
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程服务器已经挂掉
- en: Wrong port used to connect to the remote server
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到远程服务器时使用了错误的端口
- en: '**Example**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**'
- en: Imagine a case where DialTimeout is 1 sec. A client is dialing a TCP connection
    but does not receive any response from the server with 1 sec then DialTimeout
    will happen.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 假设DialTimeout为1秒。客户端正在拨打TCP连接，但在1秒内未收到来自服务器的任何响应，则会发生DialTimeout。
- en: '**TLS Handshake Timeout**:'
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**TLS握手超时**：'
- en: Applicable for SSL request. Whenever a connection is getting established with
    a remote server, a  TLS handshake happens in which SSL keys are exchanged and
    SSL certification verification of the server is done.  **TLS Handshake** **Timeout**
    specifiesthemax time to wait for TLS Handshake to be established.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于SSL请求。每当与远程服务器建立连接时，会发生TLS握手，在此过程中交换SSL密钥并进行服务器的SSL证书验证。**TLS握手** **超时**指定了等待TLS握手建立的最大时间。
- en: '**Example:**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：**'
- en: Imagine a case of an HTTP request. Let’s say the TLS Handshake timeout is 1
    sec. The Client  will max wait for 1 sec for the TLS Handshake to be completed
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个HTTP请求的情况。假设TLS握手超时为1秒。客户端最多等待1秒以完成TLS握手。
- en: '**ResponseHeader Timeout**:'
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**响应头超时**：'
- en: After the client has done the  TLS Handshake with the server and also done sending
    the request headers and request body fully then **ResponseHeader Timeout** comes
    into the picture. This timeout specifies the max time to wait for receiving response
    headers from the server.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端与服务器完成TLS握手并完全发送请求头和请求体后，**响应头超时**就会生效。这个超时指定了等待接收服务器响应头的最长时间。
- en: '**Example:**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：**'
- en: Let’s say the Response HeaderTimeout is 1 second. A client makes an HTTP request,
    the TLS handshake is successful. The client then sends the request headers and
    request body to the server.  Now in this scenario, the **Response HeaderTimeout**
    will happen if server response headers are not received within 1 second
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 假设响应头超时是1秒。客户端发起HTTP请求，TLS握手成功。然后客户端将请求头和请求体发送给服务器。在这种情况下，如果在1秒内没有接收到服务器的响应头，**响应头超时**将会发生。
- en: '**Request Timeout:**'
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**请求超时：**'
- en: Request Timeout comes into picture starting from dialing of a connection to
    the server to the receive of the entire response body from the remote server.
    It represents the max time to wait for entire client request to complete. Imagine
    an HTTP request, a request timeout specifies how much max time it will wait for
    the entire HTTP request to be completed. It is the timeout for the complete request
    so it includes **DialTimeout**, **TLSHandshakeTimeout** as well as **Response
    HeaderTimeout** and plus extra time waiting for response body.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请求超时从拨号连接到服务器开始，到接收到远程服务器的整个响应体为止。它表示等待整个客户端请求完成的最长时间。想象一下一个HTTP请求，请求超时指定了它等待整个HTTP请求完成的最长时间。这是完整请求的超时，因此包括**拨号超时**、**TLS握手超时**以及**响应头超时**，再加上等待响应体的额外时间。
- en: '**Example:**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：**'
- en: Let’s say you Request Timeout is 1 sec, then the client will wait for max 1
    sec starting from Dial to receive the entire response before timing out.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的请求超时是1秒，那么客户端将从拨号开始等待最长1秒以接收整个响应，之后会超时。
- en: '**Socket Timeout:**'
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**套接字超时：**'
- en: This timeout is mostly related to long-lived connections. A connection has been
    established with a remote server and some chunks of bytes also have been transferred.
    If this data flow of bytes is interrupted for a specific time, then the socket
    timeout comes into the picture.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个超时主要与长连接相关。与远程服务器建立了连接，并且也传输了一些字节。如果这段字节的数据流在特定时间内中断，那么套接字超时就会出现。
- en: '**Example:**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：**'
- en: Imaging your socket timeout is 1 sec and if no new bytes are transferred for
    the next 1 sec, then it will result in socket timeout. By setting the socket timeout
    to 1 sec means that some data should be received every one second. So a socket
    timeout is waiting for individual packets and it does not mean timeout for a full
    response.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的套接字超时时间是1秒，如果在接下来的1秒内没有新字节传输，那么将会导致套接字超时。将套接字超时时间设置为1秒意味着每秒应该接收到一些数据。因此，套接字超时是等待单个数据包，并不意味着等待完整响应的超时。
- en: '**Wait for Connection Timeout:**'
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**等待连接超时：**'
- en: This timeout is applicable for a fixed connection Pool. This is the timeout
    waiting for an active connection to be available from the pool.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个超时适用于固定连接池。这是等待池中可用的活动连接的超时。
- en: '**Example**:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**：'
- en: Let’s take an example of a DB connection pool. Imagine you are using MYSQL server
    and max connections in a pool is 20 and all connections are currently utilized.
    Your **“Wait for Connection Timeout”** is set to 1 sec. A new request comes and
    it needs a connection to connect to DB. Since all 20 connections are occupied,
    then, in this case, the new request will wait for max 1 second for connection
    to be available before timing out. In this case, the response you might get is
    **“Too many connections”** error.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以数据库连接池为例。假设你正在使用MYSQL服务器，池中的最大连接数是20，而所有连接目前都被使用。你的**“等待连接超时”**设置为1秒。新的请求到来，并需要一个连接来连接到数据库。由于所有20个连接都被占用，因此在这种情况下，新请求将最多等待1秒以获得可用连接，然后超时。在这种情况下，你可能会得到**“连接数过多”**的错误。
- en: '**Idle Connection Timeout:**'
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**闲置连接超时：**'
- en: This timeout is also applicable to a connection pool. Idle Connection Timeout
    specifies how much time an unused connection should be kept around.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个超时也适用于连接池。闲置连接超时指定了一个未使用连接应该保留的时间。
- en: '**Example:**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：**'
- en: Imaging a connection pool of 20 connections. At a particular time, 5 connections
    were getting used parallelly. But after that, there was no incoming request. So
    these 5 connections will wait for a value equal to “Idle Connection Timeout” before
    being released. An idle connection timeout of 1 sec should mean that a particular
    connection should not be idle for more than 1 second otherwise it will be released
    and a new connection will be creating for any new request.*
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个包含20个连接的连接池。在某个特定时刻，5个连接正在并行使用。但之后，没有新的请求。因此，这5个连接将在“闲置连接超时”的值之前等待释放。闲置连接超时为1秒应该意味着某个连接不得闲置超过1秒，否则它将被释放，并为任何新请求创建一个新连接。
