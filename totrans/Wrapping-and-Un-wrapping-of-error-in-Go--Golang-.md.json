["```\ne := fmt.Errorf(\"... %w ...\", ..., err, ...)\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype errorOne struct{}\n\nfunc (e errorOne) Error() string {\n\treturn \"Error One happended\"\n}\n\nfunc main() {\n\n\te1 := errorOne{}\n\n\te2 := fmt.Errorf(\"E2: %w\", e1)\n\n\te3 := fmt.Errorf(\"E3: %w\", e2)\n\n\tfmt.Println(e2)\n\n\tfmt.Println(e3)\n\n}\n```", "```\nE2: Error One happended\nE3: E2: Error One happended\n```", "```\ne2 := fmt.Errorf(\"E2: %w\", e1)\n```", "```\ne3 := fmt.Errorf(\"E3: %w\", e2)\n```", "```\nE2: Error One happended\n```", "```\nE3: E2: Error One happended\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype notPositive struct {\n\tnum int\n}\n\nfunc (e notPositive) Error() string {\n\treturn fmt.Sprintf(\"checkPositive: Given number %d is not a positive number\", e.num)\n}\n\ntype notEven struct {\n\tnum int\n}\n\nfunc (e notEven) Error() string {\n\treturn fmt.Sprintf(\"checkEven: Given number %d is not an even number\", e.num)\n}\n\nfunc checkPositive(num int) error {\n\tif num < 0 {\n\t\treturn notPositive{num: num}\n\t}\n\treturn nil\n}\n\nfunc checkEven(num int) error {\n\tif num%2 == 1 {\n\t\treturn notEven{num: num}\n\t}\n\treturn nil\n}\n\nfunc checkPostiveAndEven(num int) error {\n\tif num > 100 {\n\t\treturn fmt.Errorf(\"checkPostiveAndEven: Number %d is greater than 100\", num)\n\t}\n\n\terr := checkPositive(num)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = checkEven(num)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\tnum := 3\n\terr := checkPostiveAndEven(num)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t} else {\n\t\tfmt.Println(\"Givennnumber is positive and even\")\n\t}\n\n}\n```", "```\ncheckEven: Given number 3 is not an even number\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype notPositive struct {\n\tnum int\n}\n\nfunc (e notPositive) Error() string {\n\treturn fmt.Sprintf(\"checkPositive: Given number %d is not a positive number\", e.num)\n}\n\ntype notEven struct {\n\tnum int\n}\n\nfunc (e notEven) Error() string {\n\treturn fmt.Sprintf(\"checkEven: Given number %d is not an even number\", e.num)\n}\n\nfunc checkPositive(num int) error {\n\tif num < 0 {\n\t\treturn notPositive{num: num}\n\t}\n\treturn nil\n}\n\nfunc checkEven(num int) error {\n\tif num%2 == 1 {\n\t\treturn notEven{num: num}\n\t}\n\treturn nil\n}\n\nfunc checkPostiveAndEven(num int) error {\n\tif num > 100 {\n\t\treturn fmt.Errorf(\"checkPostiveAndEven: Number %d is greater than 100\", num)\n\t}\n\n\terr := checkPositive(num)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"checkPostiveAndEven: %w\", err)\n\t}\n\n\terr = checkEven(num)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"checkPostiveAndEven: %w\", err)\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\tnum := 3\n\terr := checkPostiveAndEven(num)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t} else {\n\t\tfmt.Println(\"Given number is positive and even\")\n\t}\n\n}\n```", "```\ncheckPostiveAndEven: checkEven: Given number 3 is not an even number\n```", "```\nfmt.Errorf(\"checkPostiveAndEven: %w\", err)\n```", "```\ncheckPostiveAndEven: checkEven: Given number 3 is not an even number\n```", "```\nfunc Unwrap(err error) error\n```", "```\nimport (\n    \"errors\"\n    \"fmt\"\n)\ntype errorOne struct{}\nfunc (e errorOne) Error() string {\n    return \"Error One happended\"\n}\nfunc main() {\n    e1 := errorOne{}\n    e2 := fmt.Errorf(\"E2: %w\", e1)\n    e3 := fmt.Errorf(\"E3: %w\", e2)\n    fmt.Println(errors.Unwrap(e3))\n    fmt.Println(errors.Unwrap(e2))\n    fmt.Println(errors.Unwrap(e1))\n}\n```", "```\nE2: Error One happended\nError One happended \n```", "```\ne2 := fmt.Errorf(\"E2: %w\", e1)\n```", "```\ne3 := fmt.Errorf(\"E3: %w\", e2)\n```", "```\nfmt.Println(errors.Unwrap(e3))\n```", "```\nE2: Error One happended\n```", "```\nfmt.Println(errors.Unwrap(e2))\n```", "```\nError One happened\n```", "```\nfmt.Println(errors.Unwrap(e1))\n```", "```\n{nil}\n```"]