- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:04:16'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:04:16
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Factory Design Pattern in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go（Golang）中的工厂设计模式
- en: 来源：[https://golangbyexample.com/golang-factory-design-pattern/](https://golangbyexample.com/golang-factory-design-pattern/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/golang-factory-design-pattern/](https://golangbyexample.com/golang-factory-design-pattern/)
- en: 'Note: Interested in understanding how all other design patterns can be implemented
    in GO. Please see this full reference – [All Design Patterns in Go (Golang)](https://golangbyexample.com/all-design-patterns-golang/)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：如果有兴趣了解其他所有设计模式在 GO 中的实现，请查看这个完整参考——[Go（Golang）中的所有设计模式](https://golangbyexample.com/all-design-patterns-golang/)
- en: Table of Contents
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Introduction: ](#Introduction "Introduction:  ")'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [介绍：](#Introduction "Introduction: ")'
- en: '[UML Diagram:](#UML_Diagram "UML Diagram:")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[UML 图：](#UML_Diagram "UML Diagram:")'
- en: '[Mapping:](#Mapping "Mapping:")'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[映射：](#Mapping "Mapping:")'
- en: '[Example: ](#Example "Example:  ")'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[示例：](#Example "Example: ")'
- en: '[Full Working Code:](#Full_Working_Code "Full Working Code:")*  *## **Introduction: **'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[完整工作代码：](#Full_Working_Code "Full Working Code:")*  *## **介绍：**'
- en: Factory design pattern is a creational design pattern and it is also one of
    the most commonly used pattern. This pattern provides a way to hide the creation
    logic of the instances being created.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 工厂设计模式是一种创建型设计模式，也是最常用的模式之一。该模式提供了一种隐藏创建实例逻辑的方法。
- en: The client only interacts with a factory struct and tells the kind of instances
    that needs to be created. The factory class interacts with the corresponding concrete
    structs and returns the correct instance back.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端只与工厂结构体交互，并告知需要创建的实例类型。工厂类与相应的具体结构体交互，并返回正确的实例。
- en: In below example
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中
- en: We have **iGun** interface which defines all methods a gun should have
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有**iGun**接口，定义了枪应具备的所有方法。
- en: There is **gun** struct that implements the **iGun** interface.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在实现**iGun**接口的**gun**结构体。
- en: Two concrete guns **ak47** and **maverick**. Both embed **gun** struct and hence
    also indirectly implement all methods of **iGun** and hence are of **iGun** type
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两种具体的枪**ak47**和**maverick**。两者都嵌入**gun**结构，因此也间接实现了**iGun**的所有方法，因此都是**iGun**类型。
- en: We have a **gunFactory** struct which creates the gun of type **ak47** or **maverick**.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有一个**gunFactory**结构体，它可以创建**ak47**或**maverick**类型的枪。
- en: The **main.go** acts as a client and instead of directly interacting with **ak47**
    or **maverick**, it relies on **gunFactory** to create instances of **ak47** and
    **maverick**
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**main.go**作为客户端，而不是直接与**ak47**或**maverick**交互，它依赖于**gunFactory**来创建**ak47**和**maverick**的实例。'
- en: '**UML Diagram:**'
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**UML 图：**'
- en: '![](img/4013239931e0f67fb503fefdcfbec4da.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4013239931e0f67fb503fefdcfbec4da.png)'
- en: Below is the corresponding mapping UML diagram with the example given above
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是与上述示例对应的映射 UML 图。
- en: '![](img/5466090257004d8166c3e8873def1d89.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5466090257004d8166c3e8873def1d89.png)'
- en: '**Mapping:**'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**映射：**'
- en: The below table represents the mapping from the UML diagram actors to actual
    implementation actors in **“Example”** below
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的表格表示 UML 图中的参与者与“示例”中实际实现参与者的映射。
- en: '| ProductFactory | gunFactory.go |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| ProductFactory | gunFactory.go |'
- en: '| iProduct | iGun.go |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| iProduct | iGun.go |'
- en: '| Product | gun.go |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 产品 | gun.go |'
- en: '| Concrete iProduct 1 | ak47go |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 具体 iProduct 1 | ak47go |'
- en: '| Concrete iProduct 1 | maverick.go |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 具体 iProduct 1 | maverick.go |'
- en: '| Client | main.go |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 客户端 | main.go |'
- en: '**Example: **'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**示例：**'
- en: '**iGun.go**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**iGun.go**'
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**gun.go**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**gun.go**'
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**ak47.go**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**ak47.go**'
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**maverick.go**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**maverick.go**'
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**gunFactory.go**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**gunFactory.go**'
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**main.go**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**main.go**'
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Output:**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Full Working Code:**'
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**完整工作代码：**'
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Output:**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[factory](https://golangbyexample.com/tag/factory/)*   [go](https://golangbyexample.com/tag/go/)*   [pattern](https://golangbyexample.com/tag/pattern/)*'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[factory](https://golangbyexample.com/tag/factory/)*   [go](https://golangbyexample.com/tag/go/)*   [pattern](https://golangbyexample.com/tag/pattern/)*'
