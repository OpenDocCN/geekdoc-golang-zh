["```\nvar lock = &sync.Mutex{}\n\ntype single struct {\n}\n\nvar singleInstance *single\n\nfunc getInstance() *single {\n    if singleInstance == nil {\n        lock.Lock()\n        defer lock.Unlock()\n        if singleInstance == nil {\n            fmt.Println(\"Creting Single Instance Now\")\n            singleInstance = &single{}\n        } else {\n            fmt.Println(\"Single Instance already created-1\")\n        }\n    } else {\n        fmt.Println(\"Single Instance already created-2\")\n    }\n    return singleInstance\n}\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"sync\"\n)\n\nvar lock = &sync.Mutex{}\n\ntype single struct {\n}\n\nvar singleInstance *single\n\nfunc getInstance() *single {\n    if singleInstance == nil {\n        lock.Lock()\n        defer lock.Unlock()\n        if singleInstance == nil {\n            fmt.Println(\"Creting Single Instance Now\")\n            singleInstance = &single{}\n        } else {\n            fmt.Println(\"Single Instance already created-1\")\n        }\n    } else {\n        fmt.Println(\"Single Instance already created-2\")\n    }\n    return singleInstance\n}\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    for i := 0; i < 100; i++ {\n        go getInstance()\n    }\n    // Scanln is similar to Scan, but stops scanning at a newline and\n    // after the final item there must be a newline or EOF.\n    fmt.Scanln()\n}\n```", "```\nCreting Single Instance Now\nSingle Instance already created-1\nSingle Instance already created-1\nSingle Instance already created-1\nSingle Instance already created-1\nSingle Instance already created-1\nSingle Instance already created-1\nSingle Instance already created-1\nSingle Instance already created-1\nSingle Instance already created-1\nSingle Instance already created-2\nSingle Instance already created-2\nSingle Instance already created-2\nSingle Instance already created-2\nSingle Instance already created-2\nSingle Instance already created-2\nSingle Instance already created-2\nSingle Instance already created-1\nSingle Instance already created-1\nSingle Instance already created-1\nSingle Instance already created-2\nSingle Instance already created-1\nSingle Instance already created-1\nSingle Instance already created-1\nSingle Instance already created-1\nSingle Instance already created-1\nSingle Instance already created-1\nSingle Instance already created-1\nSingle Instance already created-1\nSingle Instance already created-1\n```", "```\nvar once sync.Once\n\ntype single struct {\n}\n\nvar singleInstance *single\n\nfunc getInstance() *single {\n    if singleInstance == nil {\n        once.Do(\n            func() {\n                fmt.Println(\"Creting Single Instance Now\")\n                singleInstance = &single{}\n            })\n    } else {\n        fmt.Println(\"Single Instance already created-2\")\n    }\n    return singleInstance\n}\n```", "```\nCreting Single Instance Now\nSingle Instance already created-2\nSingle Instance already created-2\n```"]