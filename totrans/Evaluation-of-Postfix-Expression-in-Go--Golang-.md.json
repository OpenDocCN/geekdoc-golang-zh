["```\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n    \"strconv\"\n)\n\ntype Stack []int\n\n//IsEmpty: check if stack is empty\nfunc (st *Stack) IsEmpty() bool {\n    return len(*st) == 0\n}\n\n//Push a new value onto the stack\nfunc (st *Stack) Push(data int) {\n    *st = append(*st, data) //Simply append the new value to the end of the stack\n    //fmt.Println(\"st after push\", st)\n}\n\n//Remove top element of stack. Return false if stack is empty.\nfunc (st *Stack) Pop() bool {\n    if st.IsEmpty() {\n        return false\n    } else {\n        index := len(*st) - 1 // Get the index of top most element.\n        *st = (*st)[:index]   // Remove it from the stack by slicing it off.\n        //fmt.Println(\"st after pops\", *st)\n        return true\n    }\n}\n\n//Return top element of stack. Return false if stack is empty.\nfunc (st *Stack) Top() int {\n    if st.IsEmpty() {\n        return 0\n    } else {\n        index := len(*st) - 1   // Get the index of top most element.\n        element := (*st)[index] // Index onto the slice and obtain the element.\n        return element\n    }\n}\n\n//function to evaluate postfix expression\nfunc evaluationPostfix(postfix string) int {\n    var intStack Stack\n    for _, char := range postfix {\n        opchar := string(char)\n        //fmt.Println(opchar)\n        if opchar >= \"0\" && opchar <= \"9\" {\n            i1, _ := strconv.Atoi(opchar)\n            //fmt.Println(\"Integer value is: \", i1)\n            intStack.Push(i1)\n            //fmt.Println(intStack)\n        } else {\n            opr1 := intStack.Top()\n            intStack.Pop()\n            opr2 := intStack.Top()\n            intStack.Pop()\n            switch char {\n            case '^':\n                x := math.Pow(float64(opr2), float64(opr1))\n                intStack.Push(int(x))\n            case '+':\n                intStack.Push(opr2 + opr1)\n\n            case '-':\n                intStack.Push(opr2 - opr1)\n\n            case '*':\n                intStack.Push(opr2 * opr1)\n\n            case '/':\n                intStack.Push(opr2 / opr1)\n\n            }\n\n        }\n    }\n    return intStack.Top()\n}\n\nfunc main() {\n    postfix := \"2323^5-212*+^*+4-\"\n    evaluationReslt := evaluationPostfix(postfix)\n    fmt.Printf(\"evaluation of %s is %d\", postfix, evaluationReslt)\n}\n```", "```\n2+3*(2^3-5)^(2+1*2)-4 infix has 2323^5-212*+^*+4- postfix\n```"]