["```\npackage main\n\nimport \"fmt\"\n\ntype node struct {\n\tdata string\n\tprev *node\n\tnext *node\n}\n\ntype doublyLinkedList struct {\n\tlen  int\n\ttail *node\n\thead *node\n}\n\nfunc initDoublyList() *doublyLinkedList {\n\treturn &doublyLinkedList{}\n}\n\nfunc (d *doublyLinkedList) AddFrontNodeDLL(data string) {\n\tnewNode := &node{\n\t\tdata: data,\n\t}\n\tif d.head == nil {\n\t\td.head = newNode\n\t\td.tail = newNode\n\t} else {\n\t\tnewNode.next = d.head\n\t\td.head.prev = newNode\n\t\td.head = newNode\n\t}\n\td.len++\n\treturn\n}\n\nfunc (d *doublyLinkedList) AddEndNodeDLL(data string) {\n\tnewNode := &node{\n\t\tdata: data,\n\t}\n\tif d.head == nil {\n\t\td.head = newNode\n\t\td.tail = newNode\n\t} else {\n\t\tcurrentNode := d.head\n\t\tfor currentNode.next != nil {\n\t\t\tcurrentNode = currentNode.next\n\t\t}\n\t\tnewNode.prev = currentNode\n\t\tcurrentNode.next = newNode\n\t\td.tail = newNode\n\t}\n\td.len++\n\treturn\n}\nfunc (d *doublyLinkedList) TraverseForward() error {\n\tif d.head == nil {\n\t\treturn fmt.Errorf(\"TraverseError: List is empty\")\n\t}\n\ttemp := d.head\n\tfor temp != nil {\n\t\tfmt.Printf(\"value = %v, prev = %v, next = %v\\n\", temp.data, temp.prev, temp.next)\n\t\ttemp = temp.next\n\t}\n\tfmt.Println()\n\treturn nil\n}\n\nfunc (d *doublyLinkedList) TraverseReverse() error {\n\tif d.head == nil {\n\t\treturn fmt.Errorf(\"TraverseError: List is empty\")\n\t}\n\ttemp := d.tail\n\tfor temp != nil {\n\t\tfmt.Printf(\"value = %v, prev = %v, next = %v\\n\", temp.data, temp.prev, temp.next)\n\t\ttemp = temp.prev\n\t}\n\tfmt.Println()\n\treturn nil\n}\n\nfunc (d *doublyLinkedList) Size() int {\n\treturn d.len\n}\nfunc main() {\n\tdoublyList := initDoublyList()\n\tfmt.Printf(\"Add Front Node: C\\n\")\n\tdoublyList.AddFrontNodeDLL(\"C\")\n\tfmt.Printf(\"Add Front Node: B\\n\")\n\tdoublyList.AddFrontNodeDLL(\"B\")\n\tfmt.Printf(\"Add Front Node: A\\n\")\n\tdoublyList.AddFrontNodeDLL(\"A\")\n\tfmt.Printf(\"Add End Node: D\\n\")\n\tdoublyList.AddEndNodeDLL(\"D\")\n\tfmt.Printf(\"Add End Node: E\\n\")\n\tdoublyList.AddEndNodeDLL(\"E\")\n\n\tfmt.Printf(\"Size of doubly linked ist: %d\\n\", doublyList.Size())\n\n\terr := doublyList.TraverseForward()\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n\n\terr = doublyList.TraverseReverse()\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n}\n```", "```\nAdd Front Node: C\nAdd Front Node: B\nAdd Front Node: A\nAdd End Node: D\nAdd End Node: E\nSize of doubly linked ist: 5\nvalue = A, prev = <nil>, next = &{B 0xc000070060 0xc000070020}\nvalue = B, prev = &{A <nil> 0xc000070040}, next = &{C 0xc000070040 0xc000070080}\nvalue = C, prev = &{B 0xc000070060 0xc000070020}, next = &{D 0xc000070020 0xc0000700a0}\nvalue = D, prev = &{C 0xc000070040 0xc000070080}, next = &{E 0xc000070080 <nil>}\nvalue = E, prev = &{D 0xc000070020 0xc0000700a0}, next = <nil>\n\nvalue = E, prev = &{D 0xc000070020 0xc0000700a0}, next = <nil>\nvalue = D, prev = &{C 0xc000070040 0xc000070080}, next = &{E 0xc000070080 <nil>}\nvalue = C, prev = &{B 0xc000070060 0xc000070020}, next = &{D 0xc000070020 0xc0000700a0}\nvalue = B, prev = &{A <nil> 0xc000070040}, next = &{C 0xc000070040 0xc000070080}\nvalue = A, prev = <nil>, next = &{B 0xc000070060 0xc000070020}</nil></nil></nil></nil></nil></nil></nil></nil>\n```"]