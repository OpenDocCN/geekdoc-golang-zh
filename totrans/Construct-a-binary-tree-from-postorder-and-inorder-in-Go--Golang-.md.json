["```\n[1,2,4,3,5,6]\n```", "```\n[4,2,1,5,3,6]\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype TreeNode struct {\n\tVal   int\n\tLeft  *TreeNode\n\tRight *TreeNode\n}\n\nfunc buildTree(inorder []int, postorder []int) *TreeNode {\n\tlenTree := len(inorder)\n\n\tindex := lenTree - 1\n\treturn buildTreeUtil(inorder, postorder, &index, 0, lenTree-1)\n}\n\nfunc buildTreeUtil(inorder []int, postorder []int, index *int, low, high int) *TreeNode {\n\tif low > high {\n\t\treturn nil\n\t}\n\tif low == high {\n\t\tcurrentIndexValue := postorder[*index]\n\t\t(*index)--\n\t\treturn &TreeNode{Val: currentIndexValue}\n\t}\n\n\tcurrentIndexValue := postorder[*index]\n\t(*index)--\n\n\troot := &TreeNode{Val: currentIndexValue}\n\n\tmid := 0\n\tfor i := low; i <= high; i++ {\n\t\tif inorder[i] == currentIndexValue {\n\t\t\tmid = i\n\t\t}\n\t}\n\n\troot.Right = buildTreeUtil(inorder, postorder, index, mid+1, high)\n\troot.Left = buildTreeUtil(inorder, postorder, index, low, mid-1)\n\treturn root\n\n}\n\nfunc main() {\n\tinorder := []int{4, 2, 1, 5, 3, 6}\n\tpostorder := []int{4, 2, 5, 6, 3, 1}\n\n\troot := buildTree(inorder, postorder)\n\tfmt.Printf(\"root: %d\\n\", root.Val)\n\tfmt.Printf(\"root.Left: %d\\n\", root.Left.Val)\n\tfmt.Printf(\"root.Left.Left: %d\\n\", root.Left.Left.Val)\n\tfmt.Printf(\"root.Right: %d\\n\", root.Right.Val)\n\tfmt.Printf(\"root.Right.Left: %d\\n\", root.Right.Left.Val)\n\tfmt.Printf(\"root.Right.Right: %d\\n\", root.Right.Right.Val)\n} \n```", "```\nroot: 1\nroot.Left: 2\nroot.Left.Left: 4\nroot.Right: 3\nroot.Right.Left: 5\nroot.Right.Right: 6\n```"]