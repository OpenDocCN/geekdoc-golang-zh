- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:34:16'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:34:16
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: How to intialize a struct that has another nested struct in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在Go（Golang）中初始化一个包含嵌套结构体的结构体
- en: 来源：[https://golangbyexample.com/struct-init-nested-struct-go/](https://golangbyexample.com/struct-init-nested-struct-go/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/struct-init-nested-struct-go/](https://golangbyexample.com/struct-init-nested-struct-go/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *# **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *# **概述**'
- en: A struct can have another struct nested in it. Let’s see an example of a nested
    struct. In below example **employee** struct has the **address** struct nested
    it in.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一个结构体可以嵌套另一个结构体。让我们来看一个嵌套结构体的示例。在下面的示例中，**员工**结构体嵌套了**地址**结构体。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To initialize such kind of struct we need to initialize the nested struct first.
    That is first we will initialize the **address** struct. For eg as below
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要初始化这种结构体，我们需要先初始化嵌套结构体。也就是说，我们首先要初始化**地址**结构体。例如如下所示
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Then we can initialize the **employee** struct as below
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以如下初始化**员工**结构体
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Another way is to directly initialize the address struct during the initialization
    of the employee struct. Like as below
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是在员工结构体初始化时直接初始化地址结构体。如下所示
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Program**'
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**程序**'
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Output**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
