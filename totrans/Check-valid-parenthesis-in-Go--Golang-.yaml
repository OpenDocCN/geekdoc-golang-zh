- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:42:49'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Check valid parenthesis in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/valid-parenthesis-golang/](https://golangbyexample.com/valid-parenthesis-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Program](#Program "Program")*  *## **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is an input string that only contains below characters
  prefs: []
  type: TYPE_NORMAL
- en: (
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '['
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ']'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The objective is to check if the input string has valid parentheses. A parenthesis
    is valid if**'
  prefs: []
  type: TYPE_NORMAL
- en: '***   Open parentheses should be closed in the same order. Meaning that the
    below will be invalid as parentheses are not closed in right order'
  prefs: []
  type: TYPE_NORMAL
- en: ([)]
  prefs: []
  type: TYPE_NORMAL
- en: Every open parenthesis should have the corresponding close parentheses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Valid parentheses example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Invalid parentheses example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Program**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Idea is to use a stack
  prefs: []
  type: TYPE_NORMAL
- en: If the given parentheses is a left parenthesis we push it to the stack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the given parentheses is right parentheses we pop from the stack and we check
    that the popped left parentheses is corresponding to the current right parentheses.
    For eg if the if we encounter **‘]’** in the string we pop and check if the popped
    value is **‘[‘** only. If it is not we return false. Same for **‘)’** and **‘}’**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of the string, the stack should be empty
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Below is the program for the same.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  prefs: []
  type: TYPE_NORMAL
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you –[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
