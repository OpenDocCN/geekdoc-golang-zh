- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:27:39'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Constant in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/constant-golang/](https://golangbyexample.com/constant-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is the  chapter 9 of the golang comprehensive tutorial series. Refer to
    this link for other chapters of the series – [Golang Comprehensive Tutorial Series](https://golangbyexample.com/golang-comprehensive-tutorial/)
  prefs: []
  type: TYPE_NORMAL
- en: '**Next Tutorial** – [For Loop](https://golangbyexample.com/for-loop-in-golang/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous Tutorial** –[Functions](https://golangbyexample.com/function-golang-complete-guide/)'
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s check out the current tutorial. Below is the table of contents for
    current tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Important Points](#Important_Points "Important Points")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Typed and Untyped Constants](#Typed_and_Untyped_Constants "Typed and Untyped
    Constants")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Typed Constant](#Typed_Constant "Typed Constant")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Untyped Constant](#Untyped_Constant "Untyped Constant")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Naming Conventions](#Naming_Conventions "Naming Conventions")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Global Constant](#Global_Constant "Global Constant")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Types of Constants](#Types_of_Constants "Types of Constants")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[String Constant](#String_Constant "String Constant")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Numeric Constant](#Numeric_Constant "Numeric Constant")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Boolean Constant](#Boolean_Constant "Boolean Constant")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Character Constant](#Character_Constant "Character Constant")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](#Conclusion "Conclusion")*  *# **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A constant is anything that doesn’t change its value. In Go const can be either
    of type string, numeric, boolean, and characters.
  prefs: []
  type: TYPE_NORMAL
- en: A constant can be declared using the **const** keyword. A important point to
    be noted is that the value has to be assigned while declaring a constant. It is
    unlike variables where value can be assigned later.
  prefs: []
  type: TYPE_NORMAL
- en: Declaring a **const** along with specifying the type – It starts with a **const**
    keyword, followed by the name and then the type. Value must also be assigned right
    away at discussed above
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Declaring a const without specifying type – A const declared without type is
    an untyped constant. We will learn more about typed and untyped constant later
    on. For now, its important to know that const declared without type has a default
    hidden type. The constant will be given a type once it is assigned to a variable
    in any way (direct initialisation, passing to a function etc).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Declaring multiple const together.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Important Points**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Constant Variable Cannot be reassigned after its declaration. For example below
    code will raise a compilation error
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Error:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: const value must be known at compile time. Hence a const value cannot be assigned
    to a function call which is evaluated at run time. As in below program a is a
    const and its value should be available at compile time but function **getValue**
    will only be called at run time hence it raises an error during compilation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Error:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: A constant declared within an inner having a same name as constant declared
    in the outer scope will shadow the constant in outer scope.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Typed and Untyped Constants**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now coming to very important topic. In go constant are treated in a different
    way than any other language. GO has a very strong type system that doesn’t allow
    implicit conversion between any of the types. Even with the same numeric types
    no operation is allowed without explicit conversion. For eg you cannot add a **int32**
    and **int64** value. To add those either **int32** has to be explicitly converted
    to **int64** or vice versa. However untyped constant have the flexibility of temporary
    escape from the GO’s type system as we will see in this article
  prefs: []
  type: TYPE_NORMAL
- en: '**Typed Constant**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A const declared specifying the type in the declaration is a typed constant.
    For example below we are declaring a const of type int32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This const a can only be assigned to a variable of type int32\. If you assign
    it to a variable of any other type it will raise an error . For the illustration
    see below program.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Untyped Constant**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An untyped constant is a constant whose type has not been specified. A untyped
    constant in GO can be either named or unnamed. In both cases it doesn’t have any
    type associated with it.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of unnamed untyped constant.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Examples of named untyped constant
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Untyped constant  does have a default hidden type. For example below table illustrates
    hidden default types for numerics, strings, characters and boolean
  prefs: []
  type: TYPE_NORMAL
- en: Default Hidden type for Constants
  prefs: []
  type: TYPE_NORMAL
- en: '| Integers | int |'
  prefs: []
  type: TYPE_TB
- en: '| Floats | float64 |'
  prefs: []
  type: TYPE_TB
- en: '| Complex Numbers | complex128 |'
  prefs: []
  type: TYPE_TB
- en: '| Strings | string |'
  prefs: []
  type: TYPE_TB
- en: '| Booleans | bool |'
  prefs: []
  type: TYPE_TB
- en: '| Characters | int32 or rune |'
  prefs: []
  type: TYPE_TB
- en: When you print any untyped constant using **fmt.Printf** it will print the default
    hidden type. See below program and output for both unnamed and named  untyped
    constant.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The above program prints **int32** instead of rune as rune is an alias for **int32**
  prefs: []
  type: TYPE_NORMAL
- en: The default type of a named or unnamed constant type will become type of a variable
    they are assigned to . For example in below code variable **a** will get its 
    type from  the default type of unnamed constant **123** which is **int**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Let’s see a program illustrating above points for all unnamed type constant
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now the question which comes to the mind is what is the use of untyped constant. 
    The use of untyped constant is that the type of the constant will be decided depending
    upon the type of variable they are being assigned to.  Sounds confusing? Let’s
    see with an example.
  prefs: []
  type: TYPE_NORMAL
- en: '**Pi** constant value in math package is declared as below.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the type is not specified it only has a hidden default type (which
    is **float64** here).  Let’s see a code
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Notice the above program.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the untyped nature of **math.Pi** constant it can be assigned to a variable
    of type **float32** as well as **float64**. This is otherwise not possible in
    GO after type is fixed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we print the type of **math.Pi** , it prints the default type which is
    **float64**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending upon use case an untyped constant can be assigned to a low precision
    type (float32) or a high precision type(float64)
  prefs: []
  type: TYPE_NORMAL
- en: '**Naming Conventions**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Naming conventions for constant is the same as naming conventions for variables.
  prefs: []
  type: TYPE_NORMAL
- en: A constant name can only start with a letter or an underscore. It can be followed
    by any number of letters, numbers or underscores after that
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Global Constant**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like any other variable, a constant will be global within a package if it is
    declared at the top of a file outside the scope of any function. For example,
    in the below program name will be a global constant available throughout the **main**
    package in any function. Do note that the const name will not be available outside
    the main package. For it to be available outside the main package it has to start
    with a capital letter.
  prefs: []
  type: TYPE_NORMAL
- en: See the below code. It also shows the example of a local constant within a package.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Types of Constants**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Constant can be of four types:'
  prefs: []
  type: TYPE_NORMAL
- en: Numeric
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Character
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boolean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**String Constant**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In go string constant is represented in two ways
  prefs: []
  type: TYPE_NORMAL
- en: Any value that is enclosed between double quotes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any value enclosed between back quotes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Below program shows a example of a
  prefs: []
  type: TYPE_NORMAL
- en: Typed string constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Untyped unnamed string constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Untyped named string constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In the above program, we created a new type **myString** in code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Also above program shows the example of
  prefs: []
  type: TYPE_NORMAL
- en: Typed string constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Untyped unnamed string constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Untyped named string constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s understand each of them and their behaviour
  prefs: []
  type: TYPE_NORMAL
- en: '**Typed string constant**'
  prefs: []
  type: TYPE_NORMAL
- en: It is defined as below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Notice in above that below line will cause a compilation error. This is because
    of typed string constant **aa** is of type **string**. So below line will cause
    compilation error as it cannot be assigned to variable of type **myString**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: But typed string constant can be assigned to a variable created with **var**
    keyword like below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '**Untyped named string constant**'
  prefs: []
  type: TYPE_NORMAL
- en: It is defined as below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Untyped named string constant can be assigned to variable of type **myString**
    as well variable created with **var** keyword because it is untyped so type of
    the constant will be decided depending upon the type of variable they are being
    assigned to.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '**Untyped unnamed string constant**.'
  prefs: []
  type: TYPE_NORMAL
- en: It is like below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Untyped unnamed string constant can be assigned to variable of type **myString**
    as well variable created with **var** keyword because it is untyped so type of
    the constant will be decided depending upon the type of variable they are being
    assigned to.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '**Numeric Constant**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Numeric constant are further divided into three types
  prefs: []
  type: TYPE_NORMAL
- en: Integer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Floats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complex Numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A untyped integer constant (both named and unnamed) can be assigned to **int**
    types, **float** types and **complex** . This is because an int value can be int
    or float or complex. For eg int value **123** can be
  prefs: []
  type: TYPE_NORMAL
- en: A **int** whose value is 123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **float** whose value is 123.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **complex** whose imaginary part is 0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the basis of similar logic an untyped **float** constant can be assigned
    to all **floats** and **complex** types but not **integer** because for eg a float
    5.3 cannot be an integer.
  prefs: []
  type: TYPE_NORMAL
- en: On the basis of similar logic, an untyped **complex** constant can be assigned
    to  **complex** types but not **integer** and **float** because for eg a float
    5i+3 cannot be an **integer** or a **float**
  prefs: []
  type: TYPE_NORMAL
- en: See below program illustrating the above point. In the program we have example
    for
  prefs: []
  type: TYPE_NORMAL
- en: Typed integer constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Untyped unnamed integer constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Untyped named integer constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Now above program shows example of a
  prefs: []
  type: TYPE_NORMAL
- en: Typed integer constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Untyped unnamed integer constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Untyped named integer constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s understand each of them and their behavior
  prefs: []
  type: TYPE_NORMAL
- en: '**Typed integer constant**'
  prefs: []
  type: TYPE_NORMAL
- en: It is defined as below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Typed integer constant can be assigned to a variable created with **var** keyword
    like below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: It will raise compilation error when assigned to another **int** type. So below
    raises compilation error as **aa** variable is already of type **int**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '**Untyped named integer constant**'
  prefs: []
  type: TYPE_NORMAL
- en: It is defined as below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Untyped named integer constant can be assigned to any **int** type, any **float**
    type and any **complex** number type and also to any variable created with **var**
    keyword. So below works
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '**Untyped unnamed integer constant**'
  prefs: []
  type: TYPE_NORMAL
- en: It is as below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Untyped named integer constant can be assigned to any **int** type, any **float**
    type and any **complex** number type and also to any variable created with **var**
    keyword. So below works
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '**Numeric Expressions**'
  prefs: []
  type: TYPE_NORMAL
- en: Due to untyped nature of constant numeric constants, different numeric constant
    type can be mixed and matched up to form a expression
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '**Boolean Constant**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two untyped boolean constant **true** and **false**.  Below is the
    program illustrating a boolean constant.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: In the above program, we created a new type **myBool**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Also above program shows the example of
  prefs: []
  type: TYPE_NORMAL
- en: Typed boolean constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Untyped unnamed boolean constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Untyped named boolean constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s understand each of them and their behaviour
  prefs: []
  type: TYPE_NORMAL
- en: '**Typed boolean constant**'
  prefs: []
  type: TYPE_NORMAL
- en: It is defined as below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Notice in above that below line will cause a compilation error. This is because
    variable **aa** is of typed **boolean** constant . So below line will cause compilation
    error as it cannot be assigned to variable of type **myBool**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: But typed string constant can be assigned to a variable created with **var**
    keyword like below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '**Untyped named boolean constant**'
  prefs: []
  type: TYPE_NORMAL
- en: It is defined as below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Untyped named string constant can be assigned to variable of type **myBool**
    as well variable created with **var** keyword because it is untyped so type of
    the constant will be decided depending upon the type of variable they are being
    assigned to.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '**Untyped unnamed boolean constant**'
  prefs: []
  type: TYPE_NORMAL
- en: It is like below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Untyped unnamed string constant can be assigned to variable of type **myBool**
    as well variable created with **var** keyword because it is untyped so type of
    the constant will be decided depending upon the type of variable they are being
    assigned to.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '**Character Constant**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is the program illustrating a character constant.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: In the above program, we created a new type **myChar**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Also above program shows the example of
  prefs: []
  type: TYPE_NORMAL
- en: Typed character constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Untyped unnamed character constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Untyped named character constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s understand each of them and their behaviour
  prefs: []
  type: TYPE_NORMAL
- en: '**Typed character constant**'
  prefs: []
  type: TYPE_NORMAL
- en: It is defined as below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Notice in above that below line will cause a compilation error. This is because
    variable **aa** is of type **int32**. So below line will cause compilation error
    as it cannot be assigned to variable of type **myChar**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: But typed string constant can be assigned to a variable created with **var**
    keyword like below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '**Untyped named character constant**'
  prefs: []
  type: TYPE_NORMAL
- en: It is defined as below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Untyped named string constant  can be assigned to variable of type **myChar**
    as well variable created with **var** keyword because it is untyped so type of
    the constant will be decided depending upon the type of variable they are being
    assigned to.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '**Untyped unnamed character constant**.'
  prefs: []
  type: TYPE_NORMAL
- en: It is like below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Untyped unnamed string constant can be assigned to variable of type **myChar**
    as well variable created with **var** keyword because it is untyped so type of
    the constant will be decided depending upon the type of variable they are being
    assigned to.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '**Conclusion**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is all about const keyword in Golang. Hope you have liked this article.
    Do share feedback in comments.
  prefs: []
  type: TYPE_NORMAL
- en: '**Next Tutorial** – [For Loop](https://golangbyexample.com/for-loop-in-golang/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Previous Tutorial** –[Functions](https://golangbyexample.com/function-golang-complete-guide/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
