- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:42:04'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:42:04
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Longest Palindromic Substring within a string in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go语言中的字符串最长回文子串
- en: 来源：[https://golangbyexample.com/longest-palindromic-substring-go/](https://golangbyexample.com/longest-palindromic-substring-go/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/longest-palindromic-substring-go/](https://golangbyexample.com/longest-palindromic-substring-go/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *## **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *## **概述**'
- en: The objective is to find the largest palindromic substring within a string.
    For eg let’s say the input string is
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是在字符串中找到最大的回文子串。例如，假设输入字符串为
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The output should be **aba** which is the largest palindromic substring.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该是**aba**，它是最大的回文子串。
- en: We will use Dynamic Programming to solve this problem. We will use two matrices.
    Each matrix will be of the size **len*len** where **len** is the size of the input
    string
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用动态编程来解决这个问题。我们将使用两个矩阵。每个矩阵的大小为**len*len**，其中**len**是输入字符串的大小。
- en: The first matrix will store whether the substring between index **“i”** and
    **“j”** is palindrome or not.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个矩阵将存储索引**“i”**和**“j”**之间的子串是否为回文。
- en: The second matrix will store the longest palindromic substring between **“i”**
    and **“j”.**
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个矩阵将存储**“i”**和**“j”**之间的最长回文子串。
- en: Below is the optimal substructure
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最优子结构。
- en: If **string[i] == string[j]** and substring in **i+1** and **j-1** is a palidrome,
    then
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果**string[i] == string[j]**且**i+1**到**j-1**的子串是回文，则
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If **string[i] != string[j]** then
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果**string[i] != string[j]**，那么
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Program**'
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Below is the program for the same
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相应的程序。
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Output**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE4]*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE4]*'
