["```\nimport \"net/http\"\n```", "```\nfunc(ResponseWriter, *Request)\n```", "```\ntype Handler interface {\n   ServeHTTP(ResponseWriter, *Request)\n}\n```", "```\nfunc(ResponseWriter, *Request)\n```", "```\ntype Handler interface {\n   ServeHTTP(ResponseWriter, *Request)\n}\n```", "```\nfunc(ResponseWriter, *Request)\n```", "```\nmux := http.NewServeMux()\n```", "```\nmux.HandleFunc(pattern, handlerFunc)\n```", "```\nmux.Handle(pattern, handler)\n```", "```\ns := &http.Server{\n  Addr:    \":8080\",\n  Handler: mux,\n}\n```", "```\n{ip_address}:{port}\n```", "```\npackage main\n\nimport (\n\t\"net/http\"\n)\n\nfunc main() {\n\n\t//Create the default mux\n\tmux := http.NewServeMux()\n\n\t//Handling the /v1/teachers. The handler is a function here\n\tmux.HandleFunc(\"/v1/teachers\", teacherHandler)\n\n\t//Handling the /v1/students. The handler is a type implementing the Handler interface here\n\tsHandler := studentHandler{}\n\tmux.Handle(\"/v1/students\", sHandler)\n\n\t//Create the server. \n\ts := &http.Server{\n\t\tAddr:    \":8080\",\n\t\tHandler: mux,\n\t}\n\ts.ListenAndServe()\n\n}\n\nfunc teacherHandler(res http.ResponseWriter, req *http.Request) {\n\tdata := []byte(\"V1 of teacher's called\")\n\tres.WriteHeader(200)\n\tres.Write(data)\n}\n\ntype studentHandler struct{}\n\nfunc (h studentHandler) ServeHTTP(res http.ResponseWriter, req *http.Request) {\n\tdata := []byte(\"V1 of student's called\")\n\tres.WriteHeader(200)\n\tres.Write(data)\n}\n```", "```\nfunc teacherHandler(res http.ResponseWriter, req *http.Request) {\n\tdata := []byte(\"V1 of teacher's called\")\n\tres.Header().Set(\"Content-Type\", \"application/text\")\n\tres.WriteHeader(200)\n\tres.Write(data)\n}\n```", "```\ntype studentHandler struct{}\n\nfunc (h studentHandler) ServeHTTP(res http.ResponseWriter, req *http.Request) {\n\tdata := []byte(\"V1 of student's called\")\n\tres.Header().Set(\"Content-Type\", \"application/text\")\n\tres.WriteHeader(200)\n\tres.Write(data)\n}\n```", "```\nmux := http.NewServeMux()\n```", "```\nmux.HandleFunc(\"/v1/teachers\", teacherHandler)\n```", "```\nsHandler := studentHandler{}\nmux.Handle(\"/v1/students\", sHandler)\n```", "```\ns := &http.Server{\n\t\tAddr:    \":8080\",\n\t\tHandler: mux,\n\t}\ns.ListenAndServe()\n```", "```\ngo run main.go\n```", "```\ncurl -v -X GET http://localhost:8080/v1/teachers\nNote: Unnecessary use of -X or --request, GET is already inferred.\n*   Trying ::1...\n* TCP_NODELAY set\n* Connected to localhost (::1) port 8080 (#0)\n> GET /v1/teachers HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.54.0\n> Accept: */*\n> \n< HTTP/1.1 200 OK\n< Content-Type: application/text\n< Date: Sat, 11 Jul 2020 16:03:33 GMT\n< Content-Length: 22\n< \n* Connection #0 to host localhost left intact\nV1 of teacher's called\n```", "```\ncurl -v -X GET http://localhost:8080/v1/students\nNote: Unnecessary use of -X or --request, GET is already inferred.\n*   Trying ::1...\n* TCP_NODELAY set\n* Connected to localhost (::1) port 8080 (#0)\n> GET /v1/students HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.54.0\n> Accept: */*\n> \n< HTTP/1.1 200 OK\n< Content-Type: application/text\n< Date: Sat, 11 Jul 2020 16:04:27 GMT\n< Content-Length: 22\n< \n* Connection #0 to host localhost left intact\nV1 of student's called\n```", "```\nfunc ListenAndServe(addr string, handler Handler) error\n```", "```\nhttp.ListenAndServe(:8080, nil)\n```", "```\nhttp.ListenAndServe(:8080, nil)\n```", "```\npackage main\n\nimport (\n\t\"net/http\"\n)\n\nfunc main() {\n\n\t//Handling the /v1/teachers\n\thttp.HandleFunc(\"/v1/teachers\", teacherHandler)\n\n\t//Handling the /v1/students\n\tsHandler := studentHandler{}\n\thttp.Handle(\"/v1/students\", sHandler)\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\nfunc teacherHandler(res http.ResponseWriter, req *http.Request) {\n\tdata := []byte(\"V1 of teacher's called\")\n\tres.WriteHeader(200)\n\tres.Write(data)\n}\n\ntype studentHandler struct{}\n\nfunc (h studentHandler) ServeHTTP(res http.ResponseWriter, req *http.Request) {\n\tdata := []byte(\"V1 of student's called\")\n\tres.WriteHeader(200)\n\tres.Write(data)\n}\n```", "```\ngo run main.go\n```"]