["```\ntype Cookie struct {\n\tName  string\n\tValue string\n\n\tPath       string    // optional\n\tDomain     string    // optional\n\tExpires    time.Time // optional\n\tRawExpires string    // for reading cookies only\n\n\t// MaxAge=0 means no 'Max-Age' attribute specified.\n\t// MaxAge<0 means delete cookie now, equivalently 'Max-Age: 0'\n\t// MaxAge>0 means Max-Age attribute present and given in seconds\n\tMaxAge   int\n\tSecure   bool\n\tHttpOnly bool\n\tSameSite SameSite\n\tRaw      string\n\tUnparsed []string // Raw text of unparsed attribute-value pairs\n}\n```", "```\npackage main\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"net/http/cookiejar\"\n)\nvar client http.Client\nfunc init() {\n    jar, err := cookiejar.New(nil)\n    if err != nil {\n        log.Fatalf(\"Got error while creating cookie jar %s\", err.Error())\n    }\n    client = http.Client{\n        Jar: jar,\n    }\n}\nfunc main() {\n    cookie := &http.Cookie{\n        Name:   \"token\",\n        Value:  \"some_token\",\n        MaxAge: 300,\n    }\n    cookie2 := &http.Cookie{\n        Name:   \"clicked\",\n        Value:  \"true\",\n        MaxAge: 300,\n    }\n    req, err := http.NewRequest(\"GET\", \"http://google.com\", nil)\n    if err != nil {\n        log.Fatalf(\"Got error %s\", err.Error())\n    }\n    req.AddCookie(cookie)\n    req.AddCookie(cookie2)\n    for _, c := range req.Cookies() {\n        fmt.Println(c)\n    }\n    resp, err := client.Do(req)\n    if err != nil {\n        log.Fatalf(\"Error occured. Error is: %s\", err.Error())\n    }\n    defer resp.Body.Close()\n    fmt.Printf(\"StatusCode: %d\\n\", resp.StatusCode)\n}\n```", "```\ntoken=some_token\nclicked=true\nStatusCode: 200\n```", "```\nfunc SetCookie(w ResponseWriter, cookie *Cookie)\n```", "```\npackage main\nimport (\n    \"net/http\"\n)\nfunc main() {\n    docHandler := http.HandlerFunc(docHandler)\n    http.Handle(\"/doc\", docHandler)\n    http.ListenAndServe(\":8080\", nil)\n}\nfunc docHandler(w http.ResponseWriter, r *http.Request) {\n    cookie := &http.Cookie{\n        Name:   \"id\",\n        Value:  \"abcd\",\n        MaxAge: 300,\n    }\n    http.SetCookie(w, cookie)\n    w.WriteHeader(200)\n    w.Write([]byte(\"Doc Get Successful\"))\n    return\n}\n```", "```\ngo run main.go\n```", "```\nSet-Cookie: id=abcd; Max-Age=300\n```", "```\nfunc (r *Request) Cookie(name string) (*Cookie, error)\n```", "```\nfor _, c := range r.Cookies() {\n     fmt.Println(c)\n}\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tdocHandler := http.HandlerFunc(docHandler)\n\thttp.Handle(\"/doc\", docHandler)\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n\nfunc docHandler(w http.ResponseWriter, r *http.Request) {\n\tfmt.Println(\"Cookies in API Call:\")\n\n\ttokenCookie, err := r.Cookie(\"token\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Error occured while reading cookie\")\n\t}\n\tfmt.Println(\"\\nPrinting cookie with name as token\")\n\tfmt.Println(tokenCookie)\n\n\tfmt.Println(\"\\nPrinting all cookies\")\n\tfor _, c := range r.Cookies() {\n\t\tfmt.Println(c)\n\t}\n\tfmt.Println()\n\tw.WriteHeader(200)\n\tw.Write([]byte(\"Doc Get Successful\"))\n\treturn\n}\n```", "```\ncurl -X GET localhost:8080/doc --cookie \"id=abcd; token=some_token\"\n```", "```\nCookies in API Call:\n\nPrinting cookie with name as token\ntoken=some_token\n\nPrinting all cookies\nid=abcd\ntoken=some_token\n```", "```\ntokenCookie, err := r.Cookie(\"token\")\n```", "```\ntoken=some_token\n```", "```\nfor _, c := range r.Cookies() {\n     fmt.Println(c)\n}\n```", "```\nid=abcd\ntoken=some_token\n```"]