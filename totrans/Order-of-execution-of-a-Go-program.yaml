- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:30:21'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Order of execution of a Go program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/order-execution-program-golang/](https://golangbyexample.com/order-execution-program-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Example](#Example "Example")*  *# **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Below the order of execution of a go program.
  prefs: []
  type: TYPE_NORMAL
- en: The program starts with the main package.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All imported packages in the source files of the main package is initialized.
    The same thing happens recursively for further imported packages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then global variables declaration in these packages is initialized. The initialization
    dependency kicks in for the initialization of these variables. [https://golang.org/ref/spec#Order_of_evaluation](https://golang.org/ref/spec#Order_of_evaluation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After this, init() function is run in these packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global variables in the main package are initialized
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: init function in the main package is run if present
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: main function in main package is run.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note here that package initialization is only done once even if it is imported
    several times.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if main package imports package **a** and in turn package **a**
    imports package **b**, then below will be the order
  prefs: []
  type: TYPE_NORMAL
- en: Global variables in package b will be initialized. init function in source files
    of package b will be run
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global variables in the package **a** will be initialized. init function in
    source files of the package **a** will be run
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global variables in main package will be initialized. init function in source
    files of main package will be run
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: main function will start executing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s see a program for the same.
  prefs: []
  type: TYPE_NORMAL
- en: '**go.mod**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**sample/b/b1.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**sample/b/b2.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**sample/a/a1.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**sample/a/a2.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**sample/main.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Notice in above example that init function in source files of package **b**
    are run first. Then init function in source files of package **a** is run and
    then init function in source file of main package is run. After that main function
    is run
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
