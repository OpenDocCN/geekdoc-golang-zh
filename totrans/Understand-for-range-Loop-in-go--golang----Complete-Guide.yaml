- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:18:22'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:18:22
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Understand for-range Loop in go (golang) – Complete Guide
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 go (golang) 中理解 for-range 循环 – 完整指南
- en: 来源：[https://golangbyexample.com/understand-for-range-loop-golang/](https://golangbyexample.com/understand-for-range-loop-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/understand-for-range-loop-golang/](https://golangbyexample.com/understand-for-range-loop-golang/)
- en: This is the  chapter 11 of the golang comprehensive tutorial series. Refer to
    this link for other chapters of the series – [Golang Comprehensive Tutorial Series](https://golangbyexample.com/golang-comprehensive-tutorial/)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 golang 综合教程系列的第 11 章。请参考此链接获取该系列的其他章节 – [Golang 综合教程系列](https://golangbyexample.com/golang-comprehensive-tutorial/)
- en: '**Next Tutorial** – [If Else](https://golangbyexample.com/understand-if-else-statement-golang/)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**下一个教程** – [如果-否则](https://golangbyexample.com/understand-if-else-statement-golang/)'
- en: '**Previous Tutorial** – [For Loop](https://golangbyexample.com/for-loop-in-golang/)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**上一个教程** – [for 循环](https://golangbyexample.com/for-loop-in-golang/)'
- en: Now let’s check out the current tutorial. Below is the table of contents for
    current tutorial.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们查看当前的教程。以下是当前教程的目录。
- en: '**Overview**'
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**概述**'
- en: 'When it comes to loop, golang has:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 说到循环，golang 有：
- en: for loop
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: for 循环
- en: for-range loop
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: for-range 循环
- en: We saw for loop in the last tutorial. In this tutorial, we will be learning
    about the **for-range** loop only.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一个教程中看到了 for 循环。在本教程中，我们将学习 **for-range** 循环。
- en: '**for-range** loop is used to iterate over different collection data structures
    in golang such as'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**for-range** 循环用于遍历 golang 中不同的集合数据结构，如'
- en: array or slice
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组或切片
- en: string
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: maps
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射
- en: channel
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通道
- en: Let’s see some examples now
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一些示例
- en: '**Examples**'
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**示例**'
- en: '**for-range loop for array/slice**'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**数组/切片的 for-range 循环**'
- en: Here is the format of **for-range** when used with array/slice
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 **for-range** 与数组/切片一起使用时的格式
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is how **for-range** loop works in case of array/slice. It iterates over
    the given array/slice starting from index zero and the body of the for range loop
    is executed for every value present at the index. Both index and value are optional
    in for-range when using with array/slice.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 **for-range** 循环在数组/切片情况下的工作方式。它从索引零开始遍历给定的数组/切片，并为每个存在于索引的值执行 for-range
    循环体。在与数组/切片一起使用时，for-range 中的索引和值都是可选的。
- en: The below example shows how to use a **for-range** loop for a slice
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例展示了如何对切片使用 **for-range** 循环
- en: With index and value
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带索引和值
- en: With value only
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅包含值
- en: With index only
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅带索引
- en: Without index and value
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无索引和值
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Output:**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**for-range loop with a string**'
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**带字符串的 for-range 循环**'
- en: In Golang string is a sequence of bytes. A string literal actually represents
    a UTF-8 sequence of bytes. In UTF-8, ASCII characters are single-byte corresponding
    to the first 128 Unicode characters. All other characters are between 1 -4 bytes.
    To understand it more consider the below string
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Golang 中，字符串是字节序列。字符串字面量实际上表示 UTF-8 字节序列。在 UTF-8 中，ASCII 字符是单字节的，对应前 128 个
    Unicode 字符。所有其他字符则在 1 - 4 字节之间。要更好地理解，请考虑下面的字符串
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In above string
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的字符串中
- en: ‘a’ takes one byte as per UTF-8
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘a’ 按照 UTF-8 占用一个字节
- en: ‘£’ takes two bytes as per UTF-8
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘£’ 按照 UTF-8 占用两个字节
- en: ‘b’ takes one byte as per UTF-8
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘b’ 按照 UTF-8 占用一个字节
- en: The above string has 1+2+1 = 4 bytes altogether. Therefore when we try to print
    the length of the string using the standard **len()** function it will output
    4 and not 3 as **len()** function returns the number of bytes in the string.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 上述字符串总共有 1+2+1 = 4 字节。因此，当我们尝试使用标准 **len()** 函数打印字符串的长度时，它将输出 4，而不是 3，因为 **len()**
    函数返回字符串中的字节数。
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Hence **standalone for** loop cannot be used to iterate over all characters
    of a string as it will iterate over bytes and not character. So below **for**
    loop will instead iterate four times and the print value corresponding to the
    byte present at that index.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，**独立的 for** 循环不能用于遍历字符串中的所有字符，因为它会遍历字节而不是字符。因此，下面的 **for** 循环将遍历四次，并打印出与该索引处的字节对应的值。
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It will output below string which is not same as **"a£c"** string
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 它将输出下面的字符串，与 **"a£c"** 字符串不同
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The above output is not what we want. This is where **for-range** loop comes
    into picture for a string. It iterates over the Unicode points( also referred
    to as rune in golang) in a string and will correctly output  a, £, b.  Here is
    the format when using **for-range** with string
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出不是我们想要的。这就是 **for-range** 循环在字符串中的应用。它遍历字符串中的 Unicode 点（在 golang 中也称为 rune），并正确输出
    a, £, b。以下是与字符串一起使用 **for-range** 的格式
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Some point to note before we move to a code example
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入代码示例之前需要注意的一些要点
- en: index is the starting point of the Unicode character in the string. For example
    in string "a£c" character "a" starts at index 0 , character "£" starts at index
    1 while character "b" starts at index 3.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引是字符串中Unicode字符的起始点。例如在字符串 "a£c" 中，字符 "a" 的起始索引为 0，字符 "£" 的起始索引为 1，而字符 "c"
    的起始索引为 2。
- en: value is the Unicode point or basically each character in the string instead
    of bytes. It is also called rune. A rune in golang represents a Unicode Code Point
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值是Unicode点，基本上是字符串中的每个字符，而不是字节。它也被称为rune。golang中的rune表示一个Unicode代码点。
- en: Both index and value are optional
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引和值都是可选的。
- en: Now let's see a code example
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一个代码示例。
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Output:**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**for-range loop with a map**'
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**带有映射的for-range循环**'
- en: In case of map **for-range** iterates over key and values of a map. Below is
    the format for **for-range** when using with a map
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在映射的情况下，**for-range** 遍历映射的键和值。以下是与映射一起使用时的 **for-range** 格式。
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: A point to be noted that both key and value are optional to be used while using
    **for-range** with maps. Let's see a simple code example
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在使用 **for-range** 与映射时，键和值都是可选的。我们来看一个简单的代码示例。
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Output**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**for-range loop with a channel**'
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**带有通道的for-range循环**'
- en: '**for-range** loop works differently too for a channel. For a channel, an index
    doesn''t make any sense as the channel is similar to a pipeline where values enter
    from one and exit from the other end.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**for-range** 循环在通道中也有不同的工作方式。对于通道，索引没有任何意义，因为通道类似于一个管道，值从一端进入，从另一端退出。'
- en: So in case of channel, the **for-range** loop will iterate over values currently
    present in the channel. After it has iterated over all the values currently present
    (if any), the **for-range** loop will not exit but instead wait for next value
    that might be pushed to the channel and it will exit only when the channel is
    closed
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 因此在通道的情况下，**for-range** 循环将遍历当前在通道中的值。在遍历完所有当前存在的值（如果有）后，**for-range** 循环不会退出，而是等待可能被推送到通道的下一个值，只有在通道关闭时才会退出。
- en: Below is the format when using **for-range** with channel
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **for-range** 与通道时的格式如下。
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Let's see a code example
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个代码示例。
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Output:**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Conclusion**'
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结论**'
- en: This is all about **for-range** loop in golang. Hope you like it. Please share
    feedback/improvements/mistakes in comments.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 golang 中 **for-range** 循环的全部内容。希望你喜欢它。请在评论中分享反馈/改进/错误。
- en: '**Next Tutorial** – [If Else](https://golangbyexample.com/understand-if-else-statement-golang/)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**下一个教程** – [如果否则](https://golangbyexample.com/understand-if-else-statement-golang/)'
- en: '**Previous Tutorial** – [For Loop](https://golangbyexample.com/for-loop-in-golang/)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**上一个教程** – [For 循环](https://golangbyexample.com/for-loop-in-golang/)'
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/) * [golang](https://golangbyexample.com/tag/golang/)'
