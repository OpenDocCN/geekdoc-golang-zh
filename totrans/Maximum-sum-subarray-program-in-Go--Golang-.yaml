- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:46:06'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:46:06
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Maximum sum subarray program in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 中的最大和子数组程序 (Golang)
- en: 来源：[https://golangbyexample.com/maximum-sum-subarray-golang/](https://golangbyexample.com/maximum-sum-subarray-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/maximum-sum-subarray-golang/](https://golangbyexample.com/maximum-sum-subarray-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *## **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *## **概述**'
- en: The objective is to find the maximum subarray in a given input array. The subarray
    should be contiguous and should contain at least one element
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是在给定的输入数组中找到最大子数组。子数组应是连续的，并且至少应包含一个元素。
- en: For example
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 例如
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Another example
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个示例
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We use the Kadane algorithm here. In the Kadane algorithm, we keep two variables
    **max** and **currentMax**
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用 Kadane 算法。在 Kadane 算法中，我们保持两个变量 **max** 和 **currentMax**。
- en: '**max** is initialized to IntMin and **currentMax** is initialized to zero'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**max** 初始化为 IntMin，**currentMax** 初始化为零。'
- en: Then we Loop for each element in the array
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们对数组中的每个元素进行循环。
- en: Set **currentMax** = **currentMax** + a[i]
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 **currentMax** = **currentMax** + a[i]。
- en: If **currentMax** > **max** then **max** is set to **currentMax**
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 **currentMax** > **max**，则将 **max** 设置为 **currentMax**。
- en: if **currentMax** is less than zero then **currentMax** is reset to zero
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 **currentMax** 小于零，则将 **currentMax** 重置为零。
- en: '**Program**'
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Here is the program for the same
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是相同的程序。
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 查看我们的 Golang 高级教程。本系列教程内容详尽，我们尝试用示例覆盖所有概念。本教程适合那些希望获得专业知识和扎实理解 Golang
    的人 - [Golang 高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)。'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you -[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解如何在 Golang 中实现所有设计模式。如果是，那么这篇文章适合你 - [所有设计模式 Golang](https://golangbyexample.com/all-design-patterns-golang/)。
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
