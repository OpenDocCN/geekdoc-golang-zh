["```\nfunc Is(err, target error) bool\n```", "```\npackage main\nimport (\n    \"errors\"\n    \"fmt\"\n)\ntype errorOne struct{}\nfunc (e errorOne) Error() string {\n    return \"Error One happended\"\n}\nfunc main() {\n    var err1 errorOne\n    err2 := do()\n    if err1 == err2 {\n        fmt.Println(\"Equality Operator: Both errors are equal\")\n    }\n    if errors.Is(err1, err2) {\n        fmt.Println(\"Is function: Both errors are equal\")\n    }\n}\nfunc do() error {\n    return errorOne{}\n}\n```", "```\nEquality Operator: Both errors are equal\nIs function: Both errors are equal\n```", "```\nerr1 == err2\n```", "```\nerrors.Is(err1, err2)\n```", "```\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n)\n\ntype errorOne struct{}\n\nfunc (e errorOne) Error() string {\n\treturn \"Error One happended\"\n}\n\nfunc main() {\n\terr1 := errorOne{}\n\n\terr2 := do()\n\n\tif err1 == err2 {\n\t\tfmt.Println(\"Equality Operator: Both errors are equal\")\n\t} else {\n\t\tfmt.Println(\"Equality Operator: Both errors are not equal\")\n\t}\n\n\tif errors.Is(err2, err1) {\n\t\tfmt.Println(\"Is function: Both errors are equal\")\n\t}\n}\n\nfunc do() error {\n\treturn fmt.Errorf(\"E2: %w\", errorOne{})\n}\n```", "```\nEquality Operator: Both errors are not equal\nIs function: Both errors are equal\n```", "```\nreturn fmt.Errorf(\"E2: %w\", errorOne{})\n```", "```\nEquality Operator: Both errors are not equal\n```", "```\nIs function: Both errors are equal\n```"]