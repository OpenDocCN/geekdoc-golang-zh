["```\nFirst String: abc\nSecond String: abcd\nOutput: 1\n```", "```\nFirst String: abc\nSecond String: ab\nOutput: 1\n```", "```\nFirst String: abc\nSecond String: abd\nOutput: 1\n```", "```\nFirst String: abce\nSecond String: abd\nOutput: 2\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\toutput := minDistance(\"abc\", \"abcd\")\n\tfmt.Println(output)\n\n\toutput = minDistance(\"abc\", \"ab\")\n\tfmt.Println(output)\n\n\toutput = minDistance(\"abc\", \"abd\")\n\tfmt.Println(output)\n\n\toutput = minDistance(\"abce\", \"abd\")\n\tfmt.Println(output)\n}\n\nfunc minDistance(word1 string, word2 string) int {\n\tword1Rune := []rune(word1)\n\tword2Rune := []rune(word2)\n\tlenWord1 := len(word1Rune)\n\tlenWord2 := len(word2Rune)\n\n\treturn minDistanceUtil(word1Rune, word2Rune, lenWord1, lenWord2)\n}\n\nfunc minDistanceUtil(word1 []rune, word2 []rune, lenWord1, lenWord2 int) int {\n\tif lenWord1 == 0 && lenWord2 == 0 {\n\t\treturn 0\n\t}\n\n\tif lenWord1 == 0 {\n\t\treturn lenWord2\n\t}\n\n\tif lenWord2 == 0 {\n\t\treturn lenWord1\n\t}\n\n\tif word1[lenWord1-1] == word2[lenWord2-1] {\n\t\treturn minDistanceUtil(word1, word2, lenWord1-1, lenWord2-1)\n\t} else {\n\t\tx := minDistanceUtil(word1, word2, lenWord1-1, lenWord2-1)\n\t\ty := minDistanceUtil(word1, word2, lenWord1, lenWord2-1)\n\t\tz := minDistanceUtil(word1, word2, lenWord1-1, lenWord2)\n\t\treturn 1 + minOfThree(x, y, z)\n\t}\n}\n\nfunc minOfThree(x, y, z int) int {\n\toutput := int(math.Min(float64(x), math.Min(float64(y), float64(z))))\n\treturn output\n}\n```", "```\n1\n1\n1\n2\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\toutput := minDistance(\"abc\", \"abcd\")\n\tfmt.Println(output)\n\n\toutput = minDistance(\"abc\", \"ab\")\n\tfmt.Println(output)\n\n\toutput = minDistance(\"abc\", \"abd\")\n\tfmt.Println(output)\n\n\toutput = minDistance(\"abce\", \"abd\")\n\tfmt.Println(output)\n}\n\nfunc minDistance(word1 string, word2 string) int {\n\tword1Rune := []rune(word1)\n\tword2Rune := []rune(word2)\n\tlenWord1 := len(word1Rune)\n\tlenWord2 := len(word2Rune)\n\n\teditDistanceMatrix := make([][]int, lenWord1+1)\n\n\tfor i := range editDistanceMatrix {\n\t\teditDistanceMatrix[i] = make([]int, lenWord2+1)\n\t}\n\n\tfor i := 1; i <= lenWord2; i++ {\n\t\teditDistanceMatrix[0][i] = i\n\t}\n\n\tfor i := 1; i <= lenWord1; i++ {\n\t\teditDistanceMatrix[i][0] = i\n\t}\n\tfor i := 1; i <= lenWord1; i++ {\n\t\tfor j := 1; j <= lenWord2; j++ {\n\n\t\t\tif word1Rune[i-1] == word2Rune[j-1] {\n\t\t\t\teditDistanceMatrix[i][j] = editDistanceMatrix[i-1][j-1]\n\t\t\t} else {\n\t\t\t\teditDistanceMatrix[i][j] = 1 + minOfThree(editDistanceMatrix[i-1][j], editDistanceMatrix[i][j-1], editDistanceMatrix[i-1][j-1])\n\t\t\t}\n\t\t}\n\t}\n\treturn editDistanceMatrix[lenWord1][lenWord2]\n}\n\nfunc minOfThree(x, y, z int) int {\n\toutput := int(math.Min(float64(x), math.Min(float64(y), float64(z))))\n\treturn output\n}\n```", "```\n1\n1\n1\n2\n```"]