- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:44:43'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Edit Distance between two strings in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/edit-distance-two-strings-golang/](https://golangbyexample.com/edit-distance-two-strings-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Recursive Solution](#Recursive_Solution "Recursive Solution")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Dynamic Programming Solution](#Dynamic_Programming_Solution "Dynamic Programming
    Solution")*  *## **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Given two strings find the minimum number of operations to convert one string
    into another. A string can be converted into another string by performing below
    three operations
  prefs: []
  type: TYPE_NORMAL
- en: Insert
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the operations are of equal cost.  Let’s see some examples
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 1:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We can insert a **‘d’** in the first string
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 2:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We can remove the **‘c’** from the first string
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 3:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We can replace the **‘c’** with **‘d’** in the first string
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 4:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We can remove **‘e’** from the first string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can replace **‘c’** with **‘d’** in the first string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some base cases. Assume the first string is of length **m** and the second string
    is of length **n**
  prefs: []
  type: TYPE_NORMAL
- en: If both the first and second string is of zero length then the output is 0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If only the first string is empty then the output is the length of the second
    string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If only the second string is empty then the output is the length of the first
    string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise
  prefs: []
  type: TYPE_NORMAL
- en: If the last characters of the first and second string match then the output
    is the min edit operations with the first string of length **m-1** and the second
    string of length **n-1**. It means recurse for (m-1, n-1)If the last characters
    do not match then we can either do an insert, remove or replace option in the
    first string.
  prefs: []
  type: TYPE_NORMAL
- en: Replace – recurse for (m-1, n-1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove – recurse for (m,-1 n)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert – recurse for (m, n-1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recursive Solution**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is the recursive solution for the same problem
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you will notice the above program many subproblems are computed again and
    again hence the complexity of the above solution is exponential. Hence we can
    also use Dynamic Programming here to reduce the overall time complexity.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the program for the same
  prefs: []
  type: TYPE_NORMAL
- en: '**Dynamic Programming Solution**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  prefs: []
  type: TYPE_NORMAL
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you -[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)*
  prefs: []
  type: TYPE_NORMAL
