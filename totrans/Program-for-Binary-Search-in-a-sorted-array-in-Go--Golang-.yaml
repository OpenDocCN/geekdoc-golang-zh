- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:50:14'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:50:14
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Program for Binary Search in a sorted array in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go（Golang）中在已排序数组中进行二分查找的程序
- en: 来源：[https://golangbyexample.com/binary-search-sorted-array-golang/](https://golangbyexample.com/binary-search-sorted-array-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/binary-search-sorted-array-golang/](https://golangbyexample.com/binary-search-sorted-array-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "概述")'
- en: '[Program](#Program "Program")*  *## **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "程序")*  *## **概述**'
- en: Idea is to do a binary search of a given target element in an input array. If
    the target element is present then output the index. If the output element is
    not present then output -1\.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 思路是在输入数组中对给定的目标元素进行二分查找。如果目标元素存在，则输出其索引。如果输出元素不存在，则输出 -1。
- en: Expected Time Complexity if O(logn)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 预期时间复杂度为 O(logn)
- en: '**Example 1**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 1**'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Example 2**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 2**'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Program**'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 请查看我们的 Golang 高级教程。该系列教程详尽，我们努力涵盖所有概念并提供示例。本教程适合那些希望获得 Golang 专业知识和扎实理解的人
    - [Golang 高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you - [All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对如何在 Golang 中实现所有设计模式感兴趣，那么这篇文章就是为你准备的 - [所有设计模式 Golang](https://golangbyexample.com/all-design-patterns-golang/)
- en: Also, check out our system design tutorial series here - [System Design Tutorial
    Series](https://techbyexample.com/system-design-questions/)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请查看我们的系统设计教程系列 - [系统设计教程系列](https://techbyexample.com/system-design-questions/)
- en: '[go](https://golangbyexample.com/tag/go/)*'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*'
