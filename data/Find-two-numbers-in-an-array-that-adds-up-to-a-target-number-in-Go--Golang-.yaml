- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:41:48'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:41:48
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Find two numbers in an array that adds up to a target number in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Go (Golang) 中查找两个数组中的数字，使它们的和等于目标数字
- en: 来源：[https://golangbyexample.com/target-sum-golang/](https://golangbyexample.com/target-sum-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/target-sum-golang/](https://golangbyexample.com/target-sum-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *## **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *## **概述**'
- en: For example, let’s say we have a given array
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有一个给定的数组
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The target number is **4**
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 目标数字是 **4**
- en: Then the answer will be index
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那么答案将是索引
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: as we have
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们有
- en: Number 1 at index 2
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引 2 的数字 1
- en: Number 3 at index 3
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引 3 的数字 3
- en: and 1+3 = 4
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 并且 1+3 = 4
- en: Do note that the array is unsorted
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意数组是无序的
- en: Expected TC – O(n)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 预期时间复杂度 – O(n)
- en: We can use a hash for the solution. It is based upon the idea that
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用哈希来解决这个问题。它的基础思想是
- en: If say one of the numbers is **x**
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果说其中一个数字是 **x**
- en: Then the other number will be **target-x**
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 那么另一个数字将是 **target-x**
- en: So if for a number **x** we check that **target-x** is in the hash. If it is
    then we know we have the solution
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果对于一个数字 **x**，我们检查 **target-x** 是否在哈希中。如果在，那么我们知道我们找到了答案
- en: Let’s see a program for the same.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看一个相同的程序。
- en: '**Program**'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
