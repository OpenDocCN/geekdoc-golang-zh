- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:27:34'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:27:34
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Create panic by calling panic function in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过在 Go (Golang) 中调用恐慌函数创建恐慌
- en: 来源：[https://golangbyexample.com/create-panic-golang/](https://golangbyexample.com/create-panic-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/create-panic-golang/](https://golangbyexample.com/create-panic-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Example](#Example "Example")*  *# **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[示例](#Example "Example")*  *# **概述**'
- en: Go provides a special function to create a panic. Below is the syntax of the
    function
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Go 提供了一个特殊函数来创建恐慌。下面是该函数的语法
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This function can be called explicitly by the programmer to create a panic.
    It takes an empty interface as an argument.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数可以由程序员显式调用以创建恐慌。它接受一个空接口作为参数。
- en: 'Some of the cases where panic function can be called explicitly by the programmer
    are:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序员可以显式调用恐慌函数的一些情况包括：
- en: The function expected a valid argument but instead, a nil argument was supplied.
    In such case, program cannot continue and it will raise a panic for a nil argument
    passed
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数期望一个有效的参数，但却提供了一个 nil 参数。在这种情况下，程序无法继续，并且会因传入 nil 参数而引发恐慌。
- en: Any other scenario in which program cannot continue.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序无法继续的任何其他情况。
- en: Example
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例
- en: Let’s see an example
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Output**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the above program, we again have a function **checkAndPrint** which accepts
    a slice as an argument and an index. Then it checks whether the index passed is
    greater than the length of slice minus 1\. If it is, then it is out of bounds
    access for the slice so it panics. If not then it prints the value at that index.
    Again notice that in the output there are two things
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，我们再次有一个函数 **checkAndPrint**，它接受一个切片作为参数和一个索引。然后它检查传入的索引是否大于切片长度减去1。如果是，那么它就是超出切片边界的访问，因此会引发恐慌。如果不是，则打印该索引处的值。再注意输出中有两件事
- en: The error message
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误信息
- en: Stack trace of where the panic happened
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发生恐慌时的堆栈跟踪
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
