- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:26:17'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:26:17
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Recover function return value in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go（Golang）中的`recover`函数返回值
- en: 来源：[https://golangbyexample.com/recover-return-value-golang/](https://golangbyexample.com/recover-return-value-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/recover-return-value-golang/](https://golangbyexample.com/recover-return-value-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Example](#Example "Example")*  *# **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[示例](#Example "Example") *  *# **概述**'
- en: The recover function  returns the value which was passed to the panic function.
    Therefore it is a good practice to check the return value of the recover function.
    If the return value is non nil then panic did not happen and recover function
    was not called with the panic.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`recover`函数返回传递给`panic`函数的值。因此，检查`recover`函数的返回值是一种良好实践。如果返回值非空，则表示没有发生`panic`，且`recover`函数没有因`panic`被调用。'
- en: '**Example**'
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**示例**'
- en: Let’s see a program to fully understand it
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个程序以充分理解它
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above program we have a function **checkAndPrint** which checks and prints
    slice element at an index passed in the argument. If the index passed is greater
    than the length of the array then the program panics.  We have added a defer function
    named **handleOutIfBounds** as well at the start of the function **checkAndPrint**. 
     This function  contains  the  call to recover function  as below
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，我们有一个函数**checkAndPrint**，它检查并打印传递给参数的索引处的切片元素。如果传递的索引大于数组的长度，则程序将发生`panic`。我们在函数**checkAndPrint**的开始处添加了一个名为**handleOutIfBounds**的`defer`函数。此函数包含对`recover`函数的调用，如下所示。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The **recover** function will catch the panic and we can also print the message
    from the panic.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**recover**函数将捕获`panic`，我们也可以打印来自`panic`的消息。'
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After the recover function the program continues and the control returns to
    the called function which is  **main** here. That is why we get output as
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在`recover`函数之后，程序继续执行，控制权返回到调用的函数，这里是**main**。这就是我们得到输出的原因。
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The recover function returns the value which was passed to the panic function.
    That is why we have below code in the  defer function **handleOutofBounds**
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`recover`函数返回传递给`panic`函数的值。这就是我们在`defer`函数**handleOutofBounds**中有下面代码的原因。'
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here if **r** is nil then panic did not happened. So if there is no **panic**
    then call to **recover** will return nil
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，如果**r**为nil，则表示没有发生`panic`。因此，如果没有`panic`，则对`recover`的调用将返回nil。
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/) *   [golang](https://golangbyexample.com/tag/golang/)
    *'
