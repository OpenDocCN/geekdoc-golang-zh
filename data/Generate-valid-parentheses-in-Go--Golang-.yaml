- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:42:44'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:42:44
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Generate valid parentheses in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Go语言中生成有效括号
- en: 来源：[https://golangbyexample.com/generate-valid-parentheses-golang/](https://golangbyexample.com/generate-valid-parentheses-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/generate-valid-parentheses-golang/](https://golangbyexample.com/generate-valid-parentheses-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")*  *## **Overview**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "概述")*  *## **概述**'
- en: Given an int n which means the number of pairs of parentheses, generate all
    valid well-formed parenthesis.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个整数n，表示括号对的数量，生成所有有效的成对括号。
- en: For eg
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 例如
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Program**Idea is to use two integers'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**程序**的想法是使用两个整数'
- en: open – It represents the number of left parentheses used so far
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: open – 它表示到目前为止使用的左括号的数量
- en: close – It represents the number of right parentheses used so far
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: close – 它表示到目前为止使用的右括号的数量
- en: We add the left parentheses only when
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仅在
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We add the right parentheses only when
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仅在
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Below is the program for the same
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相应的程序
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Output**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 查看我们的Golang高级教程。本系列教程内容详尽，我们尽力涵盖所有概念及示例。本教程适合那些希望掌握Golang并深入理解的读者 -
    [Golang高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you -[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对理解如何在Golang中实现所有设计模式感兴趣。如果是的话，这篇文章适合你 - [所有设计模式Golang](https://golangbyexample.com/all-design-patterns-golang/)
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[去](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
