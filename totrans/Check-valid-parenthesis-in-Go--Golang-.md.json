["```\n()\n{}\n[]\n()[]\n([{}])\n()[{}]\n```", "```\n([)]\n(\n{\n[\n(()\n```", "```\npackage main\n\nimport (\n\t\"container/list\"\n\t\"fmt\"\n)\n\nfunc main() {\n\tvalid := isValid(\"()\")\n\tfmt.Println(valid)\n\n\tvalid = isValid(\"[]\")\n\tfmt.Println(valid)\n\n\tvalid = isValid(\"{}\")\n\tfmt.Println(valid)\n\n\tvalid = isValid(\"()[]\")\n\tfmt.Println(valid)\n\n\tvalid = isValid(\"([{}])\")\n\tfmt.Println(valid)\n\n\tvalid = isValid(\"()[{}]\")\n\tfmt.Println(valid)\n\n\tvalid = isValid(\"([)]\")\n\tfmt.Println(valid)\n\n\tvalid = isValid(\"(\")\n\tfmt.Println(valid)\n\n\tvalid = isValid(\"(()\")\n\tfmt.Println(valid)\n\n}\n\ntype customStack struct {\n\tstack *list.List\n}\n\nfunc (c *customStack) Push(value string) {\n\tc.stack.PushFront(value)\n}\n\nfunc (c *customStack) Pop() error {\n\tif c.stack.Len() > 0 {\n\t\tele := c.stack.Front()\n\t\tc.stack.Remove(ele)\n\t}\n\treturn fmt.Errorf(\"Pop Error: Stack is empty\")\n}\n\nfunc (c *customStack) Front() (string, error) {\n\tif c.stack.Len() > 0 {\n\t\tif val, ok := c.stack.Front().Value.(string); ok {\n\t\t\treturn val, nil\n\t\t}\n\t\treturn \"\", fmt.Errorf(\"Peep Error: Stack Datatype is incorrect\")\n\t}\n\treturn \"\", fmt.Errorf(\"Peep Error: Stack is empty\")\n}\n\nfunc (c *customStack) Size() int {\n\treturn c.stack.Len()\n}\n\nfunc (c *customStack) Empty() bool {\n\treturn c.stack.Len() == 0\n}\n\nfunc isValid(s string) bool {\n\tcustomStack := &customStack{\n\t\tstack: list.New(),\n\t}\n\n\tfor _, val := range s {\n\n\t\tif val == '(' || val == '[' || val == '{' {\n\t\t\tcustomStack.Push(string(val))\n\t\t} else if val == ')' {\n\t\t\tpoppedValue, _ := customStack.Front()\n\t\t\tif poppedValue != \"(\" {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tcustomStack.Pop()\n\t\t} else if val == ']' {\n\t\t\tpoppedValue, _ := customStack.Front()\n\t\t\tif poppedValue != \"[\" {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tcustomStack.Pop()\n\n\t\t} else if val == '}' {\n\t\t\tpoppedValue, _ := customStack.Front()\n\t\t\tif poppedValue != \"{\" {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tcustomStack.Pop()\n\n\t\t}\n\n\t}\n\n\treturn customStack.Size() == 0\n}\n```", "```\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\n```"]