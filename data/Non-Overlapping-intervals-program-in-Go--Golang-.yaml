- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:49:38'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:49:38
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Non-Overlapping intervals program in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go（Golang）中的非重叠区间程序
- en: 来源：[https://golangbyexample.com/non-overlapping-intervals-golang/](https://golangbyexample.com/non-overlapping-intervals-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/non-overlapping-intervals-golang/](https://golangbyexample.com/non-overlapping-intervals-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *## **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *## **概述**'
- en: An array of intervals is given where intervals[i] = [starti, endi]. We have
    to find out the minimum number of intervals to remove so that the interval in
    the intervals array become non-overlapping
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个区间数组，其中intervals[i] = [starti, endi]。我们需要找出最少需要移除的区间数量，以使区间数组中的区间不重叠。
- en: Let’s understand it with an example
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来理解。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The idea is to first sort based interval start time and then count the overlapping
    intervals.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 思路是先按区间开始时间排序，然后计算重叠的区间。
- en: '**Program**'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Here is the program for the same.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是相应的程序。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Output**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 查看我们的Golang高级教程。该系列的教程内容详尽，我们尝试覆盖所有概念并提供示例。此教程适合希望获得Golang专业知识和扎实理解的人——[Golang高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you –[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解所有设计模式如何在Golang中实现。如果是的话，那么这篇文章适合你——[Golang中的所有设计模式](https://golangbyexample.com/all-design-patterns-golang/)
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
