- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:23:28'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Select statement with a for loop outside in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/select-forloop-outside-go/](https://golangbyexample.com/select-forloop-outside-go/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Finite for loop](#Finite_for_loop "Finite for loop")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Infinite for loop](#Infinite_for_loop "Infinite for loop")*  *# **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are two cases of for loop being outside a select statement
  prefs: []
  type: TYPE_NORMAL
- en: Finite for loop outside select statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infinite for loop outside select statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at each one by one
  prefs: []
  type: TYPE_NORMAL
- en: '**Finite for loop**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In case of finite for loop, the select statement will execute equal to the number
    of iterations in the loop. Let’s see a program for that
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the above program  we put a for loop of length two across the select statement.
    Hence  the select statement is executed twice and   prints the received value
    from each of the case statement.
  prefs: []
  type: TYPE_NORMAL
- en: '**Infinite for loop**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can have infinite for loop outside a select statement. This will cause the
    select statement to execute indefinite number of times.So when using for statement
    with infinite loop outside the select statement, we need to have a way yo break
    out of the for loop. One of the use case of having infinite for loop outside select
    statement could be that you are waiting for multiple operations to receive on
    the same channel for a certain time. See below example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the above program, we have created a channel named **news**  which will hold
    data of string type. Then we pass this channel to the **newsfeed** function which
    is pushing the news feed to this channel . In the select statement, we are receiving
    the news feed from the **news** channel. This select statement is inside an infinite
    for loop  so the select statement will be executed multiple times until we  exit
    out of for loop . We also have **time.After** with a duration for 1 second as
    one of the case statements. So this set up will receive all the news from the
    **news** channel for  1  second and then exit.
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
