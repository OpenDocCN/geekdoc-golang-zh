["```\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n```", "```\ntype struct_name struct {\n    field_name1 field_type1\n    field_name2 field_type2\n    ...\n}\n```", "```\ntype point struct {\n    x float64\n    y float64\n}\n```", "```\nemp := employee{}\n```", "```\nemp := employee{name: \"Sam\", age: 31, salary: 2000}\n```", "```\nemp := employee{\n   name:   \"Sam\",\n   age:    31,\n   salary: 2000,\n}\n```", "```\nemp := employee{\n   name: \"Sam\",\n   age: 31,\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc main() {\n    emp1 := employee{}\n    fmt.Printf(\"Emp1: %+v\\n\", emp1)\n\n    emp2 := employee{name: \"Sam\", age: 31, salary: 2000}\n    fmt.Printf(\"Emp2: %+v\\n\", emp2)\n\n    emp3 := employee{\n        name:   \"Sam\",\n        age:    31,\n        salary: 2000,\n    }\n    fmt.Printf(\"Emp3: %+v\\n\", emp3)\n\n    emp4 := employee{\n        name: \"Sam\",\n        age:  31,\n    }\n    fmt.Printf(\"Emp4: %+v\\n\", emp4)\n}\n```", "```\nEmp1: {name: age:0 salary:0}\nEmp2: {name:Sam age:31 salary:2000}\nEmp3: {name:Sam age:31 salary:2000}\nEmp4: {name:Sam age:31 salary:0}\n```", "```\n\"salary\" : 2000\n```", "```\nemp := employee{\n  name:   \"Sam\",\n  age:    31,\n  salary: 2000\n}\n```", "```\nemp := employee{\n  name:   \"Sam\",\n  age:    31,\n  salary: 2000}\n```", "```\nemp := employee{\"Sam\", 31, 2000}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc main() {\n    emp := employee{\"Sam\", 31, 2000}\n    fmt.Printf(\"Emp: %+v\\n\", emp)\n\n    //emp = employee{\"Sam\", 31}\n}\n```", "```\nEmp2: {name:Sam age:31 salary:2000}\n```", "```\nemp = employee{\"Sam\", 31}\n```", "```\ntoo few values in employee literal\n```", "```\nn := emp.name\n```", "```\nemp.name = \"some_new_name\"\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc main() {\n    emp := employee{name: \"Sam\", age: 31, salary: 2000}\n\n    //Accessing a struct field\n    n := emp.name\n    fmt.Printf(\"Current name is: %s\\n\", n)\n\n    //Assigning a new value\n    emp.name = \"John\"\n    fmt.Printf(\"New name is: %s\\n\", emp.name)\n}\n```", "```\nCurrent name is: Sam\nNew name is: John\n```", "```\nemp := employee{name: \"Sam\", age: 31, salary: 2000}\nempP := &emp\n```", "```\nempP := &employee{name: \"Sam\", age: 31, salary: 2000}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc main() {\n    emp := employee{name: \"Sam\", age: 31, salary: 2000}\n    empP := &emp\n    fmt.Printf(\"Emp: %+v\\n\", empP)\n    empP = &employee{name: \"John\", age: 30, salary: 3000}\n    fmt.Printf(\"Emp: %+v\\n\", empP)\n}\n```", "```\nEmp: &{name:Sam age:31 salary:2000}\nEmp: &{name:John age:30 salary:3000}\n```", "```\nempP := new(employee)\n```", "```\nfmt.Printf(\"Emp Pointer: %p\\n\", empP)\n```", "```\nfmt.Printf(\"Emp Value: %+v\\n\", *empP)\n```", "```\nEmp Value: {name: age:0 salary:0}\n```", "```\nfmt.Printf(\"Emp Value: %+v\\n\", empP)\n```", "```\nEmp Value: &{name: age:0 salary:0}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc main() {\n    empP := new(employee)\n    fmt.Printf(\"Emp Pointer Address: %p\\n\", empP)\n    fmt.Printf(\"Emp Pointer: %+v\\n\", empP)\n    fmt.Printf(\"Emp Value: %+v\\n\", *empP)\n}\n```", "```\nEmp Pointer Address: 0xc000130000\nEmp Pointer: &{name: age:0 salary:0}\nEmp Value: {name: age:0 salary:0}\n```", "```\nemp := employee{name: \"Sam\", age: 31, salary: 2000}\n```", "```\nfmt.Printf(\"%v\", emp)  -  {Sam 31 2000}\n```", "```\nfmt.Printf(\"%+v\", emp) - {name:Sam age:31 salary:2000}\n```", "```\nfmt.Println(emp) - {Sam 31 2000}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc main() {\n    emp := employee{name: \"Sam\", age: 31, salary: 2000}\n    fmt.Printf(\"Emp: %v\\n\", emp)\n    fmt.Printf(\"Emp: %+v\\n\", emp)\n    fmt.Printf(\"Emp: %#v\\n\", emp)\n    fmt.Println(emp)\n}\n```", "```\nEmp: {Sam 31 2000}\nEmp: {name:Sam age:31 salary:2000}\nEmp: main.employee{name:\"Sam\", age:31, salary:2000}\n{Sam 31 2000}\n```", "```\nMarshal(v interface{}) ([]byte, error)\n```", "```\nMarshalIndent(v interface{}, prefix, indent string) ([]byte, error)\n```", "```\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"log\"\n)\n\ntype employee struct {\n    Name   string\n    Age    int\n    salary int\n}\n\nfunc main() {\n    emp := employee{Name: \"Sam\", Age: 31, salary: 2000}\n    //Marshal\n    empJSON, err := json.Marshal(emp)\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n    fmt.Printf(\"Marshal funnction output %s\\n\", string(empJSON))\n\n    //MarshalIndent\n    empJSON, err = json.MarshalIndent(emp, \"\", \"  \")\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n    fmt.Printf(\"MarshalIndent funnction output %s\\n\", string(empJSON))\n}\n```", "```\nMarshal funnction output {\"Name\":\"Sam\",\"Age\":31}\n\nMarshalIndent funnction output {\n  \"Name\": \"Sam\",\n  \"Age\": 31\n}\n```", "```\ntype strutName struct{\n   fieldName type `key:value key2:value2`\n}\n```", "```\ntype employee struct {\n    Name   string `json:\"n\"`\n    Age    int    `json:\"a\"`\n    Salary int    `json:\"s\"`\n}\n```", "```\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"log\"\n)\n\ntype employee struct {\n    Name   string `json:\"n\"`\n    Age    int    `json:\"a\"`\n    Salary int    `json:\"s\"`\n}\n\nfunc main() {\n    emp := employee{Name: \"Sam\", Age: 31, Salary: 2000}\n    //Converting to jsonn\n    empJSON, err := json.MarshalIndent(emp, '', '  ')\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n    fmt.Println(string(empJSON))\n}\n```", "```\n{\n  \"n\": \"Sam\",\n  \"a\": 31,\n  \"s\": 2000\n}\n```", "```\ntype employee struct {\n    string\n    age    int\n    salary int\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype employee struct {\n    string\n    age    int\n    salary int\n}\n\nfunc main() {\n    emp := employee{string: \"Sam\", age: 31, salary: 2000}\n    //Accessing a struct field\n    n := emp.string\n    fmt.Printf(\"Current name is: %s\\n\", n)\n    //Assigning a new value\n    emp.string = \"John\"\n    fmt.Printf(\"New name is: %s\\n\", emp.string)\n}\n```", "```\nCurrent name is: Sam\nNew name is: John\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype employee struct {\n    name    string\n    age     int\n    salary  int\n    address address\n}\n\ntype address struct {\n    city    string\n    country string\n}\n\nfunc main() {\n    address := address{city: \"London\", country: \"UK\"}\n    emp := employee{name: \"Sam\", age: 31, salary: 2000, address: address}\n    fmt.Printf(\"City: %s\\n\", emp.address.city)\n    fmt.Printf(\"Country: %s\\n\", emp.address.country)\n}\n```", "```\nCity: London\nCountry: UK\n```", "```\nemp.address.city\nemp.address.country\n```", "```\nemp.city\nemp.country\n```", "```\nemp.address.city\nemp.address.country\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype employee struct {\n\tname   string\n\tage    int\n\tsalary int\n\taddress\n}\n\ntype address struct {\n\tcity    string\n\tcountry string\n}\n\nfunc main() {\n\taddress := address{city: \"London\", country: \"UK\"}\n\n\temp := employee{name: \"Sam\", age: 31, salary: 2000, address: address}\n\n\tfmt.Printf(\"City: %s\\n\", emp.address.city)\n\tfmt.Printf(\"Country: %s\\n\", emp.address.country)\n\n\tfmt.Printf(\"City: %s\\n\", emp.city)\n\tfmt.Printf(\"Country: %s\\n\", emp.country)\n}\n```", "```\nCity: London\nCountry: UK\nCity: London\nCountry: UK\n```", "```\nemp.city\nemp.address.city\n```", "```\npackage main\n\nimport \"fmt\"\n\n//Person struct\ntype Person struct {\n    Name string\n    age  int\n}\n\ntype company struct {\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\n//Test function\nfunc Test() {\n    //STRUCTURE IDENTIFIER\n    p := &Person{\n        Name: \"test\",\n        age:  21,\n    }\n    fmt.Println(p)\n    c := &company{}\n    fmt.Println(c)\n\n    //STRUCTURE'S FIELDS\n    fmt.Println(p.Name)\n    fmt.Println(p.age)\n}\n```", "```\n&{test 21}\n&{}\ntest\n21\n```", "```\npackage model\n\n//Person struct\ntype Person struct {\n\tName string\n\tage  int\n}\n\ntype company struct {\n}\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n        //This will path of your model package\n\t\"<somepath>/model\"\n)\n\n//Test function\nfunc main() {\n\t//STRUCTURE IDENTIFIER\n\tp := &model.Person{\n\t\tName: \"test\",\n\t\tage:  21,\n\t}\n\tfmt.Println(p)\n\tc := &model.company{}\n\tfmt.Println(c)\n\n\t//STRUCTURE'S FIELDS\n\tfmt.Println(p.Name)\n\tfmt.Println(p.age)\n}</somepath>\n```", "```\ncannot refer to unexported name model.company\np.age undefined (cannot refer to unexported field or method age)\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc main() {\n    emp1 := employee{name: \"Sam\", age: 31, salary: 2000}\n    emp2 := employee{name: \"Sam\", age: 31, salary: 2000}\n    if emp1 == emp2 {\n        fmt.Println(\"emp1 annd emp2 are equal\")\n    } else {\n        fmt.Println(\"emp1 annd emp2 are not equal\")\n    }\n}\n```", "```\nemp1 annd emp2 are equal\n```", "```\npackage main\nimport \"fmt\"\ntype employee struct {\n    name        string\n    age         int\n    salary      int\n    departments []string\n}\nfunc main() {\n    emp1 := employee{name: \"Sam\", age: 31, salary: 2000, departments: []string{\"CS\"}}\n    emp2 := employee{name: \"Sam\", age: 31, salary: 2000, departments: []string{\"EC\"}}\n    if emp1 == emp2 {\n        fmt.Println(\"emp1 annd emp2 are equal\")\n    } else {\n        fmt.Println(\"emp1 annd emp2 are not equal\")\n    }\n}\n```", "```\ninvalid operation: emp1 == emp2 (struct containing []string cannot be compared)\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype employee struct {\n    name   string\n    age    int\n    salary int\n}\n\nfunc main() {\n    emp1 := employee{name: \"Sam\", age: 31, salary: 2000}\n    fmt.Printf(\"Emp1 Before: %v\\n\", emp1)\n\n    emp2 := emp1\n\n    emp2.name = \"John\"\n    fmt.Printf(\"Emp1 After assignment: %v\\n\", emp1)\n    fmt.Printf(\"Emp2: %v\\n\", emp2)\n\n    test(emp1)\n    fmt.Printf(\"Emp1 After Test Function Call: %v\\n\", emp1)\n}\n\nfunc test(emp employee) {\n    emp.name = \"Mike\"\n    fmt.Printf(\"Emp in Test function: %v\\n\", emp)\n}\n```", "```\nEmp1 Before: {Sam 31 2000}\nEmp1 After assignment: {Sam 31 2000}\nEmp2: {John 31 2000}\nEmp in Test function: {Mike 31 2000}\nEmp1 After Test Function Call: {Sam 31 2000}\n```"]