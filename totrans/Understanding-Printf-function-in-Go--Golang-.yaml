- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:37:45'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:37:45
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Understanding Printf function in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Go（Golang）中的Printf函数。
- en: 来源：[https://golangbyexample.com/printf-golang/](https://golangbyexample.com/printf-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/printf-golang/](https://golangbyexample.com/printf-golang/)
- en: '![printf image](img/f431e47ca15664fa153f6a9b962dacbc.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![printf图像](img/f431e47ca15664fa153f6a9b962dacbc.png)'
- en: Table of Contents
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *## **Overview**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *## **概述**'
- en: '**Printf** is defined in the **fmt** package and is used to format a string
    and write to standard output'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**Printf**定义在**fmt**包中，用于格式化字符串并写入标准输出。'
- en: '[https://golang.org/pkg/fmt/#Printf](https://golang.org/pkg/fmt/#Printf)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://golang.org/pkg/fmt/#Printf](https://golang.org/pkg/fmt/#Printf)'
- en: Below is the function prototype of **Printf**
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是**Printf**的函数原型。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Printf** formats the string using custom specifiers. It also doesn’t add
    a new line. **Printf** is also a variadic function meaning that it can have multiple
    arguments. There are two important points about its argument list'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Printf**使用自定义说明符格式化字符串。它也不会添加新行。**Printf**也是一个可变参数函数，意味着它可以有多个参数。关于其参数列表有两个重要点。'
- en: Notice that the first argument is a **format** or **template** string.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，第一个参数是**格式**或**模板**字符串。
- en: The next is a variable number of arguments. Each of the arguments in this list
    could be string, int, struct, or anything. That is why it is an empty interface
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个是可变数量的参数。此列表中的每个参数可以是字符串、整数、结构体或其他任何内容。因此，它是一个空接口。
- en: The **format** or **template** string contains the actual string that needs
    to be formatted plus some formating verbs. These formating verbs tell how the
    trailing arguments will be formatted in the final string.  So basically the format
    string argument contains certain symbols which are replaced by trailing arguments.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**格式**或**模板**字符串包含需要格式化的实际字符串和一些格式动词。这些格式动词说明尾随参数在最终字符串中的格式化方式。因此，格式字符串参数包含某些符号，这些符号会被尾随参数替换。'
- en: Eg
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '**Printing a string variable**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**打印字符串变量**'
- en: '**%s** symbol is used'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**%s**符号被使用'
- en: Example
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Printing an integer**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**打印整数**'
- en: '**%d** symbol is used'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**%d**符号被使用。'
- en: Example
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Printing a struct**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**打印结构体**'
- en: For example, there are three format specifiers for printing a struct.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，有三个格式说明符用于打印结构体。
- en: '**%v** – It will print only values. The field name will not be printed. This
    is the default way of printing a struct when using Println'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**%v** – 它只会打印值。字段名称不会被打印。这是在使用Println时打印结构体的默认方式。'
- en: '**%+v – **It will print both field and value.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**%+v –**它将打印字段和值。'
- en: '**%#v – **It will print the struct, also both field name and value'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**%#v –**它将打印结构体，包括字段名称和值。'
- en: That is why
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是原因。
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: prints below respectively
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 分别打印如下。
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It is as per the explanation above.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这与上面的解释一致。
- en: Also, note that this function returns the number of characters printed and any
    error if happens. Unlike **Println** it does add a new line. You will have to
    add **“\n”** explicitly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请注意此函数返回打印的字符数以及发生的任何错误。与**Println**不同，它不会自动添加新行。你需要显式添加**“\n”**。
- en: Program
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 程序
- en: Here is the working program for the same
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是相应的工作程序。
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Output**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice that in below **Printf**
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意下面的**Printf**
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**%s** is replaced by name.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**%s**被名称替换。'
- en: '**%d** is replaced by age.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**%d**被年龄替换。'
- en: So basically the symbols or verbs in the format string argument are replaced
    by trailing arguments in order
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，格式字符串参数中的符号或动词按顺序被尾随参数替换。
- en: If the number of format specifiers in the format string does not match the number
    of next variable arguments then the format specifier will be printed as is. For
    example, in the below code, we have two format specifier
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果格式字符串中的格式说明符数量与下一个可变参数的数量不匹配，则格式说明符将按原样打印。例如，在下面的代码中，我们有两个格式说明符。
- en: '%d'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '%d'
- en: '%s'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '%s'
- en: While the next variable number of arguments is only one. Hence when we print
    it then it will print the second format specifier as is with MISSING as a warning
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 而下一个可变数量的参数仅有一个。因此，当我们打印它时，它会如实打印第二个格式说明符，并显示“MISSING”作为警告。
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Output**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Also, check out our Golang advance tutorial Series – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)*
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，查看我们的Golang高级教程系列 – [Golang高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)*
