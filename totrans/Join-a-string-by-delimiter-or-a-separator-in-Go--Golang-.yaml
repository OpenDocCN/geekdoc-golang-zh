- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:12:08'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Join a string by delimiter or a separator in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/go-join-string-delimiter/](https://golangbyexample.com/go-join-string-delimiter/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Code:](#Code "Code:")*  *# **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In GO string are UTF-8 encoded. **strings** package of GO provides a **Join**
    method that can be used to join a string based upon a delimiter.
  prefs: []
  type: TYPE_NORMAL
- en: Below is the signature of the function
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can notice this function takes a slice of string and a delimiter and
    it returns a combined string joined by a delimiter. The delimiter or separator
    is placed between elements of the input string slice. Please note
  prefs: []
  type: TYPE_NORMAL
- en: It will return an empty string if the length of the input slice is zero
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will output a string combined from the slice of strings if the input delimiter
    or separator is empty.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at the working code
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]*'
  prefs: []
  type: TYPE_NORMAL
