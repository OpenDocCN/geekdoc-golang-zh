["```\nInput: 4->5->3->1\nOutput: 2\nTarget: 1->4->5->3\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfirst := initList()\n\tfirst.AddFront(1)\n\tfirst.AddFront(2)\n\tfirst.AddFront(3)\n\tfirst.AddFront(4)\n\n\tfirst.Head.Traverse()\n\tnewHead := partition(first.Head, 2)\n\tfmt.Println(\"\")\n\tnewHead.Traverse()\n\n}\n\nfunc initList() *SingleList {\n\treturn &SingleList{}\n}\n\ntype ListNode struct {\n\tVal  int\n\tNext *ListNode\n}\n\nfunc (l *ListNode) Traverse() {\n\tfor l != nil {\n\t\tfmt.Println(l.Val)\n\t\tl = l.Next\n\t}\n}\n\ntype SingleList struct {\n\tLen  int\n\tHead *ListNode\n}\n\nfunc (s *SingleList) AddFront(num int) {\n\tele := &ListNode{\n\t\tVal: num,\n\t}\n\tif s.Head == nil {\n\t\ts.Head = ele\n\t} else {\n\t\tele.Next = s.Head\n\t\ts.Head = ele\n\t}\n\ts.Len++\n}\n\nfunc partition(head *ListNode, x int) *ListNode {\n\tif head == nil {\n\t\treturn nil\n\t}\n\n\tcurr := head\n\n\tvar prev *ListNode\n\n\tfor curr != nil {\n\t\tif curr.Val >= x {\n\t\t\tbreak\n\t\t}\n\t\tprev = curr\n\t\tcurr = curr.Next\n\t}\n\n\tif curr == nil {\n\t\treturn head\n\t}\n\n\tfirstLargeValueNode := curr\n\n\tprev2 := firstLargeValueNode\n\tfor curr != nil {\n\t\tif curr.Val < x {\n\t\t\tprev2.Next = curr.Next\n\t\t\tif prev != nil {\n\t\t\t\tprev.Next = curr\n\t\t\t\tprev = prev.Next\n\t\t\t\tprev.Next = firstLargeValueNode\n\t\t\t} else {\n\t\t\t\tif head == firstLargeValueNode {\n\t\t\t\t\thead = curr\n\t\t\t\t}\n\t\t\t\tcurr.Next = firstLargeValueNode\n\t\t\t\tprev = curr\n\t\t\t}\n\t\t}\n\t\tprev2 = curr\n\t\tcurr = curr.Next\n\t}\n\n\treturn head\n}\n```", "```\n4\n5\n3\n1\n\n1\n4\n5\n3\n```"]