- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:03:30'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:03:30
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Singleton Design Pattern in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go（Golang）中的单例设计模式
- en: 来源：[https://golangbyexample.com/singleton-design-pattern-go/](https://golangbyexample.com/singleton-design-pattern-go/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/singleton-design-pattern-go/](https://golangbyexample.com/singleton-design-pattern-go/)
- en: 'Note: Interested in understanding how all other design patterns can be implemented
    in GO. Please see this full reference – [All Design Patterns in Go (Golang)](https://golangbyexample.com/all-design-patterns-golang/)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：有兴趣了解如何在GO中实现所有其他设计模式。请查看这个完整参考 - [Go中的所有设计模式（Golang）](https://golangbyexample.com/all-design-patterns-golang/)
- en: '**Introduction:**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介：**'
- en: 'Singleton Design Pattern is a creational design pattern and also one of the
    most commonly used design pattern. This pattern is used when only a single instance
    of the struct should exist. This single instance is called a singleton object.
    Some of the cases where the singleton object is applicable:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 单例设计模式是一种创建型设计模式，也是最常用的设计模式之一。当只应存在一个结构体实例时，使用此模式。这个单一实例称为单例对象。单例对象适用的一些情况：
- en: '**DB instance** – we only want to create only one instance of DB object and
    that instance will be used throughout the application.'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**DB实例** - 我们只想创建一个DB对象的实例，并且该实例将在整个应用程序中使用。'
- en: '**Logger instance** – again only one instance of the logger should be created
    and it should be used throughout the application.'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**日志实例** - 仍然应该只创建一个日志实例，并在整个应用程序中使用。'
- en: The singleton instance is created when the struct is first initialized.  Usually,
    there is getInstance() method defined on the struct for which only one instance
    needs to be created. Once created then the same singleton instance is returned
    every time by the **getInstance()**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当结构体首次初始化时，创建单例实例。通常，在结构体上定义一个getInstance()方法，只需要创建一个实例。一旦创建，每次调用**getInstance()**时返回的都是同一单例实例。
- en: In GO we have goroutines. Hence the singleton struct should return the same
    instance whenever multiple goroutines are trying to access that instance. It is
    very easy to get a singleton design pattern wrong. The below code illustrates
    the right way to create a singleton object.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在GO中我们有goroutines。因此，单例结构体应该在多个goroutines尝试访问该实例时返回相同的实例。实现单例设计模式很容易出错。下面的代码说明了创建单例对象的正确方法。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Above code ensures that only one instance of the single struct is created. Some
    point worth noting.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码确保只创建一个单一结构体的实例。有几点值得注意。
- en: There is a check at the start for nil **singleInstance**. This is to prevent
    the expensive lock operations every time **getinstance()** method is called. If
    this check fails then it means that **singleInstance** is already created
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始时有一个对nil **singleInstance**的检查。这是为了防止每次调用**getInstance()**方法时进行昂贵的锁操作。如果这个检查失败，则意味着**singleInstance**已经创建。
- en: The **singleInstance** is created inside the lock.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**singleInstance**是在锁内创建的。'
- en: There is another check for nil **singleIinstance** after the lock is acquired.
    This is to make sure that if more than one goroutine bypass the first check then
    only one goroutine is able to create the singleton instance otherwise each of
    the goroutine will create its own instance of the **single** struct.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 锁定后还有一个对nil **singleInstance**的检查。这是为了确保如果多个goroutine绕过第一次检查，那么只有一个goroutine能够创建单例实例，否则每个goroutine将创建自己的**single**结构体实例。
- en: Here is the full code
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整代码
- en: '**single.go**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**single.go**'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**main.go**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**main.go**'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output:**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Note:**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: There is one output of **"Creating Single Instance Now"** meaning only one goroutine
    was able to create a single instance.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个输出为**"现在创建单实例"**，这意味着只有一个goroutine能够创建单一实例。
- en: There are a couple of outputs of **"Single Instance already created-1"** meaning
    that some of the goroutines found the value of singleInstance as nil in the first
    check and bypassed that.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有几个输出为**"单实例已创建-1"**，这意味着一些goroutines在第一次检查中发现singleInstance的值为nil并绕过了它。
- en: There are couple of output of **"Single Instance already created-2"** meaning
    by the time they reached the single instance was already created and they could
    not bypass the first if check
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有几个输出为**"单实例已创建-2"**，这意味着当它们到达时，单实例已经创建，它们无法绕过第一次if检查。
- en: '**Other methods of creating a singleton object in Go**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**在Go中创建单例对象的其他方法**'
- en: '**init() function**'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**init()函数**'
- en: We can create a single instance inside the init function. This is only applicable
    if the early initialization of the object is ok. The init function is only called
    once per file in a package,  so we can be sure that only a single instance will
    be created.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在init函数内创建一个单实例。这仅适用于对象的提前初始化是可以的。init函数在一个包的每个文件中只会被调用一次，因此我们可以确保只创建一个单实例。
- en: '**sync.Once**'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sync.Once**'
- en: The sync.Once will only perform the operation only once. See below code
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: sync.Once只会执行一次操作。请参见下面的代码。
- en: '**single.go**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**single.go**'
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Output:**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There is one output of **"Creating Single Instance Now"** meaning only one goroutine
    was able to create the single instance
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个输出为**“现在创建单实例”**，这意味着只有一个goroutine能够创建单实例。
- en: There are couple of output of **"Single Instance already created-2"** meaning
    by the time they reached the single instance was already created and they could
    not bypass the first if check
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有几个输出为**“单实例已创建-2”**，这意味着在到达时单实例已经被创建，他们无法绕过第一次if检查。
- en: '[singleton](https://golangbyexample.com/tag/singleton/)*   [singleton design
    pattern in golang](https://golangbyexample.com/tag/singleton-design-pattern-in-golang/)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[单例](https://golangbyexample.com/tag/singleton/) *   [Golang中的单例设计模式](https://golangbyexample.com/tag/singleton-design-pattern-in-golang/)'
