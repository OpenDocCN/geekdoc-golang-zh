- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:06:54'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Write to a file in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/write-to-a-file-go/](https://golangbyexample.com/write-to-a-file-go/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There are different ways of writing a file in GO. Let’s examine this in detail
    through different examples which illustrates how to write line by line to a file.
  prefs: []
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Buffered write using bufio package](#Buffered_write_using_bufio_package
    "Buffered write using bufio package")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Example: With Default Buffer Size of 4096 bytes](#Example_With_Default_Buffer_Size_of_4096_bytes
    "Example: With Default Buffer Size of 4096 bytes")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Example: With Custom Buffer Size of 10 bytes](#Example_With_Custom_Buffer_Size_of_10_bytes
    "Example: With Custom Buffer Size of 10 bytes")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using file.Write()](#Using_fileWrite "Using file.Write()")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using ioutil.WriteFile()](#Using_ioutilWriteFile "Using ioutil.WriteFile()")*  *#
    **Buffered write using bufio package**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bufio** package can be used to do a buffered write in Go. It has a default
    buffer size of 4096 bytes however a custom buffer size can also be specified.
    The main advantage of buffered write is that it keeps the data to be written in
    the buffer and thus minimizes the number of times we have to do the IO operation.
    It does a write when'
  prefs: []
  type: TYPE_NORMAL
- en: '**writer.flush()** is called'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buffer is full on next write. For example, let’s say it has 3500 bytes in full
    in buffer and buffer has a size of 4096\. The next line to be written is of 1000
    bytes. Since it 3500 + 1000 > 4096, it will write some of the bytes to file so
    that some buffer is available for next write.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there is no buffer then there will be IO write on every line. Let’s see an
    example of a write to a file. We are using **writer.Available()** and **writer.Buffered()**
    to print the **available** and **used** buffer size respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example: With Default Buffer Size of 4096 bytes**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It will write to **temp.txt** in the current directory. Write happens at the
    end when **writer.Flush()** is called as buffer never really gets full in between.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Example: With Custom Buffer Size of 10 bytes**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also create a custom buffer size for our writer using bufio.NewWriterSize().
    In the below example, we create a write with a custom buffer size of 10 bytes.
    If you carefully notice the bytes **“Available”** and **“Buffered”** in output,
    you will find that writes to file keep happening in between when the buffer is
    full and at the end when **writer.Flush()** is called.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Using file.Write()**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It does not maintain any buffer and writes to the file immediately as soon as
    the write is called. See the example below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Using ioutil.WriteFile()**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**ioutil.WriteFile()** is kind of a shortcut to writing to a file. It takes
    in three-parameter – (1) file (2) The string to be written (3) Permission mode
    of the file. The third parameter is used to create a file with that permission
    if the file doesn’t already exist. One calling **ioutil.WriteFile()**, it will'
  prefs: []
  type: TYPE_NORMAL
- en: Create the file if not present with the specified permission
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write to the file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Close the file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'See below example: If temp.txt doesn’t exist then it will create a new temp.txt
    file with permission 0777'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[buffered write](https://golangbyexample.com/tag/buffered-write/)*   [bufio](https://golangbyexample.com/tag/bufio/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
