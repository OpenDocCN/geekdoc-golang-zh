["```\nInput:1\nOutput: [()]\n\nInput:2\nOutput: [()(), (())]\n\nInput:2\nOutput: [()()() ()(()) (())() (()()) ((()))]\n```", "```\nopen < n //where n is the number of pairs of parentheses\n```", "```\nclose < open //Number of right parentheses is less than the number of left parentheses\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\toutput := generateParenthesis(1)\n\tfmt.Println(output)\n\n\toutput = generateParenthesis(2)\n\tfmt.Println(output)\n\n\toutput = generateParenthesis(3)\n\tfmt.Println(output)\n}\n\nfunc generateParenthesis(n int) []string {\n\tinput := \"\"\n\tfor i := 0; i < n; i++ {\n\t\tinput = input + \"  \"\n\t}\n\toutput := generateParenthesisUtil(0, n, 0, 0, []rune(input))\n\treturn output\n}\n\nfunc generateParenthesisUtil(pos, n, open, close int, input []rune) []string {\n\n\tvar output []string\n\tif pos == n*2 {\n\t\toutput = append(output, string(input))\n\t\treturn output\n\t}\n\n\tif close < open {\n\t\tinput[pos] = ')'\n\t\tresult := generateParenthesisUtil(pos+1, n, open, close+1, input)\n\t\toutput = append(output, result...)\n\n\t}\n\n\tif open < n {\n\t\tinput[pos] = '('\n\t\tresult := generateParenthesisUtil(pos+1, n, open+1, close, input)\n\t\toutput = append(output, result...)\n\t}\n\n\treturn output\n}\n```", "```\n[()]\n[()() (())]\n[()()() ()(()) (())() (()()) ((()))]\n```"]