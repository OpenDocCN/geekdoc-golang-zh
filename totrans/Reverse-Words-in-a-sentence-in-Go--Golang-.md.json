["```\nInput: \"hello world\"\nOutput: \"word hello\"\n```", "```\nInput: \"hello\"\nOutput: \"hello\"\n```", "```\n\"dlrow olleh\"\n```", "```\n\"world hello\"\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"regexp\"\n\t\"strings\"\n)\n\nfunc reverseWords(s string) string {\n\n\truneArray := []rune(s)\n\tlength := len(runeArray)\n\n\treverseRuneArray := reverse(runeArray)\n\n\tfor i := 0; i < length; {\n\t\tfor i < length && string(reverseRuneArray[i]) == \" \" {\n\t\t\ti++\n\t\t}\n\t\tif i == length {\n\t\t\tbreak\n\t\t}\n\t\twordStart := i\n\n\t\tfor i < length && string(reverseRuneArray[i]) != \" \" {\n\t\t\ti++\n\t\t}\n\n\t\twordEnd := i - 1\n\n\t\treverseRuneArray = reverseIndex(reverseRuneArray, wordStart, wordEnd)\n\n\t}\n\n\tnoSpaceString := strings.TrimSpace(string(reverseRuneArray))\n\tspace := regexp.MustCompile(`\\s+`)\n\treturn space.ReplaceAllString(noSpaceString, \" \")\n}\n\nfunc reverse(s []rune) []rune {\n\tlength := len(s)\n\tstart := 0\n\tend := length - 1\n\tfor start < end {\n\t\ts[start], s[end] = s[end], s[start]\n\t\tstart++\n\t\tend--\n\t}\n\treturn s\n}\n\nfunc reverseIndex(s []rune, i, j int) []rune {\n\n\tstart := i\n\tend := j\n\tfor start < end {\n\t\ts[start], s[end] = s[end], s[start]\n\t\tstart++\n\t\tend--\n\t}\n\treturn s\n}\n\nfunc main() {\n\toutput := reverseWords(\"hello world\")\n\tfmt.Println(output)\n\n\toutput = reverseWords(\"hello\")\n\tfmt.Println(output)\n}\n```", "```\nworld hello\nhello\n```"]