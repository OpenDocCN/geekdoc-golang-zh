["```\npackage main\nimport \"fmt\"\ntype node struct {\n    data string\n    next *node\n}\ntype singlyLinkedList struct {\n    len  int\n    head *node\n}\nfunc initList() *singlyLinkedList {\n    return &singlyLinkedList{}\n}\nfunc (s *singlyLinkedList) AddFront(data string) {\n    node := &node{\n        data: data,\n    }\n    if s.head == nil {\n        s.head = node\n    } else {\n        node.next = s.head\n        s.head = node\n    }\n    s.len++\n    return\n}\n\nfunc (s *singlyLinkedList) Traverse() error {\n    if s.head == nil {\n        return fmt.Errorf(\"TraverseError: List is empty\")\n    }\n    current := s.head\n    for current != nil {\n        fmt.Println(current.data)\n        current = current.next\n    }\n    return nil\n}\n\n//Function to convert singly linked list to circular linked list\nfunc (s *singlyLinkedList) ToCircular() {\n    current := s.head\n    for current.next != nil {\n        current = current.next\n    }\n    current.next = s.head\n}\n\nfunc (s *singlyLinkedList) IsCircular() bool {\n    if s.head == nil {\n        return true\n    }\n    current := s.head.next\n    for current.next != nil && current != s.head {\n        current = current.next\n    }\n    return current == s.head\n}\n\nfunc main() {\n    singleList := initList()\n    fmt.Printf(\"AddFront: D\\n\")\n    singleList.AddFront(\"D\")\n    fmt.Printf(\"AddFront: C\\n\")\n    singleList.AddFront(\"C\")\n    fmt.Printf(\"AddFront: B\\n\")\n    singleList.AddFront(\"B\")\n    fmt.Printf(\"AddFront: A\\n\")\n    singleList.AddFront(\"A\")\n    err := singleList.Traverse()\n    if err != nil {\n        fmt.Println(err.Error())\n    }\n    isCircular := singleList.IsCircular()\n    fmt.Printf(\"Before: Is Circular: %t\\n\", isCircular)\n\n    fmt.Printf(\"Size: %d\\n\", singleList.len)\n    singleList.ToCircular()\n\n    isCircular = singleList.IsCircular()\n    fmt.Printf(\"After: Is Circular: %t\\n\", isCircular)\n}\n```", "```\nAddFront: D\nAddFront: C\nAddFront: B\nAddFront: A\nA\nB\nC\nD\nBefore: Is Circular: false\nSize: 4\nAfter: Is Circular: true\n```"]