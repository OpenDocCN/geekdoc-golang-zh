- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:40:21'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:40:21
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Parse a URL and extract all the parts in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析一个URL并提取所有部分，使用Go (Golang)
- en: 来源：[https://golangbyexample.com/parse-url-golang/](https://golangbyexample.com/parse-url-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/parse-url-golang/](https://golangbyexample.com/parse-url-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**[概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *# **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *# **概述**'
- en: '**net/url** package of golang contains a Parse function that can be used to
    parse a given and return the url instance of the URL struct'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**net/url**包中包含一个Parse函数，可以用来解析给定的URL并返回URL结构的实例'
- en: '[https://golang.org/pkg/net/url/#URL](https://golang.org/pkg/net/url/#URL)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://golang.org/pkg/net/url/#URL](https://golang.org/pkg/net/url/#URL)'
- en: Once the given URL is parsed correctly, then it will return the URI object.
    We can then access the below information from the URI
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦给定的URL被正确解析，它将返回URI对象。然后我们可以从URI访问以下信息
- en: Scheme
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方案
- en: User Info
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户信息
- en: Hostname
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机名
- en: Port
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口
- en: Pathname
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径名
- en: Query Params
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询参数
- en: Fragment
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 片段
- en: 'Let’s see a working program for the same:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个工作程序：
- en: We will parse the below URL
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将解析以下URL
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后
- en: Scheme is HTTPS
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方案是HTTPS
- en: 'User Info – username is test and password is abcd123\. Username and password
    are separated by a colon :'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户信息 – 用户名是test，密码是abcd123。用户名和密码用冒号分隔：
- en: Hostname is [www.golangbyexample.com](http://www.golangbyexample.com/)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机名是 [www.golangbyexample.com](http://www.golangbyexample.com/)
- en: Port is 8000
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口是8000
- en: The path is tutorials/intro
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径是 tutorials/intro
- en: Query Params is **type=advance** and **compact=false**. They are separated by
    ampersand
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询参数是**type=advance**和**compact=false**。它们用和号分隔
- en: fragment is **history**. It will directly take to the history section within
    that page. **history** is an identifier that refers to that section within that
    page
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 片段是**历史**。它将直接带你到该页面的历史部分。**历史**是一个标识符，指向该页面中的那个部分
- en: '**Program**'
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**程序**'
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Output**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It correctly dumps all the information as seen from the output
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 它正确地输出所有信息，如输出所示
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
