- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:14:15'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Number of Characters or length of a string in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/number-characters-string-golang/](https://golangbyexample.com/number-characters-string-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In golang string is a sequence of bytes. A string literal actually represents
    a UTF-8 sequence of bytes. In UTF-8, ASCII characters are single-byte corresponding
    to the first 128 Unicode characters. All other characters are between 1 -4 bytes.
    That is why it is not possible to get the exact length of the string using the
    built-in **len** function of go. It might work if the string only contains ASCII
    characters. But if the string contains Non-ASCII characters then it will give
    the correct output.
  prefs: []
  type: TYPE_NORMAL
- en: For example, see below the program and its output. **£** in the string below
    is a Non-ASCII character.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you might have noticed , it prints different characters than expected and
    length is also 5 instead of 4\. Why is that? To answer please remember we said
    that a string is essentially a slice of bytes. Let's print that slice of bytes
    using
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Output will be
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is the mapping of each of character to its byte sequence. As you can notice
    **a**, **b**, **c** take each 1 byte but **£** takes two bytes. That is why the
    length of the string is 5 and not 4
  prefs: []
  type: TYPE_NORMAL
- en: '| a | 97 |'
  prefs: []
  type: TYPE_TB
- en: '| b | 98 |'
  prefs: []
  type: TYPE_TB
- en: '| £ | 194, 163 |'
  prefs: []
  type: TYPE_TB
- en: '| c | 99 |'
  prefs: []
  type: TYPE_TB
- en: There are two alternatives to get the correct length of a string
  prefs: []
  type: TYPE_NORMAL
- en: Using rune data type . **rune** data type represents a Unicode point.  Once
    a string is converted to an array of **rune** then it is possible to get the correct
    length of a string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using range operator over the string and calculating the length. range operator
    iterates over the UTF-8 characters in a string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The below code illustrates the above two points.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
