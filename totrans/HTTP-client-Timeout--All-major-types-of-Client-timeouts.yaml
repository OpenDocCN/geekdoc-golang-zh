- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:07:11'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'HTTP client Timeout: All major types of Client timeouts'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/all-types-client-timeouts-http-tcp-udp-unix/](https://golangbyexample.com/all-types-client-timeouts-http-tcp-udp-unix/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[Dial Timeout:](#Dial_Timeout "Dial Timeout:")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TLS Handshake Timeout:](#TLS_Handshake_Timeout "TLS Handshake Timeout:")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ResponseHeader Timeout:](#ResponseHeader_Timeout "ResponseHeader Timeout:")'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Request Timeout:](#Request_Timeout "Request Timeout:")'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Socket Timeout:](#Socket_Timeout "Socket Timeout: ")'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Wait for Connection Timeout:](#Wait_for_Connection_Timeout "Wait for Connection
    Timeout:")'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Idle Connection Timeout:](#Idle_Connection_Timeout "Idle Connection Timeout:")*  *#
    **Overview**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this article, we will study different types of timeouts that are possible
    in HTTP or TCP or UDP or Unix Sockets Communication, etc when connecting from
    **Client** to the **Server**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: There is also something called **ServerTimeout** that specifies when the server
    can close an incoming request. Just to add, the Server timeout exists to protect
    a server from the malicious client or a slow client which is holding a connection
    for very long.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: For **Client Timeouts**  please note that different libraries in different programming
    languages may not give you an option to set all the timeouts which are described
    belowFor eg in golang net http package the Client struct ([https://golang.org/pkg/net/http/#Client](https://golang.org/pkg/net/http/#Client))
    allows you to set a single **Timeout.** This timeout specifies below two timeouts
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Request Timeout
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Socket Timeout
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s learn all types of timeouts:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '**Dial Timeout**:'
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dial Timeout specifies the maximum amount of time a dial will wait for a connect
    to complete on a  named network. The named network could be **“TCP”, “UDP” , “IP”,
    “unix”** etc. It is a case where no response at all is received from the server.
    It may happen because
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Wrong DNS
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The remote server does not respond
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The remote server is dead
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrong port used to connect to the remote server
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Imagine a case where DialTimeout is 1 sec. A client is dialing a TCP connection
    but does not receive any response from the server with 1 sec then DialTimeout
    will happen.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '**TLS Handshake Timeout**:'
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applicable for SSL request. Whenever a connection is getting established with
    a remote server, a  TLS handshake happens in which SSL keys are exchanged and
    SSL certification verification of the server is done.  **TLS Handshake** **Timeout**
    specifiesthemax time to wait for TLS Handshake to be established.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Imagine a case of an HTTP request. Let’s say the TLS Handshake timeout is 1
    sec. The Client  will max wait for 1 sec for the TLS Handshake to be completed
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '**ResponseHeader Timeout**:'
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the client has done the  TLS Handshake with the server and also done sending
    the request headers and request body fully then **ResponseHeader Timeout** comes
    into the picture. This timeout specifies the max time to wait for receiving response
    headers from the server.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say the Response HeaderTimeout is 1 second. A client makes an HTTP request,
    the TLS handshake is successful. The client then sends the request headers and
    request body to the server.  Now in this scenario, the **Response HeaderTimeout**
    will happen if server response headers are not received within 1 second
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '**Request Timeout:**'
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Request Timeout comes into picture starting from dialing of a connection to
    the server to the receive of the entire response body from the remote server.
    It represents the max time to wait for entire client request to complete. Imagine
    an HTTP request, a request timeout specifies how much max time it will wait for
    the entire HTTP request to be completed. It is the timeout for the complete request
    so it includes **DialTimeout**, **TLSHandshakeTimeout** as well as **Response
    HeaderTimeout** and plus extra time waiting for response body.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say you Request Timeout is 1 sec, then the client will wait for max 1
    sec starting from Dial to receive the entire response before timing out.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '**Socket Timeout:**'
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This timeout is mostly related to long-lived connections. A connection has been
    established with a remote server and some chunks of bytes also have been transferred.
    If this data flow of bytes is interrupted for a specific time, then the socket
    timeout comes into the picture.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Imaging your socket timeout is 1 sec and if no new bytes are transferred for
    the next 1 sec, then it will result in socket timeout. By setting the socket timeout
    to 1 sec means that some data should be received every one second. So a socket
    timeout is waiting for individual packets and it does not mean timeout for a full
    response.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '**Wait for Connection Timeout:**'
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This timeout is applicable for a fixed connection Pool. This is the timeout
    waiting for an active connection to be available from the pool.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '**Example**:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take an example of a DB connection pool. Imagine you are using MYSQL server
    and max connections in a pool is 20 and all connections are currently utilized.
    Your **“Wait for Connection Timeout”** is set to 1 sec. A new request comes and
    it needs a connection to connect to DB. Since all 20 connections are occupied,
    then, in this case, the new request will wait for max 1 second for connection
    to be available before timing out. In this case, the response you might get is
    **“Too many connections”** error.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '**Idle Connection Timeout:**'
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This timeout is also applicable to a connection pool. Idle Connection Timeout
    specifies how much time an unused connection should be kept around.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Imaging a connection pool of 20 connections. At a particular time, 5 connections
    were getting used parallelly. But after that, there was no incoming request. So
    these 5 connections will wait for a value equal to “Idle Connection Timeout” before
    being released. An idle connection timeout of 1 sec should mean that a particular
    connection should not be idle for more than 1 second otherwise it will be released
    and a new connection will be creating for any new request.*
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个包含20个连接的连接池。在某个特定时刻，5个连接正在并行使用。但之后，没有新的请求。因此，这5个连接将在“闲置连接超时”的值之前等待释放。闲置连接超时为1秒应该意味着某个连接不得闲置超过1秒，否则它将被释放，并为任何新请求创建一个新连接。
