["```\nIf it walks like a duck and quack like a duck then it must be duck\n```", "```\ntype name_of_interface interface{\n//Method signature 1\n//Method signature 2\n}\n```", "```\ntype animal interface {\n    breathe()\n    walk()\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype animal interface {\n    breathe()\n    walk()\n}\n\nfunc main() {\n    var a animal\n    fmt.Println(a)\n}\n```", "```\nnil\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype animal interface {\n    breathe()\n    walk()\n}\n\ntype lion struct {\n    age int\n}\n\nfunc (l lion) breathe() {\n    fmt.Println(\"Lion breathes\")\n}\n\nfunc (l lion) walk() {\n    fmt.Println(\"Lion walk\")\n}\n\nfunc main() {\n    var a animal\n    a = lion{age: 10}\n    a.breathe()\n    a.walk()\n}\n```", "```\nLion breathes\nLion walk\n```", "```\nvar a animal\n```", "```\na = lion{}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype animal interface {\n    breathe()\n    walk()\n}\n\ntype lion struct {\n     age int\n}\n\nfunc (l lion) breathe() {\n    fmt.Println(\"Lion breathes\")\n}\n\nfunc (l lion) walk() {\n    fmt.Println(\"Lion walk\")\n}\n\ntype dog struct {\n     age int\n}\n\nfunc (l dog) breathe() {\n    fmt.Println(\"Dog breathes\")\n}\n\nfunc (l dog) walk() {\n    fmt.Println(\"Dog walk\")\n}\n\nfunc main() {\n    var a animal\n\n    a = lion{age: 10}\n    a.breathe()\n    a.walk()\n\n    a = dog{age: 5}\n    a.breathe()\n    a.walk()\n}\n```", "```\nLion breathes\nLion walk\nDog breathes\nDog walk\n```", "```\ncannot use lion literal (type lion) as type animal in assignment:\n```", "```\ntype animal interface {\n    breathe()\n    walk()\n    speed() int\n}\n```", "```\nfunc (l lion) speed()\n```", "```\ncannot use lion literal (type lion) as type animal in assignment:\n        lion does not implement animal (wrong type for speed method)\n                have speed()\n                want speed() int\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype animal interface {\n\tbreathe()\n\twalk()\n}\n\ntype lion struct {\n     age int\n}\n\nfunc (l lion) breathe() {\n\tfmt.Println(\"Lion breathes\")\n}\n\nfunc (l lion) walk() {\n\tfmt.Println(\"Lion walk\")\n}\n\ntype dog struct {\n     age int\n}\n\nfunc (l dog) breathe() {\n\tfmt.Println(\"Dog breathes\")\n}\n\nfunc (l dog) walk() {\n\tfmt.Println(\"Dog walk\")\n}\n\nfunc main() {\n\tl := lion{age: 10}\n\tcallBreathe(l)\n\tcallWalk(l)\n\n\td := dog{age: 5}\n\tcallBreathe(d)\n\tcallWalk(d)\n}\n\nfunc callBreathe(a animal) {\n\ta.breathe()\n}\n\nfunc callWalk(a animal) {\n\ta.breathe()\n}\n```", "```\nLion breathes\nLion walk\nDog breathes\nDog walk\n```", "```\ntype taxCalculator interface{\n    calculateTax()\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype taxSystem interface {\n    calculateTax() int\n}\ntype indianTax struct {\n    taxPercentage int\n    income        int\n}\nfunc (i *indianTax) calculateTax() int {\n    tax := i.income * i.taxPercentage / 100\n    return tax\n}\ntype singaporeTax struct {\n    taxPercentage int\n    income        int\n}\nfunc (i *singaporeTax) calculateTax() int {\n    tax := i.income * i.taxPercentage / 100\n    return tax\n}\ntype usaTax struct {\n    taxPercentage int\n    income        int\n}\nfunc (i *usaTax) calculateTax() int {\n    tax := i.income * i.taxPercentage / 100\n    return tax\n}\nfunc main() {\n    indianTax := &indianTax{\n        taxPercentage: 30,\n        income:        1000,\n    }\n    singaporeTax := &singaporeTax{\n        taxPercentage: 10,\n        income:        2000,\n    }\n\n    taxSystems := []taxSystem{indianTax, singaporeTax}\n    totalTax := calculateTotalTax(taxSystems)\n\n    fmt.Printf(\"Total Tax is %d\\n\", totalTax)\n}\nfunc calculateTotalTax(taxSystems []taxSystem) int {\n    totalTax := 0\n    for _, t := range taxSystems {\n        totalTax += t.calculateTax() //This is where runtime polymorphism happens\n    }\n    return totalTax\n}\n```", "```\nTotal Tax is 300\n```", "```\n totalTax += t.calculateTax() //This is where runtime polymorphism happens\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype animal interface {\n    breathe()\n    walk()\n}\n\ntype lion struct {\n    age int\n}\n\nfunc (l lion) breathe() {\n    fmt.Println(\"Lion breathes\")\n}\n\nfunc (l lion) walk() {\n    fmt.Println(\"Lion walk\")\n}\n\nfunc main() {\n    var a animal\n\n    a = lion{age: 10}\n    a.breathe()\n    a.walk()\n\n    a = &lion{age: 5}\n    a.breathe()\n    a.walk()\n}\n```", "```\nLion breathes\nLion walk\nLion breathes\nLion walk\n```", "```\na = lion{age: 10}\n```", "```\na = &lion{age: 5}\n```", "```\n a = &lion{age: 5}\n```", "```\na = lion{age: 10}\n```", "```\ncannot use lion literal (type lion) as type animal in assignment:\n        lion does not implement animal (breathe method has pointer receiver)\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype animal interface {\n\tbreathe()\n\twalk()\n}\n\ntype lion struct {\n\tage int\n}\n\nfunc (l *lion) breathe() {\n\tfmt.Println(\"Lion breathes\")\n}\n\nfunc (l *lion) walk() {\n\tfmt.Println(\"Lion walk\")\n}\n\nfunc main() {\n\tvar a animal\n\n\t//a = lion{age: 10}\n\ta.breathe()\n\ta.walk()\n\n\ta = &lion{age: 5}\n\ta.breathe()\n\ta.walk()\n}\n```", "```\na = lion{age: 10}\n```", "```\ncannot use lion literal (type lion) as type animal in assignment:\n        lion does not implement animal (breathe method has pointer receiver)\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype animal interface {\n\tbreathe()\n\twalk()\n}\n\ntype cat string\n\nfunc (c cat) breathe() {\n\tfmt.Println(\"Cat breathes\")\n}\n\nfunc (c cat) walk() {\n\tfmt.Println(\"Cat walk\")\n}\n\nfunc main() {\n\tvar a animal\n\n\ta = cat(\"smokey\")\n\ta.breathe()\n\ta.walk()\n}\n```", "```\nCat breathes\nCat walk\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype animal interface {\n    breathe()\n    walk()\n}\n\ntype mammal interface {\n    feed()\n}\n\ntype lion struct {\n     age int\n}\nfunc (l lion) breathe() {\n    fmt.Println(\"Lion breathes\")\n}\nfunc (l lion) walk() {\n    fmt.Println(\"Lion walk\")\n}\nfunc (l lion) feed() {\n    fmt.Println(\"Lion feeds young\")\n}\nfunc main() {\n    var a animal\n    l := lion{}\n    a = l\n    a.breathe()\n    a.walk()\n    var m mammal\n    m = l\n    m.feed()\n}\n```", "```\nLion breathes\nLion walk\nLion feeds young\n```", "```\npackage main\n\nimport \"fmt\"\ntype animal interface {\n    breathe()\n    walk()\n}\n\nfunc main() {\n    var a animal\n    fmt.Println(a)\n}\n```", "```\nnil\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype animal interface {\n    breathe()\n    walk()\n}\n\ntype lion struct {\n    age int\n}\n\nfunc (l lion) breathe() {\n    fmt.Println(\"Lion breathes\")\n}\n\nfunc (l lion) walk() {\n    fmt.Println(\"Lion walk\")\n}\n\nfunc main() {\n    var a animal\n    a = lion{age: 10}\n    fmt.Printf(\"Underlying Type: %T\\n\", a)\n    fmt.Printf(\"Underlying Value: %v\\n\", a)\n}\n```", "```\nConcrete Type: main.lion\nConcrete Value: {10}\n```", "```\ntype animal interface {\n    breathe()\n    walk()\n}\n```", "```\ntype human interface {\n    animal\n    speak()\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype animal interface {\n\tbreathe()\n\twalk()\n}\n\ntype human interface {\n\tanimal\n\tspeak()\n}\n\ntype employee struct {\n\tname string\n}\n\nfunc (e employee) breathe() {\n\tfmt.Println(\"Employee breathes\")\n}\n\nfunc (e employee) walk() {\n\tfmt.Println(\"Employee walk\")\n}\n\nfunc (e employee) speak() {\n\tfmt.Println(\"Employee speaks\")\n}\n\nfunc main() {\n\tvar h human\n\n\th = employee{name: \"John\"}\n\th.breathe()\n\th.walk()\n\th.speak()\n}\n```", "```\nEmployee breathes\nEmployee walk\nEmployee speaks\n```", "```\ntype ReadWriter interface {\n    Reader\n    Writer\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype animal interface {\n    breathe()\n    walk()\n}\n\ntype dog struct {\n    age int\n}\n\nfunc (d dog) breathe() {\n    fmt.Println(\"Dog breathes\")\n}\n\nfunc (d dog) walk() {\n    fmt.Println(\"Dog walk\")\n}\n\ntype pet1 struct {\n    a    animal\n    name string\n}\n\ntype pet2 struct {\n    animal\n    name string\n}\n\nfunc main() {\n    d := dog{age: 5}\n    p1 := pet1{name: \"Milo\", a: d}\n\n    fmt.Println(p1.name)\n    // p1.breathe()\n    // p1.walk()\n    p1.a.breathe()\n    p1.a.walk()\n\n    p2 := pet2{name: \"Oscar\", animal: d}\n    fmt.Println(p1.name)\n    p2.breathe()\n    p2.walk()\n    p1.a.breathe()\n    p1.a.walk()\n}\n```", "```\nMilo\nDog breathes\nDod walk\n\nOscar\nDog breathes\nDog walk\nDog breathes\nDog walk\n```", "```\ntype pet1 struct {\n    a    animal\n    name string\n}\n```", "```\ntype pet2 struct {\n    animal\n    name string\n}\n```", "```\np1.a.breathe()\np1.a.walk()\n```", "```\np1.breathe()\np1.walk()\n```", "```\np1.breathe undefined (type pet1 has no field or method breathe)\np1.walk undefined (type pet1 has no field or method walk)\n```", "```\np2.breathe()\np2.walk()\n```", "```\np2.animal.breathe()\np2.animal.walk()\n```", "```\np1 := pet1{name: \"Milo\", a: d}\np2 := pet2{name: \"Oscar\", animal: d}\n```", "```\nval := i.({type})\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype animal interface {\n\tbreathe()\n\twalk()\n}\n\ntype lion struct {\n\tage int\n}\n\nfunc (l lion) breathe() {\n\tfmt.Println(\"Lion breathes\")\n}\n\nfunc (l lion) walk() {\n\tfmt.Println(\"Lion walk\")\n}\n\ntype dog struct {\n\tage int\n}\n\nfunc (d dog) breathe() {\n\tfmt.Println(\"Dog breathes\")\n}\n\nfunc (d dog) walk() {\n\tfmt.Println(\"Dog walk\")\n}\n\nfunc main() {\n\tvar a animal\n\n\ta = lion{age: 10}\n\tprint(a)\n\n}\n\nfunc print(a animal) {\n\tl := a.(lion)\n\tfmt.Printf(\"Age: %d\\n\", l.age)\n\n\t//d := a.(dog)\n\t//fmt.Printf(\"Age: %d\\n\", d.age)\n}\n```", "```\nAge: 10\n```", "```\nl := a.(lion)\n```", "```\n//d := a.(dog)\n```", "```\nval, ok := i.(<type>)</type>\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype animal interface {\n\tbreathe()\n\twalk()\n}\n\ntype lion struct {\n\tage int\n}\n\nfunc (l lion) breathe() {\n\tfmt.Println(\"Lion breathes\")\n}\n\nfunc (l lion) walk() {\n\tfmt.Println(\"Lion walk\")\n}\n\ntype dog struct {\n\tage int\n}\n\nfunc (d dog) breathe() {\n\tfmt.Println(\"Dog breathes\")\n}\n\nfunc (d dog) walk() {\n\tfmt.Println(\"Dog walk\")\n}\n\nfunc main() {\n\tvar a animal\n\n\ta = lion{age: 10}\n\tprint(a)\n\n}\n\nfunc print(a animal) {\n\tl, ok := a.(lion)\n\tif ok {\n\t\tfmt.Println(l)\n\t} else {\n\t\tfmt.Println(\"a is not of type lion\")\n\t}\n\n\td, ok := a.(dog)\n\tif ok {\n\t\tfmt.Println(d)\n\t} else {\n\t\tfmt.Println(\"a is not of type lion\")\n\t}\n}\n```", "```\n{10}\na is not of type lion\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype animal interface {\n\tbreathe()\n\twalk()\n}\n\ntype lion struct {\n\tage int\n}\n\nfunc (l lion) breathe() {\n\tfmt.Println(\"Lion breathes\")\n}\n\nfunc (l lion) walk() {\n\tfmt.Println(\"Lion walk\")\n}\n\ntype dog struct {\n\tage int\n}\n\nfunc (d dog) breathe() {\n\tfmt.Println(\"Dog breathes\")\n}\n\nfunc (d dog) walk() {\n\tfmt.Println(\"Dog walk\")\n}\n\nfunc main() {\n\tvar a animal\n\n\tx = lion{age: 10}\n\tprint(x)\n\n}\n\nfunc print(a animal) {\n\tswitch v := a.(type) {\n\tcase lion:\n\t\tfmt.Println(\"Type: lion\")\n\tcase dog:\n\t\tfmt.Println(\"Type: dog\")\n\tdefault:\n\t\tfmt.Printf(\"Unknown Type %T\", v)\n\t}\n}\n```", "```\nType: lion\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    test(\"thisisstring\")\n    test(\"10\")\n    test(true)\n}\n\nfunc test(a interface{}) {\n    fmt.Printf(\"(%v, %T)\\n\", a, a)\n}\n```", "```\n(thisisstring, string)\n(10, string)\n(true, bool)\n```"]