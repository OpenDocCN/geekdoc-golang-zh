- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:07:07'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Iterative Binary Search Tree in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/iterative-binary-search-tree-go/](https://golangbyexample.com/iterative-binary-search-tree-go/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Introduction](#Introduction "Introduction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Full Working Code](#Full_Working_Code "Full Working Code")*  *# **Introduction**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A binary search tree abbreviated as BST is a binary tree. For each node in a
    Binary Search Tree
  prefs: []
  type: TYPE_NORMAL
- en: Value of each node in the left  subtree is less than the current node value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Value of each node in the right subtree is greater than the current node value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both left and right subtree are themselves Binary Search Tree
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Full Working Code**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**insertRec()** function inserts into the bst in an iterative manner'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[bst](https://golangbyexample.com/tag/bst/)*   [go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*   [iterative](https://golangbyexample.com/tag/iterative/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
