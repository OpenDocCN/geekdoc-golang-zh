- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:37:50'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Print function in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/print-function-golang/](https://golangbyexample.com/print-function-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](img/a1351ff423b96c7f5cfda45be9f96f65.png)'
  prefs: []
  type: TYPE_IMG
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Program](#Program "Program")*  *## **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Print** is defined in the **fmt** package and is used to format a string
    and write to standard output'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Below is the function prototype of **Print**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Print** formats the string using the default format specifier but does not
    add a new line after the string. **Print** takes a variable number of arguments
    where each argument is an empty interface. It returns the number of characters
    printed and any error if happens. Since the argument type is an empty interface
    we can pass any data type to it. We can pass a string, int, float, struct, or
    any other data type. Each of the arguments to the **Print** function is formatted
    according to the default format specifier of that argument type. For example,
    the struct will be formatted according to the below specifier'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This format specifier only prints the Value part in the struct. There is also
    one more function provided by **fmt** package which appends a new line – **Println**.
    The **Print** function is exactly the same as the **Println** function other than
    two differences
  prefs: []
  type: TYPE_NORMAL
- en: It does not append a newline at the end. We need to use the new line identifier
    to add a new line “\n”.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Space is only added between the arguments if neither of the operands is a string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s see an example
  prefs: []
  type: TYPE_NORMAL
- en: '**Program**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s see an example for the same
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Some important points to note about the **Print** function
  prefs: []
  type: TYPE_NORMAL
- en: It does not append a new line at the end. That is why need to use **“\n”** for
    adding a new line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It only adds space between two arguments if each of them is a non-string. That
    is why
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: prints
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: while
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: prints
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: It also returns the number of characters printed and any error if happens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: will output below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The number of **bytesPrinted** is 14 as 14 characters are outputted
  prefs: []
  type: TYPE_NORMAL
- en: Also, check out our Golang advance tutorial Series – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)*
  prefs: []
  type: TYPE_NORMAL
