- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:00:33'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Inheritance in GO using struct (Embedding)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/inheritance-go-struct/](https://golangbyexample.com/inheritance-go-struct/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This post desicribes inheritance using struct only. Do visit our Inheritance
    in Go Complete Guide post for full reference
  prefs: []
  type: TYPE_NORMAL
- en: '[OOP: Inheritance in GOLANG complete guide](https://golangbyexample.com/oop-inheritance-golang-complete/)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[https://golangbyexample.com/oop-inheritance-golang-complete/embed/#?secret=z8WWaJ1OiI#?secret=zH9oZkEbS3](https://golangbyexample.com/oop-inheritance-golang-complete/embed/#?secret=z8WWaJ1OiI#?secret=zH9oZkEbS3)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go supports inheritance by embedding struct or using interface. There are different
    ways of doing it and each having some limitations. The different ways are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**By using embedded struct** – The parent struct is embedded in child struct.
    The limitation is that subtyping is not possible with this approach. You cannot
    pass the child struct to a function that expects base. The current post describes
    this approach.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By using interfaces – Subtyping is possible but the limitation is that one has
    no way to refer to common properties. Refer this link for more details – [**Inheritance
    using Interface**](https://golangbyexample.com/inheritance-go-interface/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By using interface + struct – This fixes the limitations of above two approach
    but one limitation is that overriding methods is not possible. But there is a
    workaround. Refer to this link for more details – [**Inheritance using interface
    + struct**](https://golangbyexample.com/inheritance-go-interface-struct/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Details:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In inheritance using a struct, a base struct is embedded in child struct and
    base properties and methods can directly be called on child struct. See below
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Limitation:**'
  prefs: []
  type: TYPE_NORMAL
- en: Subtyping is not supported. You cannot pass the child struct to a function that
    expects base.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example in the above code if you uncomment **//check(child)** it will give
    compilation error: “cannot use child (type *child) as type base in argument to
    check”. To fix this we can do inheritance using Interface'
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*   [inheritance](https://golangbyexample.com/tag/inheritance/)*   [interface](https://golangbyexample.com/tag/interface/)*   [struct](https://golangbyexample.com/tag/struct/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
