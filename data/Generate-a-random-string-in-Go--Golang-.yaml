- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:16:46'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:16:46
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Generate a random string in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Go（Golang）中生成随机字符串
- en: 来源：[https://golangbyexample.com/generate-random-string-golang/](https://golangbyexample.com/generate-random-string-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/generate-random-string-golang/](https://golangbyexample.com/generate-random-string-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Code](#Code "Code")*  *# **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[代码](#Code "Code")*  *# **概述**'
- en: '**‘mat/rand’** package of golang contains a **Intn** function that can be used
    to generate a pseudo-random number between [0,n). Bracket at the end means that
    n is exclusive. This function can be utilized to generate a random string from
    a character set.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**‘mat/rand’**包的golang包含一个**Intn**函数，可用于生成一个介于[0,n)之间的伪随机数。末尾的括号表示n是排除的。该函数可以用来从字符集生成一个随机字符串。'
- en: To know more about what pseudo-random number means, checkout this post – [https://golangbyexample.com/generate-random-number-golang](https://golangbyexample.com/generate-random-number-golang)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于伪随机数的含义，请查看这篇文章 – [https://golangbyexample.com/generate-random-number-golang](https://golangbyexample.com/generate-random-number-golang)
- en: Below is the signature of this method. It takes input a number n and will return
    a number x in range 0<=x<n.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是该方法的签名。它输入一个数字n，并返回一个范围在0<=x<n内的数字x。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Above function can be used to generate a random string. Basically we first select
    a charSet. Then we use the above function to generate a random number and then
    use that random number to get a random character from the charSet. This random
    character is added to a string until we have a random string of desired length.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数可用于生成随机字符串。基本上，我们首先选择一个charSet。然后我们使用上述函数生成一个随机数，再用这个随机数从charSet中获取一个随机字符。这个随机字符被添加到字符串中，直到我们得到一个所需长度的随机字符串。
- en: '**Code**'
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**代码**'
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Output:**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: Below is the output on my machine. On your's it might give a different output
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我机器上的输出。在你的机器上可能会给出不同的输出。
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In above program we are using character set as
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，我们使用的字符集为
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: All the above characters in charSet were ASCII characters hence we were able
    to index a character in **charSet** string. But this could be problem if the **charSet**
    contains non-ASCII character.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述字符集中，所有字符都是ASCII字符，因此我们能够在**charSet**字符串中索引一个字符。但如果**charSet**包含非ASCII字符，这可能会成为一个问题。
- en: In Golang string is a sequence of bytes. A string literal actually represents
    a UTF-8 sequence of bytes. In UTF-8, ASCII characters are single-byte corresponding
    to the first 128 Unicode characters. All other characters are between 1 to 4 bytes.
    Due to this it is not possible to index a character in a string.  In GO, rune
    data type represents a Unicode point.  Once a string is converted to an array
    of rune then it is possible to index a character in that array of rune.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Golang中，字符串是字节的序列。字符串字面量实际上表示UTF-8字节序列。在UTF-8中，ASCII字符是单字节的，对应前128个Unicode字符。所有其他字符占用1到4个字节。因此，不可能在字符串中索引一个字符。在GO中，rune数据类型表示一个Unicode点。一旦字符串被转换为一个rune数组，就可以在该数组中索引字符。
- en: So in case, the character set contains some characters that are not ASCII they
    might occupy more than 1 bytes. In that case, we cannot use the above code to
    generate a random string as we cannot index into the charSet. For this case, we
    have to first convert a string into a rune array so that we can index into the
    rune array to the character and then incrementally form the random string.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果字符集包含一些非ASCII字符，它们可能会占用多个字节。在这种情况下，我们不能使用上述代码生成随机字符串，因为无法在charSet中索引。对此，我们必须首先将字符串转换为rune数组，以便能够在rune数组中索引字符，然后逐步形成随机字符串。
- en: As in the below example, our charSet contains a non-ASCII character **'£'.**
    This character occupies two bytes
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们的charSet包含一个非ASCII字符**'£'**。该字符占用两个字节。
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Output**:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**：'
- en: Below is the output on my machine. On yours it might give a different output
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我机器上的输出。在你的机器上可能会给出不同的输出。
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*   [random](https://golangbyexample.com/tag/random/)*   [string](https://golangbyexample.com/tag/string/)*'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*   [random](https://golangbyexample.com/tag/random/)*   [string](https://golangbyexample.com/tag/string/)*'
