- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:39:25'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Return an image or file in HTTP response in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/image-http-response-golang/](https://golangbyexample.com/image-http-response-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Example](#Example "Example")*  *## **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Write** method of the **ResponseWriter** interface in **net/http** package
    can be used to send the **image** or **file** body in an HTTP response body. When
    we send a file or image as part of the HTTP response, then the Content-Type response
    header is'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In GO a response is represented by the **ResponseWriter** Interface.  Here is
    the link to the interface –
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: ResponseWriter interface is used by an HTTP handler to construct an HTTP response.
    It provides three functions to set the response parameters
  prefs: []
  type: TYPE_NORMAL
- en: Header – For writing response header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write([]byte) – For writing response body
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WriteHeader(statusCode int) – For writing the http status code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Write** function can be used to set the response body. It takes a slice of
    bytes as input. Hence we need to read the file or image into a slice of bytes
    before passing it as an argument to the **Write** function. For this we will use
    the **ReadFile** function provided by the **ioutil** package of golang. Also,
    there is a **Header** function. This function can be used to set the content type
    of the response body using the Content-Type header.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Also, note that **WriteHeader** function can be used to set the HTTP status
    code for the response.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s see an example of sending a file or an image as part of an HTTP response.
    Below is the program for the same
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is how we read the file or image into a variable in Go
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We then pass this variable to the **Write** function
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that in the above program we are sending **test.png** which is present
    locally at my machine. You can replace it with any other file present on your
    machine. It could be png or any other file.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we are using the **WriteHeader** function to specify the **200** http
    status code.  We are also setting the correct header
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Run the above program. It will start a server on 8080 port on your local machine.
    Now make the below curl call to the server. Notice in the curl call that we are
    saving the output to a local file as well
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Output will be something like below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now check at the current directory in the terminal from which you made the curl
    call. A file named **test.png** will be present which is the same file that was
    sent by the server.
  prefs: []
  type: TYPE_NORMAL
- en: Also, check out our Golang advance tutorial Series - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
