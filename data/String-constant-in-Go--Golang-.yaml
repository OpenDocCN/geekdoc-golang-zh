- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:28:06'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:28:06
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: String constant in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go中的字符串常量（Golang）
- en: 来源：[https://golangbyexample.com/string-constant-golang/](https://golangbyexample.com/string-constant-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/string-constant-golang/](https://golangbyexample.com/string-constant-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**[概述](#Overview "Overview")**'
- en: '[Example](#Example "Example")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[示例](#Example "Example")'
- en: '[Typed string constant](#Typed_string_constant "Typed string constant")'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[有类型的字符串常量](#Typed_string_constant "Typed string constant")'
- en: '[Untyped named string constant](#Untyped_named_string_constant "Untyped named
    string constant")'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[未类型化的命名字符串常量](#Untyped_named_string_constant "Untyped named string constant")'
- en: '[Untyped unnamed string constant](#Untyped_unnamed_string_constant "Untyped
    unnamed string constant")*  *# **Overview**'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[未类型化的未命名字符串常量](#Untyped_unnamed_string_constant "Untyped unnamed string constant")
    *  *# **概述**'
- en: In go string constant is represented in two ways
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go中，字符串常量以两种方式表示
- en: Any value that is enclosed between double quotes
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何用双引号括起来的值
- en: Any value enclosed between back quotes
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何用反引号括起来的值
- en: To better understand string constant in golang it is important to understand
    typed and untyped constant in go. Please refer to this article for that [https://golangbyexample.com/typed-untyped-constant-golang/](https://golangbyexample.com/typed-untyped-constant-golang/)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解Golang中的字符串常量，了解Go中的有类型和无类型常量是重要的。请参阅这篇文章：[https://golangbyexample.com/typed-untyped-constant-golang/](https://golangbyexample.com/typed-untyped-constant-golang/)
- en: Once you have gone through the article you would have understood that constant
    can be declared in three ways
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你阅读了这篇文章，你会理解常量可以以三种方式声明
- en: Typed  constant
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有类型常量
- en: Untyped unnamed  constant
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未类型化的未命名常量
- en: Untyped named constant
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未类型化的命名常量
- en: It is the same case with string as well. Let’s see a program to understand it
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串的情况也是如此。让我们看一个程序来理解它。
- en: '**Example**'
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**示例**'
- en: Below program shows example of a
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序展示了一个示例
- en: Typed string constant
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有类型的字符串常量
- en: Untyped unnamed string constant
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未类型化的未命名字符串常量
- en: Untyped named string constant
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未类型化的命名字符串常量
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output:**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above program, we created a new type **myString** in code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们在代码中创建了一个新类型**myString**。
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Also above program shows the example of
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序还展示了一个示例
- en: Typed string constant
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有类型的字符串常量
- en: Untyped unnamed string constant
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未类型化的未命名字符串常量
- en: Untyped named string constant
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未类型化的命名字符串常量
- en: Let’s understand each of them and their behaviour
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解它们的每一种及其行为
- en: '**Typed string constant**'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**有类型的字符串常量**'
- en: It is defined as below
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 定义如下
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice in above that below line will cause a compilation error. This is because
    of typed string constant **aa** is of type **string**. So below line will cause
    compilation error as it cannot be assigned to variable of type **myString**
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 上述内容注意，下面的行将导致编译错误。这是因为类型字符串常量**aa**的类型是**string**。因此，下面的行将导致编译错误，因为它无法分配给类型为**myString**的变量。
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: But typed string constant can be assigned to a variable created with **var**
    keyword like below
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，有类型的字符串常量可以分配给用**var**关键字创建的变量，如下所示
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Untyped named string constant**'
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**未类型化的命名字符串常量**'
- en: It is defined as below
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 定义如下
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Untyped named string constant can be assigned to variable of type **myString**
    as well variable created with **var** keyword because it is untyped so type of
    the constant will be decided depending upon the type of variable they are being
    assigned to.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 未类型化的命名字符串常量可以分配给类型为**myString**的变量，以及用**var**关键字创建的变量，因为它是未类型化的，因此常量的类型将根据被分配的变量的类型决定。
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Untyped unnamed string constant**'
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**未类型化的未命名字符串常量**'
- en: It is like below
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 它如下所示
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Untyped unnamed string constant can be assigned to variable of type **myString**
    as well variable created with **var** keyword because it is untyped so type of
    the constant will be decided depending upon the type of variable they are being
    assigned to.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 未类型化的未命名字符串常量可以分配给类型为**myString**的变量，以及用**var**关键字创建的变量，因为它是未类型化的，因此常量的类型将根据被分配的变量的类型决定。
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/) *   [golang](https://golangbyexample.com/tag/golang/)*'
