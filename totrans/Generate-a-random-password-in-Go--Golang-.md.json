["```\nfunc Intn(n int) int\n```", "```\nlowerCharSet   = \"abcdedfghijklmnopqrst\"\nupperCharSet   = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nspecialCharSet = \"!@#$%&*\"\nnumberSet      = \"0123456789\"\nallCharSet     = lowerCharSet + upperCharSet + specialCharSet + numberSet\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n    \"strings\"\n    \"time\"\n)\n\nvar (\n    lowerCharSet   = \"abcdedfghijklmnopqrst\"\n    upperCharSet   = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    specialCharSet = \"!@#$%&*\"\n    numberSet      = \"0123456789\"\n    allCharSet     = lowerCharSet + upperCharSet + specialCharSet + numberSet\n)\n\nfunc main() {\n    rand.Seed(time.Now().Unix())\n    minSpecialChar := 1\n    minNum := 1\n    minUpperCase := 1\n    passwordLength := 8\n    password := generatePassword(passwordLength, minSpecialChar, minNum, minUpperCase)\n    fmt.Println(password)\n\n    minSpecialChar = 2\n    minNum = 2\n    minUpperCase = 2\n    passwordLength = 20\n    password = generatePassword(passwordLength, minSpecialChar, minNum, minUpperCase)\n    fmt.Println(password)\n}\n\nfunc generatePassword(passwordLength, minSpecialChar, minNum, minUpperCase int) string {\n    var password strings.Builder\n\n    //Set special character\n    for i := 0; i < minSpecialChar; i++ {\n        random := rand.Intn(len(specialCharSet))\n        password.WriteString(string(specialCharSet[random]))\n    }\n\n    //Set numeric\n    for i := 0; i < minNum; i++ {\n        random := rand.Intn(len(numberSet))\n        password.WriteString(string(numberSet[random]))\n    }\n\n    //Set uppercase\n    for i := 0; i < minUpperCase; i++ {\n        random := rand.Intn(len(upperCharSet))\n        password.WriteString(string(upperCharSet[random]))\n    }\n\n    remainingLength := passwordLength - minSpecialChar - minNum - minUpperCase\n    for i := 0; i < remainingLength; i++ {\n        random := rand.Intn(len(allCharSet))\n        password.WriteString(string(allCharSet[random]))\n    }\n    inRune := []rune(password.String())\n\trand.Shuffle(len(inRune), func(i, j int) {\n\t\tinRune[i], inRune[j] = inRune[j], inRune[i]\n\t})\n\treturn string(inRune)\n}\n```", "```\ne$e&tD19\n4T$&Qmg2rA4DXD5a2OGs\n```"]