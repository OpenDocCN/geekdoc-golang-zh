["```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    a := []string{\"a\", \"b\"}\n    go checkAndPrintWithRecover(a, 2)\n    fmt.Println(\"Exiting normally\")\n}\n\nfunc checkAndPrintWithRecover(a []string, index int) {\n    defer handleOutOfBounds()\n    checkAndPrint(a, 2)\n}\n\nfunc checkAndPrint(a []string, index int) {\n    if index > (len(a) - 1) {\n        panic(\"Out of bound access for slice\")\n    }\n    fmt.Println(a[index])\n}\n\nfunc handleOutOfBounds() {\n    if r := recover(); r != nil {\n        fmt.Println(\"Recovering from panic:\", r)\n    }\n}\n```", "```\nExiting normally\nRecovering from panic: Out of bound access for slice\n```", "```\npackage main\nimport \"fmt\"\nfunc main() {\n    a := []string{\"a\", \"b\"}\n    checkAndPrintWithRecover(a, 2)\n    fmt.Println(\"Exiting normally\")\n}\nfunc checkAndPrintWithRecover(a []string, index int) {\n    defer handleOutOfBounds()\n    go checkAndPrint(a, 2)\n}\nfunc checkAndPrint(a []string, index int) {\n    if index > (len(a) - 1) {\n        panic(\"Out of bound access for slice\")\n    }\n    fmt.Println(a[index])\n}\nfunc handleOutOfBounds() {\n    if r := recover(); r != nil {\n        fmt.Println(\"Recovering from panic:\", r)\n    }\n}\n```", "```\nExiting normally\npanic: Out of bound access for slice\n\ngoroutine 18 [running]:\nmain.checkAndPrint(0xc0000a6020, 0x2, 0x2, 0x2)\n        /Users/slohia/go/src/github.com/golang-examples/articles/tutorial/panicRecover/goroutine/main.go:19 +0xe2\ncreated by main.checkAndPrintWithRecover\n        /Users/slohia/go/src/github.com/golang-examples/articles/tutorial/panicRecover/goroutine/main.go:14 +0x82\nexit status 2\n```"]