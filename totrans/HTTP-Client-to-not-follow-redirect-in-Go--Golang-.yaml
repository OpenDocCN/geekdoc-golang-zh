- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:34:11'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:34:11
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: HTTP Client to not follow redirect in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP 客户端在 Go (Golang) 中不跟随重定向。
- en: 来源：[https://golangbyexample.com/http-no-redirect-client-golang/](https://golangbyexample.com/http-no-redirect-client-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/http-no-redirect-client-golang/](https://golangbyexample.com/http-no-redirect-client-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[CheckDirect is nil](#CheckDirect_is_nil "CheckDirect is nil")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CheckDirect 是 nil](#CheckDirect_is_nil "CheckDirect is nil")'
- en: '[CheckDirect is not-nil](#CheckDirect_is_not-nil "CheckDirect is not-nil")*  *#
    **Overview**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CheckDirect 是非 nil](#CheckDirect_is_not-nil "CheckDirect is not-nil")*  *#
    **概述**'
- en: '**http.Client** struct is used to make HTTP requests in golang.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**http.Client** 结构用于在 golang 中发起 HTTP 请求。'
- en: '[https://golang.org/src/net/http/client.go](https://golang.org/src/net/http/client.go)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://golang.org/src/net/http/client.go](https://golang.org/src/net/http/client.go)'
- en: '**http.Client** lets you specify a policy of how redirects can be handled. 
    Below is the structure of **http.Client** struct'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**http.Client** 让你指定重定向处理的策略。以下是 **http.Client** 结构的结构。'
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The **CheckRedirect** field is a function actually which lets you specify a
    way of how redirects can be handled. This function is called before following
    any future redirects. So basically whenever the server responds with a redirect
    the client will first call the **CheckRedirect** function to check if redirect
    should be followed or not. Below is the signature of the **CheckRedirect** function
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**CheckRedirect** 字段实际上是一个函数，它允许你指定处理重定向的方式。此函数在跟随任何未来的重定向之前被调用。因此，基本上，每当服务器响应重定向时，客户端会首先调用
    **CheckRedirect** 函数以检查是否应跟随重定向。以下是 **CheckRedirect** 函数的签名。'
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first parameter **req** is the upcoming request
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数 **req** 是即将到来的请求。
- en: The second parameter **via** is the requests already made. That is why it is
    a slice. The first element is the oldest request.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数 **via** 是已经发出的请求。这就是它是一个切片的原因。第一个元素是最旧的请求。
- en: There are two cases to consider
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种情况需要考虑。
- en: '**CheckDirect is nil**'
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**CheckDirect 是 nil**'
- en: You don’t specify the CheckRedirect field during the initialization of **http.Client**
    struct. In this case, default behavior kicks in, and the HTTP client will follow
    10 redirects, and then it will return an error.  Below is the **defaultCheckRedirect**
    function which quits after 10 retries.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化 **http.Client** 结构时，你不指定 CheckRedirect 字段。在这种情况下，将启用默认行为，HTTP 客户端将跟随 10
    次重定向，然后返回错误。以下是 **defaultCheckRedirect** 函数，它在尝试 10 次后退出。
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**CheckDirect is not-nil**'
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**CheckDirect 是非 nil**'
- en: You specify your own **CheckRedirect** function during the initialization of
    the **http.Client** struct. When you specify this function, then this function
    will be called before following any future redirect.  When you write your own
    CheckRedirect function you need to know the below things in mind
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化 **http.Client** 结构时，你指定自己的 **CheckRedirect** 函数。当你指定此函数时，它将在跟随任何未来的重定向之前被调用。当你编写自己的
    CheckRedirect 函数时，需要记住以下内容。
- en: When the **CheckRedirect** function returns an error, then the HTTP client will
    return two things
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当 **CheckRedirect** 函数返回错误时，HTTP 客户端将返回两件事。
- en: The previous response along with body closed
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上一个响应以及请求体已关闭。
- en: The actual error (wrapped in a **url.Error)**
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际错误（包装在 **url.Error** 中）。
- en: '**There is also a special case when **CheckRedirect** function returns **ErrUseLastResponse**
    error. In this case, the client will return**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**还有一种特殊情况，当 **CheckRedirect** 函数返回 **ErrUseLastResponse** 错误时。在这种情况下，客户端将返回。**'
- en: '***   Most recent response along with body unclosed'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '***   最近的响应以及未关闭的请求体。'
- en: Non-nil error
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非 nil 错误
- en: So basically when you don’t want HTTP Client to follow the redirect, then please
    specify your own **CheckRedirect** function to control the behavior the way you
    want.  For example below is one sample **CheckRedirect** function that will inform
    HTTP client to not follow any redirect and also not return any error, just return
    the last response along with body unclosed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，基本上当你不想让 HTTP 客户端跟随重定向时，请指定自己的 **CheckRedirect** 函数以控制行为。例如，以下是一个示例 **CheckRedirect**
    函数，它会通知 HTTP 客户端不跟随任何重定向，并且不返回任何错误，仅返回最后的响应以及未关闭的请求体。
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here is the definition of **ErrUseLastResponse** in the http package
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 http 包中 **ErrUseLastResponse** 的定义。
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Create **http.Client** as below specifying the **CheckRedirect** function
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 **http.Client** 如下，指定 **CheckRedirect** 函数。
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here is another sample **CheckRedirect** function which will only follow redirect
    two times and then return the error
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个示例 **CheckRedirect** 函数，它将只跟随重定向两次，然后返回错误。
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[redirect](https://golangbyexample.com/tag/redirect/)***'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[重定向](https://golangbyexample.com/tag/redirect/)***'
