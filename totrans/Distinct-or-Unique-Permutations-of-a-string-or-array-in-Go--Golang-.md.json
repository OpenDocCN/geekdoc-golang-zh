["```\nInput: [2, 2, 1]\nOutput: [[2 2 1] [2 1 2] [1 2 2]]\n\nInput: [2, 2, 1, 1]\nOutput: [[2 2 1 1] [2 1 2 1] [2 1 1 2] [2 1 1 2] [2 1 2 1] [1 2 2 1] [1 2 1 2] [1 1 2 2] [1 2 1 2] [1 2 2 1] [1 1 2 2]]\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc permuteUnique(nums []int) [][]int {\n\treturn permuteUtil(nums, 0, len(nums), len(nums))\n}\n\nfunc shouldSwap(nums []int, start, index int) bool {\n\tfor i := start; i < index; i++ {\n\t\tif nums[start] == nums[index] {\n\t\t\treturn false\n\t\t}\n\n\t}\n\treturn true\n\n}\nfunc permuteUtil(nums []int, start, end int, length int) [][]int {\n\toutput := make([][]int, 0)\n\tif start == end-1 {\n\t\treturn [][]int{nums}\n\t} else {\n\t\tfor i := start; i < end; i++ {\n\t\t\tif shouldSwap(nums, start, i) {\n\t\t\t\tnums[start], nums[i] = nums[i], nums[start]\n\t\t\t\tn := make([]int, length)\n\t\t\t\tfor k := 0; k < length; k++ {\n\t\t\t\t\tn[k] = nums[k]\n\t\t\t\t}\n\t\t\t\to := permuteUtil(n, start+1, end, length)\n\t\t\t\toutput = append(output, o...)\n\t\t\t\tnums[i], nums[start] = nums[start], nums[i]\n\t\t\t}\n\n\t\t}\n\t}\n\treturn output\n}\n\nfunc main() {\n\toutput := permuteUnique([]int{2, 2, 1})\n\tfmt.Println(output)\n\n\toutput = permuteUnique([]int{2, 2, 1, 1})\n\tfmt.Println(output)\n}\n```", "```\n[[2 2 1] [2 1 2] [1 2 2]]\n[[2 2 1 1] [2 1 2 1] [2 1 1 2] [2 1 1 2] [2 1 2 1] [1 2 2 1] [1 2 1 2] [1 1 2 2] [1 2 1 2] [1 2 2 1] [1 1 2 2]]\n```"]