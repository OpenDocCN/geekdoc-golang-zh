- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:26:01'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:26:01
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Recover panic from goroutine in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Go (Golang)中的协程中恢复panic
- en: 来源：[https://golangbyexample.com/recover-panic-goroutine-go/](https://golangbyexample.com/recover-panic-goroutine-go/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/recover-panic-goroutine-go/](https://golangbyexample.com/recover-panic-goroutine-go/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Recover function in the same goroutine as panic](#Recover_function_in_the_same_goroutine_as_panic
    "Recover function in the same goroutine as panic")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在相同协程中作为panic的recover函数](#Recover_function_in_the_same_goroutine_as_panic
    "Recover function in the same goroutine as panic")'
- en: '[Recover function in a different goroutine as panic](#Recover_function_in_a_different_goroutine_as_panic
    "Recover function in a different goroutine as panic")*  *# **Overview**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在不同协程中的recover函数作为panic](#Recover_function_in_a_different_goroutine_as_panic
    "Recover function in a different goroutine as panic")*  *# **概述**'
- en: There are two cases for recovering from a panic in a goroutine
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复协程中恐慌的情况有两种。
- en: '**recover** function in the same goroutine as **panic**'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在相同协程中的recover函数作为**panic**'
- en: '**recover** function in a different goroutine as **panic**'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在不同协程中的recover函数作为**panic**'
- en: While in the first case it will recover from panic. But an important point to
    note about recover function is that it can only recover the panic happening in
    the same goroutine.  If the panic is happening in a different goroutine and recover is
    in a different goroutine then it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，它将从panic中恢复。但需要注意的一个重要点是，recover函数只能恢复在同一协程中发生的panic。如果panic发生在不同协程中，而recover也在不同协程中，则无法恢复。
- en: Let’s see an example for both
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看两个例子的情况。
- en: '****Recover function in the same goroutine as panic****'
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '****在相同协程中的recover函数作为panic****'
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above program **recover** and **panic** lie in the same goroutine hence
    it is able to recover from panic as seen from the output.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，**recover**和**panic**位于同一协程中，因此能够从panic中恢复，正如从输出中所见。
- en: '**Recover function in a different goroutine as panic**'
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**在不同协程中的recover函数作为panic**'
- en: As mentioned in this case it is not possible to recover from panic.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在这种情况下无法从panic中恢复。
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the above program we have **checkAndPrint** in the goroutine and it raises **panic**
    in that goroutine.  The **recover** function is in the calling goroutine. As you
    can see from the output that it does not stop **panic** and hence you see the
    a
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们在协程中有**checkAndPrint**，它在该协程中引发了**panic**。**recover**函数在调用协程中。正如您从输出中看到的，它并没有停止**panic**，因此您看到了一些信息。
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
