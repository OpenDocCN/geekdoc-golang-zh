- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:27:39'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:27:39
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Constant in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go（Golang）中的常量
- en: 来源：[https://golangbyexample.com/constant-golang/](https://golangbyexample.com/constant-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/constant-golang/](https://golangbyexample.com/constant-golang/)
- en: This is the  chapter 9 of the golang comprehensive tutorial series. Refer to
    this link for other chapters of the series – [Golang Comprehensive Tutorial Series](https://golangbyexample.com/golang-comprehensive-tutorial/)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是golang综合教程系列的第9章。有关该系列其他章节，请参考此链接 – [Golang综合教程系列](https://golangbyexample.com/golang-comprehensive-tutorial/)
- en: '**Next Tutorial** – [For Loop](https://golangbyexample.com/for-loop-in-golang/)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**下一个教程** – [for循环](https://golangbyexample.com/for-loop-in-golang/)'
- en: '**Previous Tutorial** –[Functions](https://golangbyexample.com/function-golang-complete-guide/)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**上一个教程** – [函数](https://golangbyexample.com/function-golang-complete-guide/)'
- en: Now let’s check out the current tutorial. Below is the table of contents for
    current tutorial.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们查看当前的教程。以下是当前教程的目录。
- en: Table of Contents
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**[概述](#Overview "Overview")**'
- en: '[Important Points](#Important_Points "Important Points")'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[重要点](#Important_Points "Important Points")'
- en: '[Typed and Untyped Constants](#Typed_and_Untyped_Constants "Typed and Untyped
    Constants")'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[类型和未类型常量](#Typed_and_Untyped_Constants "Typed and Untyped Constants")'
- en: '[Typed Constant](#Typed_Constant "Typed Constant")'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[类型常量](#Typed_Constant "Typed Constant")'
- en: '[Untyped Constant](#Untyped_Constant "Untyped Constant")'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[未类型常量](#Untyped_Constant "Untyped Constant")'
- en: '[Naming Conventions](#Naming_Conventions "Naming Conventions")'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[命名约定](#Naming_Conventions "Naming Conventions")'
- en: '[Global Constant](#Global_Constant "Global Constant")'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[全局常量](#Global_Constant "Global Constant")'
- en: '[Types of Constants](#Types_of_Constants "Types of Constants")'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[常量类型](#Types_of_Constants "Types of Constants")'
- en: '[String Constant](#String_Constant "String Constant")'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[字符串常量](#String_Constant "String Constant")'
- en: '[Numeric Constant](#Numeric_Constant "Numeric Constant")'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数字常量](#Numeric_Constant "Numeric Constant")'
- en: '[Boolean Constant](#Boolean_Constant "Boolean Constant")'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[布尔常量](#Boolean_Constant "Boolean Constant")'
- en: '[Character Constant](#Character_Constant "Character Constant")'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[字符常量](#Character_Constant "Character Constant")'
- en: '[Conclusion](#Conclusion "Conclusion")*  *# **Overview**'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[结论](#Conclusion "Conclusion") * * # **概述**'
- en: A constant is anything that doesn’t change its value. In Go const can be either
    of type string, numeric, boolean, and characters.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 常量是任何不会改变其值的东西。在Go中，const可以是字符串、数字、布尔和字符类型。
- en: A constant can be declared using the **const** keyword. A important point to
    be noted is that the value has to be assigned while declaring a constant. It is
    unlike variables where value can be assigned later.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 常量可以使用**const**关键字声明。需要注意的一个重要点是，在声明常量时必须赋值。这与变量不同，变量的值可以稍后赋值。
- en: Declaring a **const** along with specifying the type – It starts with a **const**
    keyword, followed by the name and then the type. Value must also be assigned right
    away at discussed above
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明一个**const**并指定类型 – 它以**const**关键字开头，后面是名称，然后是类型。值必须立即赋值，如上所述。
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Declaring a const without specifying type – A const declared without type is
    an untyped constant. We will learn more about typed and untyped constant later
    on. For now, its important to know that const declared without type has a default
    hidden type. The constant will be given a type once it is assigned to a variable
    in any way (direct initialisation, passing to a function etc).
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明一个不指定类型的const – 一个没有指定类型的const是一个未类型化常量。我们稍后将深入了解类型常量和未类型常量。现在，重要的是要知道未指定类型的const具有默认的隐藏类型。常量一旦以任何方式（直接初始化、传递给函数等）分配给变量，就会被赋予类型。
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Declaring multiple const together.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一次声明多个const。
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Important Points**'
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**重要点**'
- en: Constant Variable Cannot be reassigned after its declaration. For example below
    code will raise a compilation error
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常量变量在声明后不能重新赋值。例如，下面的代码将引发编译错误。
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Error:**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**错误：**'
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: const value must be known at compile time. Hence a const value cannot be assigned
    to a function call which is evaluated at run time. As in below program a is a
    const and its value should be available at compile time but function **getValue**
    will only be called at run time hence it raises an error during compilation.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: const值必须在编译时已知。因此，const值不能赋值给运行时评估的函数调用。在下面的程序中，a是一个const，其值应该在编译时可用，但函数**getValue**将在运行时调用，因此在编译时会引发错误。
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Error:**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**错误：**'
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A constant declared within an inner having a same name as constant declared
    in the outer scope will shadow the constant in outer scope.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在内部声明的常量如果与外部作用域中声明的常量同名，则会遮蔽外部作用域中的常量。
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Output:**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Typed and Untyped Constants**'
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**类型化与未类型化常量**'
- en: Now coming to very important topic. In go constant are treated in a different
    way than any other language. GO has a very strong type system that doesn’t allow
    implicit conversion between any of the types. Even with the same numeric types
    no operation is allowed without explicit conversion. For eg you cannot add a **int32**
    and **int64** value. To add those either **int32** has to be explicitly converted
    to **int64** or vice versa. However untyped constant have the flexibility of temporary
    escape from the GO’s type system as we will see in this article
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在谈谈一个非常重要的话题。在 GO 中，常量的处理方式与任何其他语言不同。GO 具有非常强的类型系统，不允许不同类型之间的隐式转换。即使是相同的数字类型，没有显式转换也不允许进行操作。例如，你不能将
    **int32** 和 **int64** 值相加。要相加，必须将 **int32** 显式转换为 **int64** 或反之。然而，未类型化常量具有暂时逃避
    GO 类型系统的灵活性，正如我们将在本文中看到的。
- en: '**Typed Constant**'
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**类型化常量**'
- en: A const declared specifying the type in the declaration is a typed constant.
    For example below we are declaring a const of type int32
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 声明时指定类型的常量是类型化常量。例如，下面我们声明一个类型为 int32 的常量。
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This const a can only be assigned to a variable of type int32\. If you assign
    it to a variable of any other type it will raise an error . For the illustration
    see below program.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个常量 a 只能赋值给类型为 int32 的变量。如果你将其赋值给任何其他类型的变量，将会引发错误。请参见下面的程序进行说明。
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Output:**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Untyped Constant**'
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**未类型化常量**'
- en: An untyped constant is a constant whose type has not been specified. A untyped
    constant in GO can be either named or unnamed. In both cases it doesn’t have any
    type associated with it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 未类型化常量是类型未被指定的常量。GO 中的未类型化常量可以是命名的或未命名的。在这两种情况下，它都没有任何相关的类型。
- en: Examples of unnamed untyped constant.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 未命名未类型化常量的示例。
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Examples of named untyped constant
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 命名未类型化常量的示例。
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Untyped constant  does have a default hidden type. For example below table illustrates
    hidden default types for numerics, strings, characters and boolean
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 未类型化常量确实具有默认的隐藏类型。例如，下面的表格展示了数字、字符串、字符和布尔值的隐藏默认类型。
- en: Default Hidden type for Constants
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 常量的默认隐藏类型
- en: '| Integers | int |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 整数 | int |'
- en: '| Floats | float64 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 浮点数 | float64 |'
- en: '| Complex Numbers | complex128 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 复数 | complex128 |'
- en: '| Strings | string |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 字符串 | string |'
- en: '| Booleans | bool |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 布尔值 | bool |'
- en: '| Characters | int32 or rune |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 字符 | int32 或 rune |'
- en: When you print any untyped constant using **fmt.Printf** it will print the default
    hidden type. See below program and output for both unnamed and named  untyped
    constant.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 **fmt.Printf** 打印任何未类型化的常量时，它将打印默认的隐藏类型。请查看下面的程序和未命名与命名未类型化常量的输出。
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Output:**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The above program prints **int32** instead of rune as rune is an alias for **int32**
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序打印 **int32** 而不是字符，因为字符是 **int32** 的别名。
- en: The default type of a named or unnamed constant type will become type of a variable
    they are assigned to . For example in below code variable **a** will get its 
    type from  the default type of unnamed constant **123** which is **int**.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 命名或未命名常量的默认类型将成为它们赋值的变量的类型。例如，在下面的代码中，变量 **a** 将从未命名常量 **123** 的默认类型 **int**
    中获得类型。
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Let’s see a program illustrating above points for all unnamed type constant
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个程序，说明上述所有未命名类型常量的要点。
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Output**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now the question which comes to the mind is what is the use of untyped constant. 
    The use of untyped constant is that the type of the constant will be decided depending
    upon the type of variable they are being assigned to.  Sounds confusing? Let’s
    see with an example.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想到的问题是未类型化常量有什么用。未类型化常量的作用在于，常量的类型将根据赋值的变量类型来决定。听起来令人困惑？让我们通过一个例子来看。
- en: '**Pi** constant value in math package is declared as below.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 数学包中的 **Pi** 常量值声明如下。
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Notice that the type is not specified it only has a hidden default type (which
    is **float64** here).  Let’s see a code
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，类型未被指定，只具有一个隐藏的默认类型（这里是 **float64**）。让我们看一段代码。
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Output**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE21]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Notice the above program.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意上述程序。
- en: Due to the untyped nature of **math.Pi** constant it can be assigned to a variable
    of type **float32** as well as **float64**. This is otherwise not possible in
    GO after type is fixed.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于 **math.Pi** 常量的未类型化特性，它可以被赋值给 **float32** 和 **float64** 类型的变量。在类型确定后，GO中通常不允许这样做。
- en: When we print the type of **math.Pi** , it prints the default type which is
    **float64**
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们打印 **math.Pi** 的类型时，它打印默认类型，即 **float64**。
- en: Depending upon use case an untyped constant can be assigned to a low precision
    type (float32) or a high precision type(float64)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 根据使用情况，无类型常量可以分配给低精度类型（float32）或高精度类型（float64）。
- en: '**Naming Conventions**'
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**命名约定**'
- en: Naming conventions for constant is the same as naming conventions for variables.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 常量的命名约定与变量的命名约定相同。
- en: A constant name can only start with a letter or an underscore. It can be followed
    by any number of letters, numbers or underscores after that
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常量名称只能以字母或下划线开头。之后可以跟任意数量的字母、数字或下划线。
- en: '**Global Constant**'
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**全局常量**'
- en: Like any other variable, a constant will be global within a package if it is
    declared at the top of a file outside the scope of any function. For example,
    in the below program name will be a global constant available throughout the **main**
    package in any function. Do note that the const name will not be available outside
    the main package. For it to be available outside the main package it has to start
    with a capital letter.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他变量一样，如果常量在文件顶部的任何函数的作用域之外声明，则它将在包内全局可用。例如，在下面的程序中，name将是一个在任何函数中都可用的全局常量。请注意，const
    name在主包外不可用。为了使其在主包外可用，它必须以大写字母开头。
- en: See the below code. It also shows the example of a local constant within a package.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 见下面的代码。它还展示了一个包内局部常量的示例。
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Types of Constants**'
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**常量类型**'
- en: 'Constant can be of four types:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 常量可以有四种类型：
- en: Numeric
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数值
- en: String
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: Character
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符
- en: Boolean
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔型
- en: '**String Constant**'
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**字符串常量**'
- en: In go string constant is represented in two ways
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go语言中，字符串常量以两种方式表示
- en: Any value that is enclosed between double quotes
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何用双引号括起来的值
- en: Any value enclosed between back quotes
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何用反引号括起来的值
- en: Below program shows a example of a
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的程序展示了一个示例
- en: Typed string constant
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有类型字符串常量
- en: Untyped unnamed string constant
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无类型未命名字符串常量
- en: Untyped named string constant
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无类型命名字符串常量
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Output:**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the above program, we created a new type **myString** in code.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们在代码中创建了一个新类型**myString**。
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Also above program shows the example of
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以上程序还展示了
- en: Typed string constant
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有类型字符串常量
- en: Untyped unnamed string constant
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无类型未命名字符串常量
- en: Untyped named string constant
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无类型命名字符串常量
- en: Let’s understand each of them and their behaviour
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解它们及其行为
- en: '**Typed string constant**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**有类型字符串常量**'
- en: It is defined as below
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 定义如下
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Notice in above that below line will cause a compilation error. This is because
    of typed string constant **aa** is of type **string**. So below line will cause
    compilation error as it cannot be assigned to variable of type **myString**
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 注意上面这行会导致编译错误。这是因为有类型字符串常量**aa**是**string**类型。因此下面这一行会导致编译错误，因为它不能分配给**myString**类型的变量。
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: But typed string constant can be assigned to a variable created with **var**
    keyword like below
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 但有类型字符串常量可以分配给用**var**关键字创建的变量，如下所示
- en: '[PRE28]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '**Untyped named string constant**'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**无类型命名字符串常量**'
- en: It is defined as below
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 定义如下
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Untyped named string constant can be assigned to variable of type **myString**
    as well variable created with **var** keyword because it is untyped so type of
    the constant will be decided depending upon the type of variable they are being
    assigned to.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 无类型命名字符串常量可以分配给**myString**类型的变量，以及用**var**关键字创建的变量，因为它是无类型的，所以常量的类型将根据所分配变量的类型来决定。
- en: '[PRE30]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**Untyped unnamed string constant**.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**无类型未命名字符串常量**。'
- en: It is like below
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 它是这样的
- en: '[PRE31]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Untyped unnamed string constant can be assigned to variable of type **myString**
    as well variable created with **var** keyword because it is untyped so type of
    the constant will be decided depending upon the type of variable they are being
    assigned to.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 无类型未命名字符串常量可以分配给**myString**类型的变量，以及用**var**关键字创建的变量，因为它是无类型的，所以常量的类型将根据所分配变量的类型来决定。
- en: '[PRE32]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '**Numeric Constant**'
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**数值常量**'
- en: Numeric constant are further divided into three types
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 数值常量进一步分为三种类型
- en: Integer
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数
- en: Floats
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点数
- en: Complex Numbers
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复数
- en: A untyped integer constant (both named and unnamed) can be assigned to **int**
    types, **float** types and **complex** . This is because an int value can be int
    or float or complex. For eg int value **123** can be
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一个无类型整数常量（命名和未命名）可以分配给**int**类型、**float**类型和**complex**类型。这是因为一个int值可以是int、float或complex。例如，int值**123**可以是
- en: A **int** whose value is 123
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个值为123的**int**
- en: A **float** whose value is 123.0
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个值为123.0的**float**
- en: A **complex** whose imaginary part is 0
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个虚部为0的**complex**
- en: On the basis of similar logic an untyped **float** constant can be assigned
    to all **floats** and **complex** types but not **integer** because for eg a float
    5.3 cannot be an integer.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 基于类似逻辑，未类型**float**常量可以赋值给所有**floats**和**complex**类型，但不能赋值给**integer**，因为例如一个float
    5.3不能是整数。
- en: On the basis of similar logic, an untyped **complex** constant can be assigned
    to  **complex** types but not **integer** and **float** because for eg a float
    5i+3 cannot be an **integer** or a **float**
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 基于类似逻辑，未类型**complex**常量可以赋值给**complex**类型，但不能赋值给**integer**和**float**，例如一个float
    5i+3不能是**integer**或**float**。
- en: See below program illustrating the above point. In the program we have example
    for
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 见下面的程序，说明上述观点。在该程序中，我们有一个例子。
- en: Typed integer constant
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型整数常量
- en: Untyped unnamed integer constant
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未类型未命名整数常量
- en: Untyped named integer constant
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未类型命名整数常量
- en: '[PRE33]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**Output**'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE34]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now above program shows example of a
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在上述程序展示了一个
- en: Typed integer constant
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型整数常量
- en: Untyped unnamed integer constant
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未类型未命名整数常量
- en: Untyped named integer constant
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未类型命名整数常量
- en: Let’s understand each of them and their behavior
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解每个常量及其行为
- en: '**Typed integer constant**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型整数常量**'
- en: It is defined as below
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 定义如下
- en: '[PRE35]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Typed integer constant can be assigned to a variable created with **var** keyword
    like below
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 类型整数常量可以赋值给使用**var**关键字创建的变量，如下所示。
- en: '[PRE36]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: It will raise compilation error when assigned to another **int** type. So below
    raises compilation error as **aa** variable is already of type **int**
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当赋值给另一个**int**类型时，会引发编译错误。因此，下面的代码引发编译错误，因为**aa**变量已经是**int**类型。
- en: '[PRE37]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '**Untyped named integer constant**'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**未类型命名整数常量**'
- en: It is defined as below
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 定义如下
- en: '[PRE38]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Untyped named integer constant can be assigned to any **int** type, any **float**
    type and any **complex** number type and also to any variable created with **var**
    keyword. So below works
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 未类型命名整数常量可以赋值给任何**int**类型、任何**float**类型和任何**complex**数类型，以及使用**var**关键字创建的任何变量。因此，下面的代码可以正常工作。
- en: '[PRE39]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '**Untyped unnamed integer constant**'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**未类型未命名整数常量**'
- en: It is as below
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示
- en: '[PRE40]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Untyped named integer constant can be assigned to any **int** type, any **float**
    type and any **complex** number type and also to any variable created with **var**
    keyword. So below works
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 未类型命名整数常量可以赋值给任何**int**类型、任何**float**类型和任何**complex**数类型，以及使用**var**关键字创建的任何变量。因此，下面的代码可以正常工作。
- en: '[PRE41]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '**Numeric Expressions**'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**数值表达式**'
- en: Due to untyped nature of constant numeric constants, different numeric constant
    type can be mixed and matched up to form a expression
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 由于未类型常量的特性，不同数值常量类型可以混合搭配形成表达式。
- en: '[PRE42]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '**Output:**'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE43]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '**Boolean Constant**'
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**布尔常量**'
- en: There are two untyped boolean constant **true** and **false**.  Below is the
    program illustrating a boolean constant.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个未类型布尔常量**true**和**false**。下面是一个展示布尔常量的程序。
- en: '[PRE44]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '**Output:**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE45]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: In the above program, we created a new type **myBool**
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们创建了一个新类型**myBool**。
- en: '[PRE46]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Also above program shows the example of
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序展示了一个例子
- en: Typed boolean constant
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型布尔常量
- en: Untyped unnamed boolean constant
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未类型未命名布尔常量
- en: Untyped named boolean constant
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未类型命名布尔常量
- en: Let’s understand each of them and their behaviour
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解每个常量及其行为
- en: '**Typed boolean constant**'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型布尔常量**'
- en: It is defined as below
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 定义如下
- en: '[PRE47]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Notice in above that below line will cause a compilation error. This is because
    variable **aa** is of typed **boolean** constant . So below line will cause compilation
    error as it cannot be assigned to variable of type **myBool**
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 注意上面的这行会导致编译错误。这是因为变量**aa**是类型为**boolean**的常量。因此，下面这行会导致编译错误，因为无法赋值给类型为**myBool**的变量。
- en: '[PRE48]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: But typed string constant can be assigned to a variable created with **var**
    keyword like below
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 但类型字符串常量可以赋值给使用**var**关键字创建的变量，如下所示。
- en: '[PRE49]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '**Untyped named boolean constant**'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**未类型命名布尔常量**'
- en: It is defined as below
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 定义如下
- en: '[PRE50]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Untyped named string constant can be assigned to variable of type **myBool**
    as well variable created with **var** keyword because it is untyped so type of
    the constant will be decided depending upon the type of variable they are being
    assigned to.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 未类型命名字符串常量可以赋值给类型为**myBool**的变量以及使用**var**关键字创建的变量，因为它是未类型的，因此常量的类型将根据赋值的变量类型决定。
- en: '[PRE51]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '**Untyped unnamed boolean constant**'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**未类型未命名布尔常量**'
- en: It is like below
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 定义如下
- en: '[PRE52]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Untyped unnamed string constant can be assigned to variable of type **myBool**
    as well variable created with **var** keyword because it is untyped so type of
    the constant will be decided depending upon the type of variable they are being
    assigned to.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 未类型化的无名字符串常量可以赋值给**myBool**类型的变量以及使用**var**关键字创建的变量，因为它是无类型的，所以常量的类型将根据所赋值的变量类型决定。
- en: '[PRE53]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '**Character Constant**'
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**字符常量**'
- en: Below is the program illustrating a character constant.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是演示字符常量的程序。
- en: '[PRE54]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '**Output:**'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE55]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: In the above program, we created a new type **myChar**
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们创建了一个新类型**myChar**
- en: '[PRE56]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Also above program shows the example of
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，上述程序展示了示例
- en: Typed character constant
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型化字符常量
- en: Untyped unnamed character constant
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未类型化的无名字符常量
- en: Untyped named character constant
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未类型化的有名字符常量
- en: Let’s understand each of them and their behaviour
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解它们每一个及其行为
- en: '**Typed character constant**'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型化字符常量**'
- en: It is defined as below
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 它的定义如下
- en: '[PRE57]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Notice in above that below line will cause a compilation error. This is because
    variable **aa** is of type **int32**. So below line will cause compilation error
    as it cannot be assigned to variable of type **myChar**
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 上述内容中请注意，下面的行将导致编译错误。这是因为变量**aa**是**int32**类型。因此，下面的行将导致编译错误，因为它不能赋值给**myChar**类型的变量。
- en: '[PRE58]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: But typed string constant can be assigned to a variable created with **var**
    keyword like below
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，类型化字符串常量可以赋值给使用**var**关键字创建的变量，如下所示。
- en: '[PRE59]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '**Untyped named character constant**'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '**未类型化的有名字符常量**'
- en: It is defined as below
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 它的定义如下
- en: '[PRE60]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Untyped named string constant  can be assigned to variable of type **myChar**
    as well variable created with **var** keyword because it is untyped so type of
    the constant will be decided depending upon the type of variable they are being
    assigned to.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 未类型化的有名字符串常量可以赋值给**myChar**类型的变量以及使用**var**关键字创建的变量，因为它是无类型的，所以常量的类型将根据所赋值的变量类型决定。
- en: '[PRE61]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '**Untyped unnamed character constant**.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '**未类型化的无名字符常量**。'
- en: It is like below
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 它如下所示
- en: '[PRE62]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Untyped unnamed string constant can be assigned to variable of type **myChar**
    as well variable created with **var** keyword because it is untyped so type of
    the constant will be decided depending upon the type of variable they are being
    assigned to.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 未类型化的无名字符串常量可以赋值给**myChar**类型的变量以及使用**var**关键字创建的变量，因为它是无类型的，所以常量的类型将根据所赋值的变量类型决定。
- en: '[PRE63]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '**Conclusion**'
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结论**'
- en: This is all about const keyword in Golang. Hope you have liked this article.
    Do share feedback in comments.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是关于Golang中const关键字的全部内容。希望你喜欢这篇文章。请在评论中分享反馈。
- en: '**Next Tutorial** – [For Loop](https://golangbyexample.com/for-loop-in-golang/)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '**下一个教程** – [For Loop](https://golangbyexample.com/for-loop-in-golang/)'
- en: '**Previous Tutorial** –[Functions](https://golangbyexample.com/function-golang-complete-guide/)'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '**上一个教程** – [Functions](https://golangbyexample.com/function-golang-complete-guide/)'
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/) *   [golang](https://golangbyexample.com/tag/golang/)
    *'
