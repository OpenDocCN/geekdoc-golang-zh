- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:06:01'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: HeapSort in Golang
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/heapsort-in-golang/](https://golangbyexample.com/heapsort-in-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Introduction](#Introduction "Introduction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Steps for HeapSort:](#Steps_for_HeapSort "Steps for HeapSort:")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Full Working Code](#Full_Working_Code "Full Working Code")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Time Complexity](#Time_Complexity "Time Complexity")*  *# **Introduction**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HeapSort is a comparison-based sorting algorithm that uses the Heap Data Structure.
    Please refer to this link for more information about Heap –[https://golangbyexample.com/heap-in-golang/](https://golangbyexample.com/heap-in-golang/)
  prefs: []
  type: TYPE_NORMAL
- en: We demonstrate the heapsort in this article using min-heap. The same can be
    achieved using max heap as well.
  prefs: []
  type: TYPE_NORMAL
- en: Left Child – 2*i + 1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right Child – 2*i + 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Below is a representation of a minheap
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/693dba4ca31661ce2f15e7001b645441.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Steps for HeapSort:**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Build minheap. After the minheap is built, the first element becomes the smallest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move the first element to the last in the array. Call heapify again with size-1\.
    Repeat it for the size of the array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final array is sorted from largest to smallest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Full Working Code**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Time Complexity**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Time Complexity of Heap Sort is  O(nLogn).
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [heapsort](https://golangbyexample.com/tag/heapsort/)*   [heapsort
    in go](https://golangbyexample.com/tag/heapsort-in-go/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
