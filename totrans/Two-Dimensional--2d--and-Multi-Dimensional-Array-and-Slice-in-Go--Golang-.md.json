["```\n[len1][len2][len3]....[lenN]T{}\n```", "```\nvar sample = [len1][len2]T{{a11, a12 .. a1y},\n                       {a21, a22 .. a2y},\n                       {.. },\n                       {ax1, ax2 .. axy}} \n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n    sample := [2][3]int{{1, 2, 3}, {4, 5, 6}}\n\n    fmt.Printf(\"Number of rows in array: %d\\n\", len(sample))\n    fmt.Printf(\"Number of columns in array: %d\\n\", len(sample[0]))\n    fmt.Printf(\"Total number of elements in array: %d\\n\", len(sample)*len(sample[0]))\n\n    fmt.Println(\"Traversing Array\")\n    for _, row := range sample {\n        for _, val := range row {\n            fmt.Println(val)\n        }\n    }\n}\n```", "```\nNumber of rows in array: 2\nNumber of columns in array: 3\nTotal number of elements in array: 6\nTraversing Array\n1\n2\n3\n4\n5\n6\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := [2][2][3]int{{{1, 2, 3}, {4, 5, 6}}, {{7, 8, 9}, {10, 11, 12}}}\n\n    fmt.Printf(\"Length of first dimension: %d\\n\", len(sample))\n    fmt.Printf(\"Length of second dimension: %d\\n\", len(sample[0]))\n    fmt.Printf(\"Length of third dimension: %d\\n\", len(sample[0][0]))\n\n    fmt.Printf(\"Overall Dimension of the array: %d*%d*%d\\n\", len(sample), len(sample[0]), len(sample[0][0]))\n    fmt.Printf(\"Total number of elements in array: %d\\n\", len(sample)*len(sample[0])*len(sample[0][0]))\n\n    for _, first := range sample {\n        for _, second := range first {\n            for _, value := range second {\n                fmt.Println(value)\n            }\n        }\n    }\n}\n```", "```\nLength of first dimension: 2\nLength of second dimension: 2\nLength of third dimension: 3\nOverall Dimension of the array: 2*2*3\nTotal number of elements in array: 12\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := [2][3]int{{1, 2, 3}, {4, 5, 6}}\n    //Print array element\n    fmt.Println(sample[0][0])\n    fmt.Println(sample[0][1])\n    fmt.Println(sample[0][2])\n    fmt.Println(sample[1][0])\n    fmt.Println(sample[1][1])\n    fmt.Println(sample[1][2])\n\n    //Assign new values\n    sample[0][0] = 6\n    sample[0][1] = 5\n    sample[0][2] = 4\n    sample[1][0] = 3\n    sample[1][1] = 2\n    sample[1][2] = 1\n\n    fmt.Println()\n    fmt.Println(sample[0][0])\n    fmt.Println(sample[0][1])\n    fmt.Println(sample[0][2])\n    fmt.Println(sample[1][0])\n    fmt.Println(sample[1][1])\n    fmt.Println(sample[1][2])\n}\n```", "```\n1\n2\n3\n4\n5\n6\n\n6\n5\n4\n3\n2\n1\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := [2][3]int{{1, 2, 3}, {4, 5, 6}}\n    fmt.Println(\"Using for-range\")\n    for _, row := range sample {\n        for _, val := range row {\n            fmt.Println(val)\n        }\n    }\n\n    fmt.Println(\"\\nUsing for loop\")\n    for i := 0; i < 2; i++ {\n        for j := 0; j < 3; j++ {\n            fmt.Println(sample[i][j])\n        }\n    }\n\n    fmt.Println(\"\\nUsing for loop - Second way\")\n    for i := 0; i < len(sample); i++ {\n        for j := 0; j < len(sample[i]); j++ {\n            fmt.Println(sample[i][j])\n        }\n    }\n}\n```", "```\nUsing for-rage\n1\n2\n3\n4\n5\n6\n\nUsing for loop\n1\n2\n3\n4\n5\n6\n\nUsing for loop \n1\n2\n3\n4\n5\n6\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := [2][3]byte{}\n\n    fmt.Println(\"First row\")\n    fmt.Println(&sample[0][0])\n    fmt.Println(&sample[0][1])\n    fmt.Println(&sample[0][2])\n\n    fmt.Println(\"\\nSecond row\")\n    fmt.Println(&sample[1][0])\n    fmt.Println(&sample[1][1])\n    fmt.Println(&sample[1][2])\n}\n```", "```\nFirst row\n0xc0000b4002\n0xc0000b4003\n0xc0000b4004\n\nSecond row\n0xc0000b4005\n0xc0000b4006\n0xc0000b4007\n```", "```\ntype SliceHeader struct {\n        Data uintptr\n        Len  int\n        Cap  int\n}\n```", "```\noneDSlice := make([]int, 2)\n```", "```\ntwoDSlice := make([][]int, 2)\n```", "```\nfor i := range twoDSlice {\n    twoDSlice[i] = make([]int, 3)\n}\n```", "```\nvar twoDSlice = make([][]int, 2)\ntwoDSlice[0] = []int{1, 2, 3}\ntwoDSlice[1] = []int{4, 5, 6}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    twoDSlice1 := make([][]int, 3)\n    for i := range twoDSlice1 {\n        twoDSlice1[i] = make([]int, 3)\n    }\n    fmt.Printf(\"Number of rows in slice: %d\\n\", len(twoDSlice1))\n    fmt.Printf(\"Number of columns in arsliceray: %d\\n\", len(twoDSlice1[0]))\n    fmt.Printf(\"Total number of elements in slice: %d\\n\", len(twoDSlice1)*len(twoDSlice1[0]))\n    fmt.Println(\"First Slice\")\n    for _, row := range twoDSlice1 {\n        for _, val := range row {\n            fmt.Println(val)\n        }\n    }\n    twoDSlice2 := make([][]int, 2)\n    twoDSlice2[0] = []int{1, 2, 3}\n    twoDSlice2[1] = []int{4, 5, 6}\n    fmt.Println()\n    fmt.Printf(\"Number of rows in slice: %d\\n\", len(twoDSlice2))\n    fmt.Printf(\"Number of columns in arsliceray: %d\\n\", len(twoDSlice2[0]))\n    fmt.Printf(\"Total number of elements in slice: %d\\n\", len(twoDSlice2)*len(twoDSlice2[0]))\n    fmt.Println(\"Second Slice\")\n    for _, row := range twoDSlice2 {\n        for _, val := range row {\n            fmt.Println(val)\n        }\n    }\n}\n```", "```\nNumber of rows in slice: 2\nNumber of columns in arsliceray: 3\nTotal number of elements in slice: 6\nFirst Slice\n0\n0\n0\n0\n0\n0\n\nNumber of rows in slice: 2\nNumber of columns in arsliceray: 3\nTotal number of elements in slice: 6\nSecond Slice\n1\n2\n3\n4\n5\n6\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    twoDSlice := make([][]int, 2)\n    twoDSlice[0] = []int{1, 2, 3}\n    twoDSlice[1] = []int{4, 5}\n\n    fmt.Printf(\"Number of rows in slice: %d\\n\", len(twoDSlice))\n    fmt.Printf(\"Len of first row: %d\\n\", len(twoDSlice[0]))\n    fmt.Printf(\"Len of second row: %d\\n\", len(twoDSlice[1]))\n    fmt.Println(\"Traversing slice\")\n    for _, row := range twoDSlice {\n        for _, val := range row {\n            fmt.Println(val)\n        }\n    }\n}\n```", "```\nNumber of rows in slice: 2\nLen of first row: 3\nLen of second row: 2\nTraversing slice\n1\n2\n3\n4\n5\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := make([][][]int, 2)\n    for i := range sample {\n        sample[i] = make([][]int, 2)\n        for j := range sample[i] {\n            sample[i][j] = make([]int, 3)\n        }\n    }\n\n    fmt.Printf(\"Length of first dimension: %d\\n\", len(sample))\n    fmt.Printf(\"Length of second dimension: %d\\n\", len(sample[0]))\n    fmt.Printf(\"Length of third dimension: %d\\n\", len(sample[0][0]))\n    fmt.Printf(\"Overall Dimension of the slice: %d*%d*%d\\n\", len(sample), len(sample[0]), len(sample[0][0]))\n    fmt.Printf(\"Total number of elements in slice: %d\\n\", len(sample)*len(sample[0])*len(sample[0][0]))\n    for _, first := range sample {\n        for _, second := range first {\n            for _, value := range second {\n                fmt.Println(value)\n            }\n        }\n    }\n}\n```", "```\nLength of first dimension: 2\nLength of second dimension: 2\nLength of third dimension: 3\nOverall Dimension of the slice: 2*2*3\nTotal number of elements in slice: 12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := make([][]int, 2)\n    sample[0] = []int{1, 2, 3}\n    sample[1] = []int{4, 5, 6}\n\n    //Print array element\n    fmt.Println(sample[0][0])\n    fmt.Println(sample[0][1])\n    fmt.Println(sample[0][2])\n    fmt.Println(sample[1][0])\n    fmt.Println(sample[1][1])\n    fmt.Println(sample[1][2])\n\n    //Assign new values\n    sample[0][0] = 6\n    sample[0][1] = 5\n    sample[0][2] = 4\n    sample[1][0] = 3\n    sample[1][1] = 2\n    sample[1][2] = 1\n\n    fmt.Println()\n    fmt.Println(sample[0][0])\n    fmt.Println(sample[0][1])\n    fmt.Println(sample[0][2])\n    fmt.Println(sample[1][0])\n    fmt.Println(sample[1][1])\n    fmt.Println(sample[1][2])\n}\n```", "```\n1\n2\n3\n4\n5\n6\n\n6\n5\n4\n3\n2\n1\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := make([][]int, 2)\n    sample[0] = []int{1, 2, 3}\n    sample[1] = []int{4, 5, 6}\n    fmt.Println(\"Using for-range\")\n    for _, row := range sample {\n        for _, val := range row {\n            fmt.Println(val)\n        }\n    }\n\n    fmt.Println(\"\\nUsing for loop - Second way\")\n    for i := 0; i < len(sample); i++ {\n        for j := 0; j < len(sample[i]); j++ {\n            fmt.Println(sample[i][j])\n        }\n    }\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := make([][]byte, 2)\n    sample[0] = make([]byte, 3)\n\n    //testVariable := \"s\"\n    //fmt.Println(testVariable)\n\n    sample[1] = make([]byte, 3)\n\n    fmt.Println(\"First row\")\n    fmt.Println(&sample[0][0])\n    fmt.Println(&sample[0][1])\n    fmt.Println(&sample[0][2])\n\n    fmt.Println(\"\\nSecond row\")\n    fmt.Println(&sample[1][0])\n    fmt.Println(&sample[1][1])\n    fmt.Println(&sample[1][2])\n}\n```", "```\nFirst row\n0xc000018072\n0xc000018073\n0xc000018074\n\nSecond row\n0xc000018080\n0xc000018081\n0xc000018082\n```"]