- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:27:23'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:27:23
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Defer and Methods in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go语言中的延迟和方法
- en: 来源：[https://golangbyexample.com/defer-methods-golang/](https://golangbyexample.com/defer-methods-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/defer-methods-golang/](https://golangbyexample.com/defer-methods-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Example](#Example "Example")*  *# **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[示例](#Example "Example")*  *# **概述**'
- en: '**defer** statement is also applicable  for methods in a similar way it is
    applicable to functions. Let’s see an example'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**defer**语句同样适用于方法，就像它适用于函数一样。让我们看看一个示例。'
- en: '**Example**'
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**示例**'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the above program, we do **defer file.Close()** after opening the file. **Close**
    is the method which is defined on the **file** instance. This will make sure that
    closing of the file is executed even if the write to the file results into an
    error. Defer function makes sure that the file will be closed regardless of number
    of return statements in the function.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们在打开文件后做**defer file.Close()**。**Close**是定义在**file**实例上的方法。这确保了即使写入文件出现错误，文件也会被关闭。延迟函数确保无论函数中有多少个返回语句，文件都会被关闭。
- en: Let’s see another example of a method called on a custom struct in a defer function
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个在延迟函数中调用自定义结构体的方法的另一个示例。
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Output**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the above program we have a custom struct **employee**
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们有一个自定义结构体**employee**。
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: struct employee has a **setName** function which sets the name. But this function
    also raises an error is length of name passed is less than 3.  We have a defer
    function in the **setName** which executes after **setName** finishes and checks
    weather the name is empty. If it is empty then it sets a default name. This defer
    function is actually a method **setDefaultName**
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 结构体**employee**有一个**setName**函数，用于设置名称。但如果传入的名称长度小于3，该函数也会抛出错误。我们在**setName**中有一个延迟函数，它在**setName**完成后执行，并检查名称是否为空。如果为空，它会设置一个默认名称。这个延迟函数实际上是一个方法**setDefaultName**。
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Then we create an instance of employee e1 and sets its name
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建一个**employee**实例e1并设置它的名称。
- en: Since length of "John" is greater than 3, the **setName** function doesn't raises
    an error. But if you will notice the output,  the defer function **setDefaultName**
    is still executed
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于“John”的长度大于3，**setName**函数不会抛出错误。但如果你注意输出，延迟函数**setDefaultName**仍然被执行。
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Then we create an instance of employee **e2** and sets its name
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建一个**employee**实例**e2**并设置它的名称。
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Since length of "Ko" is less than 3, the **setName** function raises  an error.
    defer function **setDefaultName** also gets executed in this case and it sets
    the default name. That is why you see below output in this case
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于“Ko”的长度小于3，**setName**函数抛出错误。在这种情况下，延迟函数**setDefaultName**也会执行，并设置默认名称。这就是为什么你在下面的输出中看到这种情况。
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
