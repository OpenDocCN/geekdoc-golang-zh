- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:31:57'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Set response headers for an incoming HTTP request in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/set-resposne-headers-http-go/](https://golangbyexample.com/set-resposne-headers-http-go/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Note: Related Post'
  prefs: []
  type: TYPE_NORMAL
- en: Get headers from an incoming HTTP request in Go – [https://golangbyexample.com/headers-http-request-golang/](https://golangbyexample.com/headers-http-request-golang/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get response headers for an outgoing HTTP request in Golang- [https://golangbyexample.com/get-response-headers-making-go/](https://golangbyexample.com/get-response-headers-making-go/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set headers for an outgoing HTTP request in Go (Golang) – [https://golangbyexample.com/set-headers-http-request/](https://golangbyexample.com/set-headers-http-request/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now let’s look at how we can set response headers in an incoming HTTP request
  prefs: []
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using w.Header().Add() method](#Using_wHeaderAdd_method "Using w.Header().Add()
    method")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using w.Header().Set method](#Using_wHeaderSet_method "Using w.Header().Set
    method")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Example](#Example "Example")*  *# **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Below is the format in which a Header is represented in go.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: So the header is a key value pair with
  prefs: []
  type: TYPE_NORMAL
- en: key being represented in canonical form. Canonical form means that first character
    and any character following a hyphen is in uppercase. All other characters is
    in lowercase. Example of canonical forms are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Value is represented as a slice of string. Why array of strings? Because it
    is perfectly okay to two headers with same key and different values in a request.
    Both the values will be collected in the slice.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For eg if below headers are set in the outgoing response from a server then
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Then at client the headers will look like
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that:'
  prefs: []
  type: TYPE_NORMAL
- en: '**content-type** is converted to canonical form **Content-Type**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**foo** header is converted to **Foo**. Also note that there will be two headers
    in the response with the same key which is **foo**. The values will be **bar1**
    and **bar2**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we have seen how a header is represented in the request. Let’s see how we
    can set the response headers values. Assume we have the below key value pairs
    of headers which we have to set in the response headers
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There is a **Header** method defined in the **http.ResponseWriter** interface
    as below. It returns the Header associated with the response.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the below example let’s assume that variable **w** is of type **http.ResponseWriter**
    . Now let’s see different ways of setting a header
  prefs: []
  type: TYPE_NORMAL
- en: '**Using w.Header().Add() method**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Below is the signature of the Add method
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This method is used to add the key value pair to the response header. We have
    already seen above that Header value can be array as well. So this method appends
    to the existing values that might already have been associated with the key. 
    Also the key will be converted to canonical form.
  prefs: []
  type: TYPE_NORMAL
- en: For example if we add the foo header two times with different values
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Then **foo** header will be set to **[“bar1”, “bar2”].** Also **foo** will become
    **Foo** when sending response to the client.
  prefs: []
  type: TYPE_NORMAL
- en: '**Using w.Header().Set method**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Below is the signature of the function
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: It can be used to set the header entries associated with the given key. Unlike
    the **Add** method, this method will replace any existing values associated with
    the key. Also the key will be converted to canonical form.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s see a program illustrating all the above points
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In above program we started a server which is listening on port 8085\. Also
    we are setting the **content-type** header as below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Also we are setting the **foo** header as below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We also defined a URL on that endpoint. Run this server and make the below API
    call.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: After running this API check the response headers in the terminal. It is exactly
    as we have discussed. Also each of the header key is converted to its canonical
    form.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
