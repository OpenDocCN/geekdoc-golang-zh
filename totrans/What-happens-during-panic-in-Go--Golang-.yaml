- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:27:08'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: What happens during panic in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/what-happens-during-panic-go/](https://golangbyexample.com/what-happens-during-panic-go/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Program](#Program "Program")*  *# **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s understand what happens when panic happens in a program. Imagine a function
    call from **main** function to **f1** function to **f2** function
  prefs: []
  type: TYPE_NORMAL
- en: '**main**->**f1**->**f2**'
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s say that panic happens in function **f2** then below will be the sequence
    of events that will be happening
  prefs: []
  type: TYPE_NORMAL
- en: Execution of **f2** will stop. Defer functions in **f2** will be executed if
    present. Control will return to the caller which is a function **f1**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**f1** function will behave in a similar way as if panic happened in that function
    and after that call will return to the caller which is **main** function. Note
    that if there are more functions in between then the process will continue up
    the stack in a similar way'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**main** function will also behave as if pannic happened in that function and
    after that, the program will crash'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the program crashes, it will print the panic message along with this stack
    trace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Program**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s see a program for that
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the above program, panic happened in the f2 function like below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: the defer function in f2 is called after that and it prints the below message
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice that as soon as the panic happens in the **f2** function, its execution
    stops therefore below line if **f2** never gets executed
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Control returns to **f1** and it it has a defer function. The defer gets executed
    and it prints the below message
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Control returns to main function after that and then the program crashes.The
    output prints the panic message along with the entire stack trace from main to
    f1 to f2.
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
