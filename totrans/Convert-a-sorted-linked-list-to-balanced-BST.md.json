["```\n-2->-1->0->1->2\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype ListNode struct {\n\tVal  int\n\tNext *ListNode\n}\n\ntype SingleList struct {\n\tLen  int\n\tHead *ListNode\n}\n\nfunc (s *SingleList) AddFront(num int) {\n\tele := &ListNode{\n\t\tVal: num,\n\t}\n\tif s.Head == nil {\n\t\ts.Head = ele\n\t} else {\n\t\tele.Next = s.Head\n\t\ts.Head = ele\n\t}\n\ts.Len++\n}\n\ntype TreeNode struct {\n\tVal   int\n\tLeft  *TreeNode\n\tRight *TreeNode\n}\n\nfunc sortedListToBST(head *ListNode) *TreeNode {\n\n\tlen := lenOfList(head)\n\treturn sortedListToBSTUtil(&head, len)\n}\n\nfunc sortedListToBSTUtil(head **ListNode, n int) *TreeNode {\n\n\tif *head == nil {\n\t\treturn nil\n\t}\n\n\tif n <= 0 {\n\t\treturn nil\n\t}\n\n\tleft := sortedListToBSTUtil(head, n/2)\n\n\troot := &TreeNode{Val: (*head).Val}\n\t*head = (*head).Next\n\n\troot.Left = left\n\n\troot.Right = sortedListToBSTUtil(head, n-n/2-1)\n\treturn root\n\n}\n\nfunc lenOfList(head *ListNode) int {\n\tlength := 0\n\tfor head != nil {\n\t\tlength++\n\t\thead = head.Next\n\t}\n\treturn length\n}\n\nfunc main() {\n\tsingleList := &SingleList{}\n\tfmt.Printf(\"AddFront: 2\\n\")\n\tsingleList.AddFront(2)\n\tfmt.Printf(\"AddFront: 1\\n\")\n\tsingleList.AddFront(1)\n\tfmt.Printf(\"AddFront: 0\\n\")\n\tsingleList.AddFront(0)\n\tfmt.Printf(\"AddFront: -1\\n\")\n\tsingleList.AddFront(-1)\n\tfmt.Printf(\"AddFront: -2\\n\")\n\tsingleList.AddFront(-2)\n\n\tfmt.Println()\n\troot := sortedListToBST(singleList.Head)\n\tfmt.Printf(\"root: %d\\n\", root.Val)\n\tfmt.Printf(\"root.Left: %d\\n\", root.Left.Val)\n\tfmt.Printf(\"root.Left.Left: %d\\n\", root.Left.Left.Val)\n\tfmt.Printf(\"root.Right: %d\\n\", root.Right.Val)\n\tfmt.Printf(\"root.Right.Left: %d\\n\", root.Right.Left.Val)\n}\n```", "```\nAddFront: 2\nAddFront: 1\nAddFront: 0\nAddFront: -1\nAddFront: -2\n\nroot: 0\nroot.Left: -1\nroot.Left.Left: -2\nroot.Right: 2\nroot.Right.Left: 1\n```"]