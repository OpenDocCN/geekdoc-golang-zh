- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:35:59'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Fprintf function in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/fprintf-golang/](https://golangbyexample.com/fprintf-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Fprintf Image](img/9dcf336e99223726fb9611b41749a744.png)'
  prefs: []
  type: TYPE_IMG
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Formatting a string variable](#Formatting_a_string_variable "Formatting a
    string variable")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Formatting an integer](#Formatting_an_integer "Formatting an integer")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Formatting a struct](#Formatting_a_struct "Formatting a struct")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Program](#Program "Program")*  *## **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fprintf** is defined in the **fmt** package and is used to format a string
    and write that formatted string to **io.Writer** instance passed to it as one
    of the arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://golang.org/pkg/fmt/#Fprint](https://golang.org/pkg/fmt/#Fprint)'
  prefs: []
  type: TYPE_NORMAL
- en: Golang provides another similar function **Printf**. The only difference between
    **Frprintf** and **Printf** is that **Fprintf** writes to the **io.Writer** instance
    passed to it while **Printf** function writes to the standard output
  prefs: []
  type: TYPE_NORMAL
- en: Below is the function prototype of **Fprintf**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Fprintf** is also a variadic function meaning that it can have multiple arguments. Here
    are the details about its arguments'
  prefs: []
  type: TYPE_NORMAL
- en: The first argument is the **io.Writer** instance to which it writes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second argument is a **format** or **template** string. The string contains
    the custom specifiers like **%s** for **string**, **%d** for **int,** etc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next is a variable number of arguments. Each of the arguments in this list
    could be string, int, struct, or anything. That is why it is an empty interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fprintf** formats the string using custom specifiers. The **format** or **template**
    string contains the actual string that needs to be formatted plus some formating
    verbs. These formating verbs tell how the trailing arguments will be formatted
    in the final string.  So basically the format string argument contains certain
    symbols which are replaced by trailing arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: Also to note about the **Fprintf** function is that it also doesn’t add a new
    line. We need to use the new line identifier to add a new line **“\n”**.
  prefs: []
  type: TYPE_NORMAL
- en: Eg
  prefs: []
  type: TYPE_NORMAL
- en: '**Formatting a string variable**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**%s** symbol is used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The output will be as below. It will be written to **os.Stdout** which is standard
    output. See we pass **os.Stdout** as the first argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Formatting an integer**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**%d** symbol is used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The output will be as below. It will be written to **os.Stdout** which is standard
    output.
  prefs: []
  type: TYPE_NORMAL
- en: '**Formatting a struct**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For example, there are three format specifiers for printing a struct.
  prefs: []
  type: TYPE_NORMAL
- en: '**%v** – It will print only values. The field name will not be printed. This
    is the default way of printing a struct when using Println'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**%+v – **It will print both field and value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**%#v – **It will print the struct, also both field name and value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That is why
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: writes below respectively to the **os.Stdout** instance
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It is as per the explanation above. Also, note that this function returns the
    number of characters printed and any error if happens. It does not add a new line.
    You will have to add **“\n”** explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: '**Program**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is the working program for the same
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In all the **Fprintf** function above we pass it the instance of **os.Stdout**
    to it which implements the **io.Writer** interface. Basically with **os.Stdout**,
    **Fprintf** writes to standard output. This is how **os.Stdout** defined.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Notice that in below **Fprintf**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**%s** is replaced by name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**%d** is replaced by age.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So basically the symbols or verbs in the format string argument are replaced
    by trailing arguments in order
  prefs: []
  type: TYPE_NORMAL
- en: '**Fprintf** can also be used to write to a file. Since the file instance in
    golang implements the **io.Writer**, this is not a problem. Below is the program
    for the same'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: It will create file name **temp.txt** in the current directory with the below
    contents. In this program we replaced **os.Stdou**t with the file created.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If the number of format specifiers in the format string does not match the number
    of next variable arguments then the format specifier will be printed as is. For
    example, in the below code, we have two format specifier
  prefs: []
  type: TYPE_NORMAL
- en: '**%d**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**%s**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While the next variable number of arguments is only one. Hence when we call
    it then it will write the second format specifier as is with MISSING as a warning
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Also, check out our Golang advance tutorial Series – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
