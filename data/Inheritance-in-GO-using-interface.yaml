- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:00:38'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:00:38
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Inheritance in GO using interface
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用接口的GO中的继承
- en: 来源：[https://golangbyexample.com/inheritance-go-interface/](https://golangbyexample.com/inheritance-go-interface/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/inheritance-go-interface/](https://golangbyexample.com/inheritance-go-interface/)
- en: This post describes inheritance using interface. Do visit our Inheritance in
    Go Complete Guide post for full reference
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本文描述了使用接口的继承。请访问我们的Go中的继承完整指南文章以获取完整参考
- en: '[OOP: Inheritance in GOLANG complete guide](https://golangbyexample.com/oop-inheritance-golang-complete/)'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[OOP：GOLANG中的继承完整指南](https://golangbyexample.com/oop-inheritance-golang-complete/)'
- en: '[https://golangbyexample.com/oop-inheritance-golang-complete/embed/#?secret=lwzs553n8n#?secret=ZXUMNIsae2](https://golangbyexample.com/oop-inheritance-golang-complete/embed/#?secret=lwzs553n8n#?secret=ZXUMNIsae2)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://golangbyexample.com/oop-inheritance-golang-complete/embed/#?secret=lwzs553n8n#?secret=ZXUMNIsae2](https://golangbyexample.com/oop-inheritance-golang-complete/embed/#?secret=lwzs553n8n#?secret=ZXUMNIsae2)'
- en: 'Go supports inheritance by embedding struct or using interface. There are different
    ways of doing it and each having some limitations. The different ways are:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Go通过嵌入结构体或使用接口支持继承。有不同的实现方式，每种方式都有一些限制。这些不同的方式是：
- en: By using embedded struct – The parent struct is embedded in child struct. The
    limitation is that subtyping is not possible with this approach. You cannot pass
    the child struct to a function that expects base. Refer this link for more details
    –**[Inheritance using struct](https://golangbyexample.com/inheritance-go-struct/)**
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用嵌入式结构体——父结构体嵌入到子结构体中。这个方法的限制是无法进行子类型化。你不能将子结构体传递给期望基类的函数。更多详情请参见此链接——**[使用结构体的继承](https://golangbyexample.com/inheritance-go-struct/)**
- en: '**By using interfaces** – Subtyping is possible but the limitation is that
    one has no way to refer to common properties. Current post describes this approach'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**通过使用接口**——子类型化是可能的，但限制是无法引用公共属性。当前的文章描述了这种方法'
- en: By using interface + struct – This fixes the limitations of above two approach
    but one limitation is that overriding methods is not possible. But there is a
    workaround. Refer to this link for more details – **[Inheritance using interface
    + struct](https://golangbyexample.com/inheritance-go-interface-struct/)**
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用接口 + 结构体——这解决了上述两种方法的限制，但一个限制是无法重写方法。不过有一个变通方法。更多详情请参见此链接——**[使用接口 + 结构体的继承](https://golangbyexample.com/inheritance-go-interface-struct/)**
- en: '**Details:**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**详情：**'
- en: The child struct implements the methods of a common interface. This approach
    also solves the problem of subtyping. See below code
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 子结构体实现公共接口的方法。这个方法也解决了子类型化的问题。见以下代码
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output:**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Limitation:**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**限制：**'
- en: This approach has a limitation that it is not possible to refer to common properties
    as an interface can not have any properties. This problem is solved by the mixed
    approach of using Struct + Interface.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的限制在于，无法引用公共属性，因为接口不能有任何属性。这个问题通过使用结构体 + 接口的混合方法得到解决。
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*   [inheritance](https://golangbyexample.com/tag/inheritance/)*   [interface](https://golangbyexample.com/tag/interface/)*   [struct](https://golangbyexample.com/tag/struct/)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*   [inheritance](https://golangbyexample.com/tag/inheritance/)*   [interface](https://golangbyexample.com/tag/interface/)*   [struct](https://golangbyexample.com/tag/struct/)'
