["```\npackage main\nimport \"fmt\"\ntype base struct {\n    color string\n}\nfunc (b *base) say() {\n    fmt.Println(\"Hi from say function\")\n}\ntype child struct {\n    base  //embedding\n    style string\n}\nfunc main() {\n    base := base{color: \"Red\"}\n    child := &child{\n        base:  base,\n        style: \"somestyle\",\n    }\n    child.say()\n    fmt.Println(\"The color is \" + child.color)\n}\n```", "```\nHi from say function\nThe color is Red\n```", "```\npackage main\nimport \"fmt\"\ntype base struct {\n    color string\n}\nfunc (b *base) say() {\n    fmt.Println(\"Hi from say function\")\n}\ntype child struct {\n    base  //embedding\n    style string\n}\nfunc check(b base) {\n    b.say()\n}\nfunc main() {\n    base := base{color: \"Red\"}\n    child := &child{\n        base:  base,\n        style: \"somestyle\",\n    }\n    child.say()\n    fmt.Println(\"The color is \" + child.color)\n    check(child)\n}\n```", "```\ncannot use child (type *child) as type base in argument to check\n```", "```\npackage main\nimport \"fmt\"\ntype iBase interface {\n    say()\n}\ntype base struct {\n    color string\n}\nfunc (b *base) say() {\n    fmt.Println(\"Hi from say function\")\n}\ntype child struct {\n    base  //embedding\n    style string\n}\nfunc check(b iBase) {\n    b.say()\n}\nfunc main() {\n    base := base{color: \"Red\"}\n    child := &child{\n        base:  base,\n        style: \"somestyle\",\n    }\n    child.say()\n    fmt.Println(\"The color is \" + child.color)\n    check(child)\n}\n```", "```\nHi from say function\nThe color is Red\nHi from say function\n```", "```\npackage main\nimport \"fmt\"\ntype iBase interface {\n    say()\n}\ntype base struct {\n    color string\n}\nfunc (b *base) say() {\n    b.clear()\n}\nfunc (b *base) clear() {\n    fmt.Println(\"Clear from base's function\")\n}\ntype child struct {\n    base  //embedding\n    style string\n}\nfunc (b *child) clear() {\n    fmt.Println(\"Clear from child's function\")\n}\nfunc check(b iBase) {\n    b.say()\n}\nfunc main() {\n    base := base{color: \"Red\"}\n    child := &child{\n        base:  base,\n        style: \"somestyle\",\n    }\n    child.say()\n}\n```", "```\nClear from base's function\n```", "```\npackage main\nimport \"fmt\"\ntype iBase interface {\n    say()\n}\ntype base struct {\n    color string\n    clear func()\n}\nfunc (b *base) say() {\n    b.clear()\n}\ntype child struct {\n    base  //embedding\n    style string\n}\nfunc check(b iBase) {\n    b.say()\n}\nfunc main() {\n    base := base{color: \"Red\",\n        clear: func() {\n            fmt.Println(\"Clear from child's function\")\n        }}\n    child := &child{\n        base:  base,\n        style: \"somestyle\",\n    }\n    child.say()\n}\n```", "```\nClear from child's function\n```", "```\npackage main\nimport \"fmt\"\ntype iBase1 interface {\n    say()\n}\ntype iBase2 interface {\n    walk()\n}\ntype base1 struct {\n    color string\n}\nfunc (b *base1) say() {\n    fmt.Println(\"Hi from say function\")\n}\ntype base2 struct {\n}\nfunc (b *base1) walk() {\n    fmt.Println(\"Hi from walk function\")\n}\ntype child struct {\n    base1 //embedding\n    base2 //embedding\n    style string\n}\nfunc (b *child) clear() {\n    fmt.Println(\"Clear from child's function\")\n}\nfunc check1(b iBase1) {\n    b.say()\n}\nfunc check2(b iBase2) {\n    b.walk()\n}\nfunc main() {\n    base1 := base1{color: \"Red\"}\n    base2 := base2{}\n    child := &child{\n        base1: base1,\n        base2: base2,\n        style: \"somestyle\",\n    }\n    child.say()\n    child.walk()\n    check1(child)\n    check2(child)\n}\n```", "```\nHi from say function\nHi from walk function\nHi from say function\nHi from walk function\n```", "```\npackage main\nimport \"fmt\"\ntype iAnimal interface {\n    breathe()\n}\ntype animal struct {\n}\nfunc (a *animal) breathe() {\n    fmt.Println(\"Animal breate\")\n}\ntype iAquatic interface {\n    iAnimal\n    swim()\n}\ntype aquatic struct {\n    animal\n}\nfunc (a *aquatic) swim() {\n    fmt.Println(\"Aquatic swim\")\n}\ntype iNonAquatic interface {\n    iAnimal\n    walk()\n}\ntype nonAquatic struct {\n    animal\n}\nfunc (a *nonAquatic) walk() {\n    fmt.Println(\"Non-Aquatic walk\")\n}\ntype shark struct {\n    aquatic\n}\ntype lion struct {\n    nonAquatic\n}\nfunc main() {\n    shark := &shark{}\n    checkAquatic(shark)\n    checkAnimal(shark)\n    lion := &lion{}\n    checkNonAquatic(lion)\n    checkAnimal(lion)\n}\nfunc checkAquatic(a iAquatic) {}\nfunc checkNonAquatic(a iNonAquatic) {}\nfunc checkAnimal(a iAnimal) {}\n```", "```\niAnimal\n--iAquatic\n----shark\n--iNonAquatic\n----lion\n```"]