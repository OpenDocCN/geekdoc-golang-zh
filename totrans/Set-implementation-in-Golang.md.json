["```\npackage main\n\nimport (\n    \"fmt\"\n)\n\n//MakeSet initialize the set\nfunc makeSet() *customSet {\n    return &customSet{\n        container: make(map[string]struct{}),\n    }\n}\n\ntype customSet struct {\n    container map[string]struct{}\n}\n\nfunc (c *customSet) Exists(key string) bool {\n    _, exists := c.container[key]\n    return exists\n}\n\nfunc (c *customSet) Add(key string) {\n    c.container[key] = struct{}{}\n}\n\nfunc (c *customSet) Remove(key string) error {\n    _, exists := c.container[key]\n    if !exists {\n        return fmt.Errorf(\"Remove Error: Item doesn't exist in set\")\n    }\n    delete(c.container, key)\n    return nil\n}\n\nfunc (c *customSet) Size() int {\n    return len(c.container)\n}\n\nfunc main() {\n    customSet := makeSet()\n    fmt.Printf(\"Add: B\\n\")\n    customSet.Add(\"A\")\n    fmt.Printf(\"Add: B\\n\")\n    customSet.Add(\"B\")\n    fmt.Printf(\"Size: %d\\n\", customSet.Size())\n    fmt.Printf(\"A Exists?: %t\\n\", customSet.Exists(\"A\"))\n    fmt.Printf(\"B Exists?: %t\\n\", customSet.Exists(\"B\"))\n    fmt.Printf(\"C Exists?: %t\\n\", customSet.Exists(\"C\"))\n    fmt.Printf(\"Remove: B\\n\")\n    customSet.Remove(\"B\")\n    fmt.Printf(\"B Exists?: %t\\n\", customSet.Exists(\"B\"))\n}\n```", "```\nAdd: B\nAdd: B\nSize: 2\nA Exists?: true\nB Exists?: true\nC Exists?: false\nRemove: B\nB Exists?: false\n```"]