["```\npackage main\n\nimport \"fmt\"\n\n//Abstract Interface\ntype iAlpha interface {\n    work()\n    common()\n}\n\n//Abstract Concrete Type\ntype alpha struct {\n    name string\n}\n\nfunc (a *alpha) common() {\n    fmt.Println(\"common called\")\n}\n\n//Implementing Type\ntype beta struct {\n    alpha\n}\n\nfunc (b *beta) work() {\n    fmt.Println(\"work called\")\n    fmt.Printf(\"name is %s\\n\", b.name)\n    b.common()\n}\n\nfunc main() {\n    a := alpha{\n        name: \"test\",\n    }\n    b := &beta{\n        alpha: a,\n    }\n    b.work()\n}\n```", "```\nwork called\nname is test\ncommon called\n```", "```\npackage main\n\nimport \"fmt\"\n\n//Abstract Interface\ntype iAlpha interface {\n    work()\n    common()\n}\n\n//Abstract Concrete Type\ntype alpha struct {\n    name string\n    work func()\n}\n\nfunc (a *alpha) common() {\n    fmt.Println(\"common called\")\n    a.work()\n}\n\n//Implementing Type\ntype beta struct {\n    alpha\n}\n\nfunc (b *beta) work() {\n    fmt.Println(\"work called\")\n    fmt.Printf(\"name is %s\\n\", b.name)\n}\n\nfunc main() {\n    a := alpha{\n        name: \"test\",\n    }\n    b := &beta{\n        alpha: a,\n    }\n    b.alpha.work = b.work\n    b.common()\n}\n```", "```\ncommon called\nwork called\nname is test\n```", "```\npackage main\n\nimport \"fmt\"\n\n//Abstract Interface\ntype iAlpha interface {\n    work()\n    common(iAlpha)\n}\n\n//Abstract Concrete Type\ntype alpha struct {\n    name string\n}\n\nfunc (a *alpha) common(i iAlpha) {\n    fmt.Println(\"common called\")\n    i.work()\n}\n\n//Implementing Type\ntype beta struct {\n    alpha\n}\n\nfunc (b *beta) work() {\n    fmt.Println(\"work called\")\n    fmt.Printf(\"Name is %s\\n\", b.name)\n}\n\nfunc main() {\n    a := alpha{\n        name: \"test\",\n    }\n    b := &beta{\n        alpha: a,\n    }\n    b.common(b)\n}\n```", "```\ncommon called\nwork called\nName is test\n```"]