- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:23:38'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Select with send operation in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/select-send-operation-go/](https://golangbyexample.com/select-send-operation-go/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[One send one receive operation](#One_send_one_receive_operation "One send
    one receive operation")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[All send operations ](#All_send_operations "All send operations ")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[All receive operations](#All_receive_operations "All receive operations")*  *#
    **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select allows both send and receive operations from a channel in its case statement.
    Let’s see examples of
  prefs: []
  type: TYPE_NORMAL
- en: One send one receive operation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All send operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All receive operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**One send one receive operation**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the above program we created two channels which are passed to two different
    goroutines. In the select statement, the first case statement is receiving from **ch1** channel.
    The second case statement is sending data to the **ch2** channel and that data
    is being received in the **goTwo** goroutine. Since it is not deterministic whether
    the receive operation on **ch1** will complete earlier or send operation on **ch2** will
    completely  earlier the program may either output this
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: or this
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**All send operations **'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the above program, both case statements is sending data to the **ch1** and **ch2** channel
    respectively. The data from the ch1 channel is being received in goOne goroutine
    and the data from the ch2 channel is being received in goTwo goroutine. None of
    the send operation in each of the case statement is blocked.  So the program can
    either output this
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: or this
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**All receive operations**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the above program we created two channels which are passed to two different
    goroutines. Then each of the  goroutine  is sending one value to the channel.
    In the select  we have two case statement. Each of the two case statement is waiting
    for a receive operation to complete on one of the channels. Once any receive operation
    is complete on any of the channel it is executed and **select** exits. So as seen
    from output, in the above program it  prints the received value from one of the
    channel and exits.
  prefs: []
  type: TYPE_NORMAL
- en: So in the above program since it is not deterministic which of the send operation
    will complete earlier that is why you will see different output if you run the
    program different times.
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
