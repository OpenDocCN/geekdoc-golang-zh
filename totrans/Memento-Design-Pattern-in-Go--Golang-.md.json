["```\npackage main\n\ntype originator struct {\n    state string\n}\n\nfunc (e *originator) createMemento() *memento {\n    return &memento{state: e.state}\n}\n\nfunc (e *originator) restorememento(m *memento) {\n    e.state = m.getSavedState()\n}\n\nfunc (e *originator) setState(state string) {\n    e.state = state\n}\n\nfunc (e *originator) getState() string {\n    return e.state\n```", "```\npackage main\n\ntype memento struct {\n    state string\n}\n\nfunc (m *memento) getSavedState() string {\n    return m.state\n}\n```", "```\npackage main\n\ntype caretaker struct {\n    mementoArray []*memento\n}\n\nfunc (c *caretaker) addMemento(m *memento) {\n    c.mementoArray = append(c.mementoArray, m)\n}\n\nfunc (c *caretaker) getMenento(index int) *memento {\n    return c.mementoArray[index]\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    caretaker := &caretaker{\n        mementoArray: make([]*memento, 0),\n    }\n    originator := &originator{\n        state: \"A\",\n    }\n    fmt.Printf(\"Originator Current State: %s\\n\", originator.getState())\n    caretaker.addMemento(originator.createMemento())\n\n    originator.setState(\"B\")\n    fmt.Printf(\"Originator Current State: %s\\n\", originator.getState())\n\n    caretaker.addMemento(originator.createMemento())\n    originator.setState(\"C\")\n\n    fmt.Printf(\"Originator Current State: %s\\n\", originator.getState())\n    caretaker.addMemento(originator.createMemento())\n\n    originator.restorememento(caretaker.getMenento(1))\n    fmt.Printf(\"Restored to State: %s\\n\", originator.getState())\n\n    originator.restorememento(caretaker.getMenento(0))\n    fmt.Printf(\"Restored to State: %s\\n\", originator.getState())\n}\n```", "```\noriginator Current State: A\noriginator Current State: B\noriginator Current State: C\nRestored to State: B\nRestored to State: A \n```", "```\npackage main\n\nimport \"fmt\"\n\ntype originator struct {\n    state string\n}\n\nfunc (e *originator) createMemento() *memento {\n    return &memento{state: e.state}\n}\n\nfunc (e *originator) restoreState(m *memento) {\n    e.state = m.getSavedState()\n}\n\nfunc (e *originator) setState(state string) {\n    e.state = state\n}\n\nfunc (e *originator) getState() string {\n    return e.state\n}\n\ntype memento struct {\n    state string\n}\n\nfunc (m *memento) getSavedState() string {\n    return m.state\n}\n\ntype caretaker struct {\n    mementoArray []*memento\n}\n\nfunc (c *caretaker) addMemento(m *memento) {\n    c.mementoArray = append(c.mementoArray, m)\n}\n\nfunc (c *caretaker) getMenento(index int) *memento {\n    return c.mementoArray[index]\n}\n\nfunc main() {\n    caretaker := &caretaker{\n        mementoArray: make([]*memento, 0),\n    }\n    originator := &originator{\n        state: \"A\",\n    }\n    fmt.Printf(\"Originator Current State: %s\\n\", originator.getState())\n    caretaker.addMemento(originator.createMemento())\n    originator.setState(\"B\")\n    fmt.Printf(\"Originator Current State: %s\\n\", originator.getState())\n    caretaker.addMemento(originator.createMemento())\n    originator.setState(\"C\")\n    fmt.Printf(\"Originator Current State: %s\\n\", originator.getState())\n    caretaker.addMemento(originator.createMemento())\n    originator.restoreState(caretaker.getMenento(1))\n    fmt.Printf(\"Restored to State: %s\\n\", originator.getState())\n    originator.restoreState(caretaker.getMenento(0))\n    fmt.Printf(\"Restored to State: %s\\n\", originator.getState())\n}\n```", "```\noriginator Current State: A\noriginator Current State: B\noriginator Current State: C\nRestored to State: B\nRestored to State: A\n```"]