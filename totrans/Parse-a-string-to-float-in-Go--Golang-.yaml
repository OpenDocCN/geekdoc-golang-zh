- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:09:55'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Parse a string to float in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/parse-string-representation-float-go/](https://golangbyexample.com/parse-string-representation-float-go/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**strconv.ParseFloat()** function can be used to parse a string representation
    of a float'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://golang.org/pkg/strconv/#ParseFloat](https://golang.org/pkg/strconv/#ParseFloat)'
  prefs: []
  type: TYPE_NORMAL
- en: Below is the signature of the function
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Some points worth noting
  prefs: []
  type: TYPE_NORMAL
- en: The first argument is the string representation of a float
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second argument is the bitSize which specifies the precision. It is 32 for
    float32 and 64 for float64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The return value will always be float64 but will be convertible to float32 without
    any change in its value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s see a working code
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
