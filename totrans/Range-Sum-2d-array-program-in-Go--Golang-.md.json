["```\ntopSum = sum_matrix[row1-1][col2]\nleftSum = sum_matrix[row2][col1-1]\ncornerSum = sum_matrix[row1-1][col1-1]\n```", "```\nsum_matrix[row2][col2] - topSum - leftSum + cornerSum\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype NumMatrix struct {\n\tmatrix     [][]int\n\tsum_matrix [][]int\n\tnumColumn  int\n\tnumRows    int\n}\n\nfunc initNumArray(matrix [][]int) NumMatrix {\n\tnumRows := len(matrix)\n\tnumColumn := len(matrix[0])\n\n\tif numColumn == 0 || numRows == 0 {\n\t\treturn NumMatrix{}\n\t}\n\n\tsum_matrix := make([][]int, numRows)\n\n\tfor i := 0; i < numRows; i++ {\n\t\tsum_matrix[i] = make([]int, numColumn)\n\t}\n\n\tsum_matrix[0][0] = matrix[0][0]\n\tfor i := 1; i < numRows; i++ {\n\t\tsum_matrix[i][0] = matrix[i][0] + sum_matrix[i-1][0]\n\t}\n\n\tfor i := 1; i < numColumn; i++ {\n\t\tsum_matrix[0][i] = matrix[0][i] + sum_matrix[0][i-1]\n\t}\n\n\tfor i := 1; i < numRows; i++ {\n\t\tfor j := 1; j < numColumn; j++ {\n\t\t\tsum_matrix[i][j] = matrix[i][j] + sum_matrix[i-1][j] + sum_matrix[i][j-1] - sum_matrix[i-1][j-1]\n\t\t}\n\t}\n\n\tnum_matrix := NumMatrix{\n\t\tmatrix:     matrix,\n\t\tsum_matrix: sum_matrix,\n\t\tnumColumn:  numColumn,\n\t\tnumRows:    numRows,\n\t}\n\treturn num_matrix\n}\n\nfunc (this *NumMatrix) SumRegion(row1 int, col1 int, row2 int, col2 int) int {\n\n\ttopSum := 0\n\tleftSum := 0\n\tcornerSum := 0\n\tif row1 > 0 {\n\t\ttopSum = this.sum_matrix[row1-1][col2]\n\t}\n\n\tif col1 > 0 {\n\t\tleftSum = this.sum_matrix[row2][col1-1]\n\t}\n\n\tif row1 > 0 && col1 > 0 {\n\t\tcornerSum = this.sum_matrix[row1-1][col1-1]\n\t}\n\n\treturn this.sum_matrix[row2][col2] - topSum - leftSum + cornerSum\n}\n\nfunc main() {\n\tmatrix := [][]int{{1, 3, 5}, {6, 7, 4}}\n\tna := initNumArray(matrix)\n\n\toutput := na.SumRegion(0, 1, 1, 2)\n\tfmt.Println(output)\n\n}\n```", "```\n19\n```"]