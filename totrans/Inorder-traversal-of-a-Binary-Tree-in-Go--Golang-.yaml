- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '类别: 未分类'
- en: 'date: 2024-10-13 06:46:01'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-10-13 06:46:01'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Inorder traversal of a Binary Tree in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go语言中的二叉树中序遍历
- en: 来源：[https://golangbyexample.com/inorder-binary-tree-golang/](https://golangbyexample.com/inorder-binary-tree-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/inorder-binary-tree-golang/](https://golangbyexample.com/inorder-binary-tree-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *## **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *## **概述**'
- en: In the inorder traversal of a binary tree, we follow the below order
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在二叉树的中序遍历中，我们遵循以下顺序
- en: Vist Left Subtree
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问左子树
- en: Visit Root
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问根节点
- en: Visit Right Subtree
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问右子树
- en: For example, let’s say we have below binary tree
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有如下的二叉树
- en: '![](img/9a9347838908483552b24df3dc54cd38.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a9347838908483552b24df3dc54cd38.png)'
- en: Then inorder traversal would be
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那么中序遍历将是
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Program**'
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Here is the program for the same
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是相应的程序
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Output**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意:** 请查看我们的Golang高级教程。本系列教程内容丰富，我们尝试用例子涵盖所有概念。本教程适合那些希望获得Golang专业知识和扎实理解的人
    – [Golang高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you –[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解如何在Golang中实现所有设计模式。如果是的话，这篇文章适合你 – [所有设计模式Golang](https://golangbyexample.com/all-design-patterns-golang/)
- en: '[go](https://golangbyexample.com/tag/go/)*'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Go语言](https://golangbyexample.com/tag/go/)*'
