["```\nmid = x/2\n```", "```\nInput: 1->2->3->4->5\nOutput: 1->2->4->5\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfirst := initList()\n\tfirst.AddFront(5)\n\tfirst.AddFront(4)\n\tfirst.AddFront(3)\n\tfirst.AddFront(2)\n\tfirst.AddFront(1)\n\n\tfirst.Head.Traverse()\n\tdeleteMiddle(first.Head)\n\tfmt.Println(\"\")\n\tfirst.Head.Traverse()\n\n}\n\nfunc initList() *SingleList {\n\treturn &SingleList{}\n}\n\ntype ListNode struct {\n\tVal  int\n\tNext *ListNode\n}\n\nfunc (l *ListNode) Traverse() {\n\tfor l != nil {\n\t\tfmt.Println(l.Val)\n\t\tl = l.Next\n\t}\n}\n\ntype SingleList struct {\n\tLen  int\n\tHead *ListNode\n}\n\nfunc (s *SingleList) AddFront(num int) {\n\tele := &ListNode{\n\t\tVal: num,\n\t}\n\tif s.Head == nil {\n\t\ts.Head = ele\n\t} else {\n\t\tele.Next = s.Head\n\t\ts.Head = ele\n\t}\n\ts.Len++\n}\n\nfunc deleteMiddle(head *ListNode) *ListNode {\n\n\tif head == nil {\n\t\treturn nil\n\t}\n\n\tsize := sizeOfList(head)\n\n\tmid := size / 2\n\n\tif mid == 0 {\n\t\treturn head.Next\n\t}\n\n\tcurr := head\n\tfor i := 0; i < mid-1; i++ {\n\t\tcurr = curr.Next\n\t}\n\n\tprev := curr\n\n\tmidNode := prev.Next\n\n\tif midNode == nil {\n\t\treturn head\n\t}\n\n\tmidNext := midNode.Next\n\n\tprev.Next = midNext\n\n\treturn head\n\n}\n\nfunc sizeOfList(head *ListNode) int {\n\tl := 0\n\tfor head != nil {\n\t\tl = l + 1\n\t\thead = head.Next\n\t}\n\treturn l\n}\n```", "```\n1\n2\n3\n4\n5\n\n1\n2\n4\n5\n```"]