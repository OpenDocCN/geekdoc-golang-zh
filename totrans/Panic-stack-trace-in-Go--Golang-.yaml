- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:26:27'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:26:27
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Panic stack trace in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go（Golang）中的崩溃堆栈跟踪
- en: 来源：[https://golangbyexample.com/panic-stack-trace-go/](https://golangbyexample.com/panic-stack-trace-go/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/panic-stack-trace-go/](https://golangbyexample.com/panic-stack-trace-go/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Example](#Example "Example")*  *# **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[示例](#Example "Example")*  *# **概述**'
- en: '**debug** package of golang provides a **StackTrace** function that can be
    used print the stack trace of the panic in the recover function'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: golang的**debug**包提供了一个**StackTrace**函数，可以用来打印recover函数中崩溃的堆栈跟踪。
- en: '**Example**'
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**示例**'
- en: Let’s see a program for that
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个程序
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above program we have a function **checkAndPrint** which checks and prints
    slice element at an index passed in the argument. If the index passed is greater
    than the length of the array then the program panics.  We have added a defer function
    named **handleOutIfBounds** as well at the start of the function **checkAndPrint**. This
    function contains the call to recover function as below
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们有一个函数**checkAndPrint**，它检查并打印传入参数的索引处的切片元素。如果传入的索引大于数组的长度，程序将会出现崩溃。我们在函数**checkAndPrint**的开始处添加了一个名为**handleOutIfBounds**的延迟函数。这个函数包含了下面的recover函数调用。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The **recover** function will catch the panic and we can also print the message
    from the panic.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**recover**函数将捕获崩溃，我们也可以打印崩溃中的消息。'
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We print the stack trace of the panic in the recover function using the **StackTrace**
    function. It prints the correct  stack trace as seen from the output
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用**StackTrace**函数在recover函数中打印崩溃的堆栈跟踪。它打印出正确的堆栈跟踪，如输出所示。
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
