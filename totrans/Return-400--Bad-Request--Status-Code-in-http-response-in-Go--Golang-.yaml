- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '类别: 未分类'
- en: 'date: 2024-10-13 06:38:24'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-10-13 06:38:24'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Return 400 (Bad Request) Status Code in http response in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Go（Golang）中返回400（错误请求）状态码的HTTP响应
- en: 来源：[https://golangbyexample.com/400-http-status-response-golang/](https://golangbyexample.com/400-http-status-response-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/400-http-status-response-golang/](https://golangbyexample.com/400-http-status-response-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *## **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *## **概述**'
- en: '**net/http** package of golang provides the status code constants which could
    be used to return different status codes- [https://golang.org/src/net/http/status.go](https://golang.org/src/net/http/status.go)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Golang的**net/http**包提供了状态码常量，可用于返回不同的状态码 - [https://golang.org/src/net/http/status.go](https://golang.org/src/net/http/status.go)
- en: The same can also be used to return the 400 (Bad Request) HTTP status code. 
    The HTTP 400 status code is defined by the below constant
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 同样也可以用来返回400（错误请求）HTTP状态码。HTTP 400状态码由以下常量定义。
- en: In this article, we will also see how to return a JSON body along with the 400
    (Bad Request) Status Code
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们还将看到如何在返回400（错误请求）状态码的同时返回JSON主体。
- en: '**Program**'
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Below is the program for the same
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相同的程序
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here we are using the **WriteHeader** function to specify the http status code
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们使用**WriteHeader**函数来指定HTTP状态码。
- en: Run the above program. It will start a server on 8080 port on your local machine.
    Now make the below curl call to the server
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述程序。它将在你的本地机器上启动一个8080端口的服务器。现在向服务器发出以下curl调用。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Below will be the output
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下将是输出
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see from the output, it will correctly return the 400 status code.
    If we also want to return the JSON error body, then below is the code for the
    same
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看到，它将正确返回400状态码。如果我们还想返回JSON错误主体，那么以下是相应的代码。
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The above code returns the below JSON request body back in response
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码在响应中返回以下JSON请求主体。
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run the above program. It will start a server on 8080 port on your local machine.
    Now make the below curl call to the server
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述程序。它将在你的本地机器上启动一个8080端口的服务器。现在向服务器发出以下curl调用。
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Below will be the output
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下将是输出
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see from the output, it correctly returns the 400 status code along
    with the body.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看到，它正确返回了400状态码及其主体。
- en: You can also directly pass 400 to the WriteHeader function to send the 400 response.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以直接将400传递给WriteHeader函数以发送400响应。
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This also works correctly. Try it out.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这也能正常工作。试试看。
- en: Also, check out our Golang advance tutorial Series - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，查看我们的Golang进阶教程系列 - [Golang进阶教程](https://golangbyexample.com/golang-comprehensive-tutorial/)
- en: '[400](https://golangbyexample.com/tag/400/)*   [go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[400](https://golangbyexample.com/tag/400/)*   [go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
