["```\n8->7->4\n9->3->3\n```", "```\n7->1->8\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfirst := initList()\t\n        first.AddFront(4)\n\tfirst.AddFront(7)\n\tfirst.AddFront(8)\n\n\tsecond := initList()\n\tsecond.AddFront(3)\n\tsecond.AddFront(3)\n\tsecond.AddFront(9)\n\n\tresult := addTwoNumbers(first.Head, second.Head)\n\tresult.Traverse()\n}\n\nfunc initList() *SingleList {\n\treturn &SingleList{}\n}\n\ntype ListNode struct {\n\tVal  int\n\tNext *ListNode\n}\n\nfunc (l *ListNode) Traverse() {\n\tfor l != nil {\n\t\tfmt.Println(l.Val)\n\t\tl = l.Next\n\t}\n}\n\ntype SingleList struct {\n\tLen  int\n\tHead *ListNode\n}\n\nfunc (s *SingleList) AddFront(num int) {\n\tele := &ListNode{\n\t\tVal: num,\n\t}\n\tif s.Head == nil {\n\t\ts.Head = ele\n\t} else {\n\t\tele.Next = s.Head\n\t\ts.Head = ele\n\t}\n\ts.Len++\n}\n\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n\tvar prev *ListNode\n\tvar result *ListNode\n\tcarry := 0\n\n\tfor l1 != nil && l2 != nil {\n\n\t\tsum := l1.Val + l2.Val + carry\n\n\t\tcarry = sum / 10\n\t\tif sum >= 10 {\n\t\t\tsum = sum % 10\n\t\t}\n\n\t\ttempNode := &ListNode{Val: sum}\n\n\t\tif prev == nil {\n\t\t\tresult = tempNode\n\t\t\tprev = tempNode\n\t\t} else {\n\t\t\tprev.Next = tempNode\n\t\t\tprev = prev.Next\n\t\t}\n\n\t\tl1 = l1.Next\n\n\t\tl2 = l2.Next\n\t}\n\n\tfor l1 != nil {\n\t\tsum := l1.Val + carry\n\t\tcarry = sum / 10\n\t\tif sum >= 10 {\n\t\t\tsum = sum % 10\n\t\t}\n\t\ttempNode := &ListNode{Val: sum}\n\t\tprev.Next = tempNode\n\t\tl1 = l1.Next\n\t}\n\n\tfor l2 != nil {\n\t\tsum := l2.Val + carry\n\t\tcarry = sum / 10\n\t\tif sum >= 10 {\n\t\t\tsum = sum % 10\n\t\t}\n\t\ttempNode := &ListNode{Val: sum}\n\t\tprev.Next = tempNode\n\t\tl2 = l2.Next\n\t}\n\n\tif carry > 0 {\n\t\ttempNode := &ListNode{Val: carry}\n\t\tprev.Next = tempNode\n\t}\n\treturn result\n}\n```", "```\n7\n1\n8\n```"]