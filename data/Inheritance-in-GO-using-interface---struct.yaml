- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:00:45'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:00:45
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Inheritance in GO using interface + struct
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用接口 + 结构体的 GO 继承
- en: 来源：[https://golangbyexample.com/inheritance-go-interface-struct/](https://golangbyexample.com/inheritance-go-interface-struct/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/inheritance-go-interface-struct/](https://golangbyexample.com/inheritance-go-interface-struct/)
- en: This post describes inheritance using interface and struct. Do visit our Inheritance
    in Go Complete Guide post for full reference
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本文描述了使用接口和结构体的继承。请查看我们关于 Go 继承的完整指南以获取全面参考。
- en: '[OOP: Inheritance in GOLANG complete guide](https://golangbyexample.com/oop-inheritance-golang-complete/)'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[OOP: GOLANG 继承完整指南](https://golangbyexample.com/oop-inheritance-golang-complete/)'
- en: '[https://golangbyexample.com/oop-inheritance-golang-complete/embed/#?secret=EpVuUFYEMN#?secret=OtvYyDmPmR](https://golangbyexample.com/oop-inheritance-golang-complete/embed/#?secret=EpVuUFYEMN#?secret=OtvYyDmPmR)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://golangbyexample.com/oop-inheritance-golang-complete/embed/#?secret=EpVuUFYEMN#?secret=OtvYyDmPmR](https://golangbyexample.com/oop-inheritance-golang-complete/embed/#?secret=EpVuUFYEMN#?secret=OtvYyDmPmR)'
- en: 'Go supports inheritance by embedding struct or using interface. There are different
    ways of doing it and each having some limitations. The different ways are:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Go 通过嵌入结构体或使用接口来支持继承。实现方式不同，每种方式都有一些限制。这些不同的方法包括：
- en: By using embedded struct – The parent struct is embedded in child struct. The
    limitation is that subtyping is not possible with this approach. You cannot pass
    the child struct to a function that expects base. Refer this link for more details
    – [**Inheritance using Struct**](https://golangbyexample.com/inheritance-go-struct/)
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用嵌入结构体 – 父结构体嵌入在子结构体中。这个方法的限制是无法进行子类型化。你不能将子结构体传递给期望基础结构体的函数。有关更多详细信息，请参考这个链接
    – [**使用结构体的继承**](https://golangbyexample.com/inheritance-go-struct/)
- en: By using interfaces – Subtyping is possible but the limitation is that one has
    no way to refer to common properties. Refer this link for more details – [**Inheritance
    using Interface**](https://golangbyexample.com/inheritance-go-interface/)
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用接口 – 可以进行子类型化，但限制是无法引用公共属性。有关更多详细信息，请参考这个链接 – [**使用接口的继承**](https://golangbyexample.com/inheritance-go-interface/)
- en: '**By using interface + struct** – This fixes the limitations of above two approach
    but one limitation is that overriding methods is not possible. But there is workaround.
    Current post describes this approach'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**通过使用接口 + 结构体** – 这解决了上述两种方法的限制，但一个限制是无法重写方法。不过有变通办法。当前文章描述了这种方法。'
- en: '**Details:**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**详细信息：**'
- en: 'In this approach, the base struct is embedded in child struct and base struct
    implements all methods of the common interface. So child struct can:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，基础结构体嵌入在子结构体中，基础结构体实现了所有公共接口的方法。因此，子结构体可以：
- en: Access methods and properties of base struct
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问基础结构体的方法和属性
- en: Since base struct implements all functions of the common interface, the common
    interface itself can be used for subtyping.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于基础结构体实现了公共接口的所有函数，公共接口本身可以用于子类型化。
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output:**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
