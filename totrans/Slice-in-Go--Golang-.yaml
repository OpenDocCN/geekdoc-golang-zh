- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:19:00'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:19:00
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Slice in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go语言中的切片 (Golang)
- en: 来源：[https://golangbyexample.com/slice-in-golang/](https://golangbyexample.com/slice-in-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/slice-in-golang/](https://golangbyexample.com/slice-in-golang/)
- en: This is the  chapter 18 of the golang comprehensive tutorial series. Refer to
    this link for other chapters of the series – [Golang Comprehensive Tutorial Series](https://golangbyexample.com/golang-comprehensive-tutorial/)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是golang综合教程系列的第18章。有关该系列其他章节，请参阅此链接 – [Golang综合教程系列](https://golangbyexample.com/golang-comprehensive-tutorial/)
- en: '**Next Tutorial** – [Maps](https://golangbyexample.com/maps-in-golang)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**下一个教程** – [映射](https://golangbyexample.com/maps-in-golang)'
- en: '**Previous Tutorial** – [Array](https://golangbyexample.com/understanding-array-golang-complete-guid)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**上一个教程** – [数组](https://golangbyexample.com/understanding-array-golang-complete-guid)'
- en: Now let’s check out the current tutorial. Below is the table of contents for
    current tutorial.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们查看当前的教程。以下是当前教程的目录。
- en: Table of Contents
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Creating a slice](#Creating_a_slice "Creating a slice")'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建切片](#Creating_a_slice "Creating a slice")'
- en: '[Using the []<type>{} format](#Using_the_format "Using the []<type>{} format")'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 []<type>{} 格式](#Using_the_format "Using the []<type>{} format")'
- en: '[Creating a slice from another slice or array](#Creating_a_slice_from_another_slice_or_array
    "Creating a slice from another slice or array")'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从另一个切片或数组创建切片](#Creating_a_slice_from_another_slice_or_array "Creating a slice
    from another slice or array")'
- en: '[Create a slice from Array](#Create_a_slice_from_Array "Create a slice from
    Array")'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从数组创建切片](#Create_a_slice_from_Array "Create a slice from Array")'
- en: '[Create a slice from slice](#Create_a_slice_from_slice "Create a slice from
    slice")'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从切片创建切片](#Create_a_slice_from_slice "Create a slice from slice")'
- en: '[Using the make function](#Using_the_make_function "Using the make function")'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用make函数](#Using_the_make_function "Using the make function")'
- en: '[Using the new function](#Using_the_new_function "Using the new function")'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用new函数](#Using_the_new_function "Using the new function")'
- en: '[Length vs Capacity](#Length_vs_Capacity "Length vs Capacity")'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[长度与容量](#Length_vs_Capacity "Length vs Capacity")'
- en: '[Accessing and Modifying Slice Elements](#Accessing_and_Modifying_Slice_Elements
    "Accessing and Modifying Slice Elements")'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[访问和修改切片元素](#Accessing_and_Modifying_Slice_Elements "Accessing and Modifying
    Slice Elements")'
- en: '[Different ways of iterating a slice](#Different_ways_of_iterating_a_slice
    "Different ways of iterating a slice")'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[切片的不同迭代方式](#Different_ways_of_iterating_a_slice "Different ways of iterating
    a slice")'
- en: '[Appending to a slice](#Appending_to_a_slice "Appending to a slice")'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[向切片添加元素](#Appending_to_a_slice "Appending to a slice")'
- en: '[Copy a slice](#Copy_a_slice "Copy a slice")'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[复制切片](#Copy_a_slice "Copy a slice")'
- en: '[Nil Slice](#Nil_Slice "Nil Slice")'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[空切片](#Nil_Slice "Nil Slice")'
- en: '[Multidimensional Slices](#Multidimensional_Slices "Multidimensional Slices")'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[多维切片](#Multidimensional_Slices "Multidimensional Slices")'
- en: '[Conclusion](#Conclusion "Conclusion")*  *# **Overview**'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[总结](#Conclusion "Conclusion")*  *# **概述**'
- en: The size of the array being part of it limits the expressiveness and power of
    array in go. This is where slice comes into the picture. Slice is more powerful
    and convenient to use than an array.  Slice, in fact, is more analogous to arrays
    in another programming language.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的大小限制了其表达能力和在Go中的力量。这就是切片的用武之地。切片比数组更强大和方便使用。实际上，切片与其他编程语言中的数组更为相似。
- en: A slice points to an underlying array and is internally represented by a slice
    header.  Unlike array, the size of a slice is flexible and can be changed.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 切片指向底层数组，并通过切片头进行内部表示。与数组不同，切片的大小是灵活的，可以更改。
- en: '**Internal representation of a slice**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**切片的内部表示**'
- en: Internally a slice is represented by three things.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 切片在内部由三部分表示。
- en: Pointer to the underlying array
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指向底层数组的指针
- en: Current length of the underlying array
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底层数组的当前长度
- en: Total Capacity which is the maximum capacity to which the underlying array can
    expand.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总容量是底层数组可以扩展到的最大容量。
- en: 'Above internal representation is described by **SliceHeader** struct which
    looks like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上述内部表示由**SliceHeader**结构描述，结构如下所示：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The **Pointer** field in the slice header is a pointer to the underlying array. 
    Len is the current length of the slice and Cap is the capacity of the slice. Similar
    to array a slice index starts from **zero** till **length_of_slice-1**. So a slice
    of 3 lengths and 5 capacity will look like below
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 切片头中的**指针**字段是指向底层数组的指针。Len是切片的当前长度，Cap是切片的容量。与数组类似，切片索引从**零**开始，到**length_of_slice-1**结束。因此，一个长度为3、容量为5的切片如下所示：
- en: '![](img/956bef1f4ab635ef8ec4169ba8174882.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/956bef1f4ab635ef8ec4169ba8174882.png)'
- en: '****Creating** a slice**'
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '****创建** 切片**'
- en: There are four ways of creating a slice
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 创建切片有四种方式。
- en: Using the []<type>{} format
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 []<类型>{} 格式
- en: Creating a slice from another slice or array
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从另一个切片或数组创建切片。
- en: Using make
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 make
- en: Using new
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 new
- en: Let’s look at each of above method one by one.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐个看一下上述每种方法。
- en: '**Using the []<type>{} format**'
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**使用 []<类型>{} 格式**'
- en: The most common way of declaring a slice is this
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 声明切片的最常用方法是这个。
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It declares an empty of slice of 0 length and 0 capacity. We can also initialise
    the slice during declaration.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 它声明了一个长度为 0、容量为 0 的空切片。我们也可以在声明时初始化切片。
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It declares a slice of integers of length 2 and also the capacity of 2\. The
    capacity will be equal to the actual slice elements specified. We also have two
    library functions provided by go which can be used to know the **length** and
    **capacity** of a slice.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 它声明了一个长度为 2 的整数切片，容量也为 2。容量将等于指定的实际切片元素数量。我们还有两个由 Go 提供的库函数可以用来获取切片的 **长度**
    和 **容量**。
- en: '**len()** function – for  length of the slice'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**len()** 函数 – 用于切片的长度。'
- en: '**cap()** function – for capacity of the slice'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**cap()** 函数 – 用于切片的容量。'
- en: Let’s see a small program which shows the above points
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个展示上述要点的小程序。
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Output**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When the actual elements are not specified, then both length and capacity of
    the slice is zero. When actual elements are specified , both length and capacity
    is equal to the number of actual elements specified.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当实际元素未指定时，切片的长度和容量均为零。当实际元素被指定时，长度和容量等于指定的实际元素数量。
- en: '**Creating a slice from another slice or array**'
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**从另一个切片或数组创建切片**'
- en: A slice can be created by re-slicing an exiting slice or array.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 切片可以通过重新切片现有切片或数组来创建。
- en: '**Create a slice from Array**'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**从数组创建切片**'
- en: The format for creating a new slice by re-slicing an existing array is
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通过重新切片现有数组创建新切片的格式是
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The above operation will return a new slice from the arraystarting from index
    **start** to index **end-1\.** So the element at index **end** is not included
    in the newly created slice. While re-slicing , both start and end index is optional.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 上述操作将返回一个从索引 **开始** 到索引 **结束-1** 的新切片。因此，索引 **结束** 处的元素不包括在新创建的切片中。在重新切片时，起始和结束索引都是可选的。
- en: The default value of the start index is zero
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 起始索引的默认值为零。
- en: The default value of the end index is the length of the array
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结束索引的默认值是数组的长度。
- en: Let’s see an example.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Output**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice in above example that
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意在上述示例中，
- en: length of newly created slice = (**end**–**start**)
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新创建切片的长度 = (**结束**–**开始**)
- en: capacity of newly created slice = (**length_of_array**–**start**)
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新创建切片的容量 = (**数组长度**–**开始**)
- en: The **num1** slice would look like
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**num1** 切片看起来像'
- en: '![](img/33586fc71a4b7b6f0294dc7dc24f41df.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33586fc71a4b7b6f0294dc7dc24f41df.png)'
- en: The newly created slices still refer the original array. To check this change
    element at any one of the index of the array and then reprint the slice
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 新创建的切片仍然指向原数组。要检查此更改，可以在数组的任一索引处更改元素，然后重新打印切片。
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here is the output:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This proves that each of the new slice is still referring to the original array.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这证明每个新切片仍然指向原始数组。
- en: '**Create a slice from slice**'
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**从切片创建切片**'
- en: Whatever we discussed about re-slicing from an array also applies here as well.
    See below example which illustrates same thing
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论的从数组重新切片的内容在这里同样适用。请看下面的示例，它说明了同样的事情。
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Output**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here also the newly created slices refer to the same underlying array that was
    being referred to by the original slice.  To check this change element at any
    one of the index of the original slice and then reprint all the newly created
    slices
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，新创建的切片也指向原切片所引用的同一基础数组。要检查此更改，可以在原切片的任一索引处更改元素，然后重新打印所有新创建的切片。
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here is the output:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Using the make function**'
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**使用 make 函数**'
- en: '**make** is a builtin function provided by go that can also be used to create
    a slice. Below is the signature of make function'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**make** 是 Go 提供的一个内置函数，也可以用来创建切片。以下是 make 函数的签名。'
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Capacity is an optional parameter while creating slice using the make function.
    When capacity is omitted, the capacity of the slice is equal length specified
    for the slice. When using make function, behind the scenes go allocates an array
    equal to the capacity. All the elements of the allocated array are initialized
    with default zero value of the type. Let’s see a program illustrating this point.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用make函数创建切片时，容量是一个可选参数。当省略容量时，切片的容量等于指定的长度。当使用make函数时，后台Go会分配一个等于容量的数组。所有分配的数组元素都初始化为该类型的默认零值。让我们看一个说明这一点的程序。
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Output**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**Using the new function**'
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**使用新函数**'
- en: '**new** is a builtin function provided by go that can also be used to create
    a slice. It is not a very popular way of creating a slice as **make** is much
    more flexible in terms of functionalities . It is not generally used and also
    using **new** function returns a pointer to nil slice. Let’s see an example. In
    below example we are using the dereferencing operator **‘*’** as **new** function
    returns a pointer to the nil slice.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**new**是Go提供的一个内置函数，也可以用来创建切片。这不是一种非常流行的创建切片的方法，因为**make**在功能上更灵活。它通常不被使用，使用**new**函数返回一个指向nil切片的指针。让我们看一个例子。在下面的例子中，我们使用解引用操作符**‘*’**，因为**new**函数返回一个指向nil切片的指针。'
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Output**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Length vs Capacity**'
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**长度与容量**'
- en: Before moving further, let’s emphasis on understanding the caveats of length
    and capacity. Let’s create a simple slice with capacity greater than length.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们强调理解长度和容量的注意事项。让我们创建一个容量大于长度的简单切片。
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Accessing the slice behind its length will result in a run time error “Index
    out of range”. It doesn’t matter if the accessed index is within the capacity.
    So the below line will cause the run time error.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问切片超出其长度会导致运行时错误“索引超出范围”。即使访问的索引在容量内也无关紧要。因此，下面的行将导致运行时错误。
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The length of the slice can be increased up to its capacity by re-slicing. So
    below re-slice will increase the length from 3 to 5.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切片的长度可以通过重新切片增加到其容量。因此，下面的重新切片将长度从3增加到5。
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The length of the slice can also be decreased using re-slicing. So below re-slice
    will decrease the length from 3 to 2
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切片的长度也可以通过重新切片来减少。所以下面的重新切片将长度从3减少到2。
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The advantage of having capacity is that array of size capacity can be pre-allocated
    during the initialization.  This is a performance boost as if more elements are
    needed to include in this array then space is already allocated for them.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有容量的好处是可以在初始化期间预先分配容量大小的数组。这是一个性能提升，因为如果需要在此数组中包含更多元素，则已经为它们分配了空间。
- en: Let’s see the program illustrating above points
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个说明上述要点的程序。
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Output**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE24]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**Accessing and Modifying Slice Elements**'
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**访问和修改切片元素**'
- en: A slice element can be accessed by specifying the index. Slice element can also
    be allotted a new value using the index. Also, note that any changes in the underlying
    array will reflect back in the slice as we have also seen above. Let’s see a small
    example of accessing and modifying
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过指定索引访问切片元素。切片元素也可以通过索引分配一个新值。此外，请注意，任何对基础数组的更改都会在切片中反映出来，正如我们上面看到的。让我们看一个小例子，展示访问和修改。
- en: '[PRE25]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**Output**'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '**Different ways of iterating a slice**'
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**不同的切片迭代方式**'
- en: 'An array can be iterated using:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可以通过以下方式迭代：
- en: Using for loop
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用for循环
- en: Using for-range loop
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用for-range循环
- en: Let’s see a code example for both
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个代码示例。
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '**Output**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE28]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '**Appending to a slice**'
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**向切片追加元素**'
- en: go **builtin** package provides an **append** function that can be used to append
    to a slice at the end. Below is the signature of this function
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Go的**builtin**包提供了一个**append**函数，可以在切片末尾追加元素。下面是这个函数的签名。
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The first argument is the slice itself. The second is the variable number of
    arguments which is
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是切片本身。第二个是可变数量的参数。
- en: '[PRE30]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**''...''** operator is the variadic syntax. So basically **...Type** means
    It means that the append function can accept variable number of arguments of type
    **Type**. Below is the way for using this function. In below code we are appending
    4 to a slice which has two elements. It appends at the end and returns the original
    slice. That is why we are collecting result again in **numbers** variable. It
    is also ok to assign the result to some other variable.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**''...''**运算符是可变语法。因此，基本上**...Type**意味着追加函数可以接受可变数量的类型为**Type**的参数。以下是使用该函数的方法。在下面的代码中，我们将4追加到一个有两个元素的切片中。它在末尾追加并返回原始切片。这就是为什么我们将结果再次收集到**numbers**变量中的原因。将结果分配给其他变量也是可以的。'
- en: '[PRE31]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: It is also ok to append many number of elements because the second argument
    is the variadic argument.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 追加多个元素也是可以的，因为第二个参数是可变参数。
- en: '[PRE32]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This function in the background increases the length and capacity of the slice.
    There are two cases
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数在后台会增加切片的长度和容量。有两种情况。
- en: When slice length is less than capacity.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当切片长度小于容量时。
- en: In this case, on using the append function,  the length of the slice will be
    increased  by one without any change in its capacity. Let's see a example
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，使用追加函数时，切片的长度将增加1，而容量保持不变。让我们看一个例子。
- en: '[PRE33]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**Output**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE34]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Capacity in all cases doesn't changes and it is 5 while length increases by
    1.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，容量都保持不变，都是5，而长度增加了1。
- en: When slice length is greater than capacity.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当切片长度大于容量时。
- en: In this case since there is no more capacity, so no new elements can be accommodated. 
    So in this case under the hood an array of double the capacity will be allocated.
    The current array pointed by the  slice will be copied to that new array. Now
    the slice will starting pointing to this new array. Hence the capacity will be
    doubled and length will be increased by 1\. Let's see a example
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，由于没有更多的容量，所以无法容纳新的元素。因此在底层将分配一个容量翻倍的数组。当前切片指向的数组将被复制到这个新数组。现在切片将开始指向这个新数组。因此容量将翻倍，长度将增加1。让我们看一个例子。
- en: '[PRE35]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '**Output**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE36]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Notice in above example that the capacity is doubled.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意上面的例子中，容量是翻倍的。
- en: It is also possible to append one slice to another slice. Below is the format
    for that.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以将一个切片追加到另一个切片。以下是该操作的格式。
- en: '[PRE37]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Notice **'...'** after the second slice. **'...'** is the operator which means
    that the argument is a variadic parameter. Meaning that during run time slice2 will
    be expanded to its individual elements which are passed as multiple arguments
    to the append function.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 注意第二个切片后的**'...'**。**'...'**是运算符，表示该参数是可变参数。这意味着在运行时，slice2将扩展为作为多个参数传递给追加函数的各个元素。
- en: '[PRE38]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '**Output**'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE39]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '**Copy a slice**'
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**复制切片**'
- en: go **builtin** package provides **copy** function that can be used to copy a
    slice. Below is the signature of this function. It takes in two slices **dst**
    and **src**, and copies data from **src** to **dst**. It returns the number of
    elements copied.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Go的**builtin**包提供了**copy**函数，可以用于复制切片。以下是该函数的签名。它接受两个切片**dst**和**src**，并将数据从**src**复制到**dst**。它返回复制的元素数量。
- en: '[PRE40]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'There are two cases to be considered while using the copy function:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 使用复制函数时需要考虑两种情况：
- en: If the length of **src** is greater than the length of dst, then the number
    of elements copied is the length of **dst**
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果**src**的长度大于**dst**的长度，则复制的元素数量为**dst**的长度。
- en: If the length of **dst** is greater than the length of src, then the number
    of elements copied is the length of **src**
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果**dst**的长度大于**src**的长度，则复制的元素数量为**src**的长度。
- en: Basically the number of elements copied is minimum of length of **(src, dst). **
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，复制的元素数量是**(src, dst)**长度的最小值。
- en: Also to note then once the copy is done then any change in **dst** will not
    reflect in **src** and vice versaLet's see an example of it.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 还需注意，一旦复制完成，对**dst**的任何更改将不会反映在**src**中，反之亦然。让我们看一个例子。
- en: '[PRE41]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '**Output**'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE42]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '**Nil Slice**'
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**Nil 切片**'
- en: The default zero value of a slice is nil. The length and capacity both of a
    nil slice is zero. Though it is possible to append to a nil slice as well. Let's
    see an example
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 切片的默认零值是nil。nil切片的长度和容量都是零。虽然将元素追加到nil切片也是可以的。让我们看一个例子。
- en: '[PRE43]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '**Output**'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE44]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '**Multidimensional Slices**'
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**多维切片**'
- en: As the multi-dimensional array is an array of arrays, similarly multi-dimensional
    slice is a slice of slices. To understand this, let's first look at the definition
    of a slice.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 由于多维数组是数组的数组，因此多维切片是切片的切片。为了理解这一点，让我们先看看切片的定义。
- en: '**Data** field in the slice header is a pointer to the underlying array. For
    a one dimensional slice, we have below declaration'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 切片头中的**数据**字段是指向基础数组的指针。 对于一维切片，我们有以下声明。
- en: '[PRE45]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: To declare a two dimensional slice the declaration would be
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 声明一个二维切片的声明应该是。
- en: '[PRE46]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Above declaration means that we want to create a **slice** of 2 slices. Carefully
    understand this point. But wait a second here, we haven't specified the second
    dimension here, meaning what is the length of each of the inner 2 slices. In case
    of slice, each of the inner slice has to be explicitly intialized like below
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 上述声明意味着我们想创建一个**切片**，包含2个切片。仔细理解这一点。但等一下，这里我们没有指定第二维，意味着每个内部2个切片的长度。在切片的情况下，每个内部切片必须像下面那样显式初始化。
- en: '[PRE47]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: So using range on the original slice, we specify the length each of 2 slices
    using make.  Below is one other way of doing the same but with slice elements
    specified
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过原始切片上的范围，我们使用make指定每个2个切片的长度。 下面是另一种方法，但指定了切片元素。
- en: '[PRE48]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Basically, with the above declaration, we create a slice of 2*3 dimensions which
    is a two-dimensional slice. The same idea can be extended to two-dimension, three-dimension,
    and so on.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，通过上述声明，我们创建了一个2*3维的切片，这是一个二维切片。相同的想法可以扩展到二维、三维等。
- en: A complete working example of above two points
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 上述两点的完整工作示例
- en: '[PRE49]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '**Output**'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE50]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: We mentioned above that we are creating a two-dimensional slice of 2*3 dimensions. 
    With that said the thought that might be coming to your mind is whether it is
    possible to have different lengths for inner slices. Yes, it is possible. Unlike
    arrays which have inner arrays of the same length, in case of slice since we initialize
    each of the inner slices individually, it is possible to have different length
    for inner slices
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上面提到我们正在创建一个2*3维的二维切片。 也就是说，您可能会想到的问题是，内部切片是否可以有不同的长度。 是的，这是可能的。 与内部数组具有相同长度的数组不同，在切片的情况下，由于我们单独初始化每个内部切片，因此可以拥有不同长度的内部切片。
- en: Let's see an example
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个示例。
- en: '[PRE51]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '**Output**'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE52]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Let's see a small example of a three-dimensional slice as well. In the below
    program, we are creating a slice of 2*2*3 dimensions.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个三维切片的小例子。在下面的程序中，我们正在创建一个2*2*3维的切片。
- en: '[PRE53]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '**Output**'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE54]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '**Conclusion**'
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结论**'
- en: This is all about slice in golang. Hope you have liked this article. Please
    share feedback/improvements/mistakes in comments
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是golang中的切片。希望您喜欢这篇文章。请在评论中分享反馈/改进/错误。
- en: '**Next Tutorial** – [Maps](https://golangbyexample.com/maps-in-golang)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**下一个教程** – [映射](https://golangbyexample.com/maps-in-golang)'
- en: '**Previous Tutorial** – [Array](https://golangbyexample.com/understanding-array-golang-complete-guid)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**前一个教程** – [数组](https://golangbyexample.com/understanding-array-golang-complete-guid)'
- en: '[complete guide](https://golangbyexample.com/tag/complete-guide/)*   [go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*   [slice](https://golangbyexample.com/tag/slice/)*'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[完整指南](https://golangbyexample.com/tag/complete-guide/) *   [go](https://golangbyexample.com/tag/go/)
    *   [golang](https://golangbyexample.com/tag/golang/) *   [切片](https://golangbyexample.com/tag/slice/)
    *'
