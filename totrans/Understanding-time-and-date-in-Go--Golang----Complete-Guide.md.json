["```\ntype Time struct {\n    // wall and ext encode the wall time seconds, wall time nanoseconds,\n    // and optional monotonic clock reading in nanoseconds.\n    wall uint64\n    ext  int64\n    //Location to represent timeZone\n    // The nil location means UTC\n    loc *Location\n}\n```", "```\nfunc Now() Time\n```", "```\nfunc Date(year int, month Month, day, hour, min, sec, nsec int, loc *Location) Time\n```", "```\n1 *60*60*1000*1000*1000\n```", "```\ntype Duration int64\n```", "```\nconst (\n    Nanosecond  Duration = 1\n    Microsecond          = 1000 * Nanosecond\n    Millisecond          = 1000 * Microsecond\n    Second               = 1000 * Millisecond\n    Minute               = 60 * Second\n    Hour                 = 60 * Minute\n)\n```", "```\nfunc (t Time) Add(d Duration) Time\n```", "```\nfunc (t Time) AddDate(years int, months int, days int) Time\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    t := time.Now()\n\n    //Add 1 hours\n    newT := t.Add(time.Hour * 1)\n    fmt.Printf(\"Adding 1 hour\\n: %s\\n\", newT)\n\n    //Add 15 min\n    newT = t.Add(time.Minute * 15)\n    fmt.Printf(\"Adding 15 minute\\n: %s\\n\", newT)\n\n    //Add 10 sec\n    newT = t.Add(time.Second * 10)\n    fmt.Printf(\"Adding 10 sec\\n: %s\\n\", newT)\n\n    //Add 100 millisecond\n    newT = t.Add(time.Millisecond * 10)\n    fmt.Printf(\"Adding 100 millisecond\\n: %s\\n\", newT)\n\n    //Add 1000 microsecond\n    newT = t.Add(time.Millisecond * 10)\n    fmt.Printf(\"Adding 1000 microsecond\\n: %s\\n\", newT)\n\n    //Add 10000 nanosecond\n    newT = t.Add(time.Nanosecond * 10000)\n    fmt.Printf(\"Adding 1000 nanosecond\\n: %s\\n\", newT)\n\n    //Add 1 year 2 month 4 day\n    newT = t.AddDate(1, 2, 4)\n    fmt.Printf(\"Adding 1 year 2 month 4 day\\n: %s\\n\", newT)\n}\n```", "```\nAdding 1 hour:\n 2020-02-01 02:16:35.893847 +0530 IST m=+3600.000239893\n\nAdding 15 minute:\n 2020-02-01 01:31:35.893847 +0530 IST m=+900.000239893\n\nAdding 10 sec:\n 2020-02-01 01:16:45.893847 +0530 IST m=+10.000239893\n\nAdding 100 millisecond:\n 2020-02-01 01:16:35.903847 +0530 IST m=+0.010239893\n\nAdding 1000 microsecond:\n 2020-02-01 01:16:35.903847 +0530 IST m=+0.010239893\n\nAdding 1000 nanosecond:\n 2020-02-01 01:16:35.893857 +0530 IST m=+0.000249893\n\nAdding 1 year 2 month 4 day:\n 2021-04-05 01:16:35.893847 +0530 IST\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    t := time.Now()\n\n    //Add 1 hours\n    newT := t.Add(-time.Hour * 1)\n    fmt.Printf(\"Subtracting 1 hour:\\n %s\\n\", newT)\n\n    //Add 15 min\n    newT = t.Add(-time.Minute * 15)\n    fmt.Printf(\"Subtracting 15 minute:\\n %s\\n\", newT)\n\n    //Add 10 sec\n    newT = t.Add(-time.Second * 10)\n    fmt.Printf(\"Subtracting 10 sec:\\n %s\\n\", newT)\n\n    //Add 100 millisecond\n    newT = t.Add(-time.Millisecond * 10)\n    fmt.Printf(\"Subtracting 100 millisecond:\\n %s\\n\", newT)\n\n    //Add 1000 microsecond\n    newT = t.Add(-time.Millisecond * 10)\n    fmt.Printf(\"Subtracting 1000 microsecond:\\n %s\\n\", newT)\n\n    //Add 10000 nanosecond\n    newT = t.Add(-time.Nanosecond * 10000)\n    fmt.Printf(\"Subtracting 1000 nanosecond:\\n %s\\n\", newT)\n\n    //Add 1 year 2 month 4 day\n    newT = t.AddDate(-1, -2, -4)\n    fmt.Printf(\"Subtracting 1 year 2 month 4 day:\\n %s\\n\", newT)\n}\n```", "```\nSubtracting 1 hour:\n 2020-02-01 00:18:29.772673 +0530 IST m=-3599.999784391\n\nSubtracting 15 minute:\n 2020-02-01 01:03:29.772673 +0530 IST m=-899.999784391\n\nSubtracting 10 sec:\n 2020-02-01 01:18:19.772673 +0530 IST m=-9.999784391\n\nSubtracting 100 millisecond:\n 2020-02-01 01:18:29.762673 +0530 IST m=-0.009784391\n\nSubtracting 1000 microsecond:\n 2020-02-01 01:18:29.762673 +0530 IST m=-0.009784391\n\nSubtracting 1000 nanosecond:\n 2020-02-01 01:18:29.772663 +0530 IST m=+0.000205609\n\nSubtracting 1 year 2 month 4 day:\n 2018-11-27 01:18:29.772673 +0530 IST\n```", "```\nMon Jan 2 15:04:05 MST 2006  (MST is GMT-0700)\nor \n01/02 03:04:05PM '06 -0700\n```", "```\nfunc Parse(layout, value string) (Time, error)\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    //Parse YYYY-MM-DD\n    timeT, _ := time.Parse(\"2006-01-02\", \"2020-01-29\")\n    fmt.Println(timeT)\n\n    //Parse YY-MM-DD\n    timeT, _ = time.Parse(\"06-01-02\", \"20-01-29\")\n    fmt.Println(timeT)\n\n    //Parse YYYY-#{MonthName}-DD\n    timeT, _ = time.Parse(\"2006-Jan-02\", \"2020-Jan-29\")\n    fmt.Println(timeT)\n\n    //Parse YYYY-#{MonthName}-DD WeekDay HH:MM:SS\n    timeT, _ = time.Parse(\"2006-Jan-02 Monday 03:04:05\", \"2020-Jan-29 Wednesday 12:19:25\")\n    fmt.Println(timeT)\n\n    //Parse YYYY-#{MonthName}-DD WeekDay HH:MM:SS PM Timezone TimezoneOffset\n    timeT, _ = time.Parse(\"2006-Jan-02 Monday 03:04:05 PM MST -07:00\", \"2020-Jan-29 Wednesday 12:19:25 AM IST +05:30\")\n    fmt.Println(timeT)\n}\n```", "```\n2020-01-29 00:00:00 +0000 UTC\n2020-01-29 00:00:00 +0000 UTC\n2020-01-29 00:00:00 +0000 UTC\n2020-01-29 12:19:25 +0000 UTC\n2020-01-29 00:19:25 +0530 IST\n```", "```\nfunc (t Time) Format(layout string)\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    now := time.Now()\n\n    //Format YYYY-MM-DD\n    fmt.Printf(\"YYYY-MM-DD: %s\\n\", now.Format(\"2006-01-02\"))\n\n    //Format YY-MM-DD\n    fmt.Printf(\"YY-MM-DD: %s\\n\", now.Format(\"06-01-02\"))\n\n    //Format YYYY-#{MonthName}-DD\n    fmt.Printf(\"YYYY-#{MonthName}-DD: %s\\n\", now.Format(\"2006-Jan-02\"))\n\n    //Format HH:MM:SS\n    fmt.Printf(\"HH:MM:SS: %s\\n\", now.Format(\"03:04:05\"))\n\n    //Format HH:MM:SS Millisecond\n    fmt.Printf(\"HH:MM:SS Millisecond: %s\\n\", now.Format(\"03:04:05 .999\"))\n\n    //Format YYYY-#{MonthName}-DD WeekDay HH:MM:SS\n    fmt.Printf(\"YYYY-#{MonthName}-DD WeekDay HH:MM:SS: %s\\n\", now.Format(\"2006-Jan-02 Monday 03:04:05\"))\n\n    //Format YYYY-#{MonthName}-DD WeekDay HH:MM:SS PM Timezone TimezoneOffset\n    fmt.Printf(\"YYYY-#{MonthName}-DD WeekDay HH:MM:SS PM Timezone TimezoneOffset: %s\\n\", now.Format(\"2006-Jan-02 Monday 03:04:05 PM MST -07:00\"))\n}\n```", "```\nYYYY-MM-DD: 2020-01-25\nYY-MM-DD: 20-01-25\nYYYY-#{MonthName}-DD: 2020-Jan-25\nHH:MM:SS: 11:14:16\nHH:MM:SS Millisecond: 11:14:16 .213\nYYYY-#{MonthName}-DD WeekDay HH:MM:SS: 2020-Jan-25 Saturday 11:14:16\nYYYY-#{MonthName}-DD WeekDay HH:MM:SS PM Timezone TimezoneOffset: 2020-Jan-25 Saturday 11:14:16 PM IST +05:30\n```", "```\nfunc (t Time) Sub(u Time) Duration\n```", "```\ncurrentTime := time.Now()\noldTime := time.Date(2020, 1, 2, 0, 0, 0, 0, time.UTC)\ndiff := currentTime.Sub(oldTime)\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    tNow := time.Now()\n\n    //time.Time to Unix Timestamp\n    tUnix := tNow.Unix()\n    fmt.Printf(\"timeUnix %d\\n\", tUnix)\n\n    //Unix Timestamp to time.Time\n    timeT := time.Unix(tUnix, 0)\n    fmt.Printf(\"time.Time: %s\\n\", timeT)\n}\n```", "```\ntimeUnix 1257894000\ntime.Time: 2009-11-10 23:00:00 +0000 UTC\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    now := time.Now()\n\n    loc, _ := time.LoadLocation(\"UTC\")\n    fmt.Printf(\"UTC Time: %s\\n\", now.In(loc))\n\n    loc, _ = time.LoadLocation(\"Europe/Berlin\")\n    fmt.Printf(\"Berlin Time: %s\\n\", now.In(loc))\n\n    loc, _ = time.LoadLocation(\"America/New_York\")\n    fmt.Printf(\"New York Time: %s\\n\", now.In(loc))\n\n    loc, _ = time.LoadLocation(\"Asia/Dubai\")\n    fmt.Printf(\"Dubai Time: %s\\n\", now.In(loc))\n}\n```", "```\nUTC Time: 2020-01-31 18:09:41.705858 +0000 UTC\nBerlin Time: 2020-01-31 19:09:41.705858 +0100 CET\nNew York Time: 2020-01-31 13:09:41.705858 -0500 EST\nDubai Time: 2020-01-31 22:09:41.705858 +0400 +04\n```"]