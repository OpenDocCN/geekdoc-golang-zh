- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:46:18'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:46:18
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Divide two integers without using multiplication or division operator in Go
    (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Go (Golang) 中不使用乘法或除法运算符来除以两个整数。
- en: 来源：[https://golangbyexample.com/divide-two-int-golang/](https://golangbyexample.com/divide-two-int-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/divide-two-int-golang/](https://golangbyexample.com/divide-two-int-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "概述")'
- en: '[Program](#Program "Program")*  *## **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *## **概述**'
- en: Two numbers are given. The objective is to divide those numbers and return the
    quotient. Ignore the remainder in the solution. But division needs to be done
    without using the multiplication or division operator.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 给定两个数字。目标是将这两个数字相除并返回商。在解决方案中忽略余数。但需要在不使用乘法或除法运算符的情况下进行除法。
- en: The first number is the dividend
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个数字是被除数。
- en: The second number is the divisor
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个数字是除数。
- en: For example
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 例如
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here is the idea of how to do it. The first thing to notice is that
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是如何实现它的思路。首先要注意的是
- en: If dividend and divisor are either both positive or both negative then the quotient
    is positive
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果被除数和除数都是正数或都是负数，则商为正。
- en: If either one of dividend and divisor is negative then the quotient is negative
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果被除数和除数其中一个为负，则商为负。
- en: So there is an XOR relation between signs of dividend and divisor. We can follow
    the below steps to write the program
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以被除数和除数的符号之间存在异或关系。我们可以遵循以下步骤来编写程序。
- en: First, determine the sign of the quotient as per the XOR logic above.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，根据上述异或逻辑确定商的符号。
- en: Then make both dividend and divisor positive.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后将被除数和除数都变为正数。
- en: Now increase the divisor by itself until it is less than or equal to the dividend.
    Also, keep a counter for each increment
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，持续增加除数，直到它小于或等于被除数。同时，保持每次递增的计数器。
- en: counter*sign will be the answer
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计数器*符号将是答案。
- en: '**Program**'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Here is the program for the same.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是相同程序的代码。
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Output**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 查看我们的 Golang 高级教程。本系列的教程详尽，我们试图用例子覆盖所有概念。本教程适合那些希望获得高水平理解和扎实知识的学习者
    - [Golang 高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you -[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解如何在 Golang 中实现所有设计模式。如果是的话，这篇文章适合你 - [所有设计模式 Golang](https://golangbyexample.com/all-design-patterns-golang/)
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
