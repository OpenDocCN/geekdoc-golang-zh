- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:22:11'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:22:11
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Interface Comparison in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go (Golang) 中的接口比较
- en: 来源：[https://golangbyexample.com/interface-comparison-golang/](https://golangbyexample.com/interface-comparison-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/interface-comparison-golang/](https://golangbyexample.com/interface-comparison-golang/)
- en: For understanding whether two interface variables are equal or not, we first
    need to understand the internal representation of an interface. Like any other
    variable, an interface variable is represented by a type and value. Interface
    variable value, in turn under the hood, consists of two tuple
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解两个接口变量是否相等，我们首先需要了解接口的内部表示。像其他变量一样，接口变量由类型和值表示。接口变量的值，实际上包含两个元组
- en: Underlying Type
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本类型
- en: Underlying Value
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本值
- en: See below diagram which illustrates what we mentioned above
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见下面的图示，说明我们上面提到的内容
- en: '![](img/e09464771d53171817cfeecf9da6a93e.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e09464771d53171817cfeecf9da6a93e.png)'
- en: Two interface are comparable if either
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 两个接口可比较，如果任一
- en: Interface value is nil or
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口值为 nil 或
- en: The underlying type is the same and comparable. Underlying Value is also the
    same
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本类型相同且可比较。基本值也是相同的
- en: Some of the comparable types as defined by go specification are
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Go 规范，一些可比较的类型包括
- en: boolean
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔型
- en: numeric
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数值型
- en: string,
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串，
- en: pointer
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指针
- en: channel
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通道
- en: interface types
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口类型
- en: structs – if all it’s field type is comparable
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构体 – 如果它的所有字段类型都是可比较的
- en: array – if the type of value of array element is comparable
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组 – 如果数组元素的值类型是可比较的
- en: Some of the types which are not comparable as per go specification
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Go 规范，一些不可比较的类型
- en: Slice
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切片
- en: Map
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射
- en: Function
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数
- en: Two interface variable can be compared using **==** or **!=** operators
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 两个接口变量可以使用**==**或**!=**运算符进行比较
- en: Let’s see a program
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个程序
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above program, we have animal interface and we have a lion struct that
    implements the animal interface by defining two of its methods.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们有动物接口，**lion**结构体通过定义其两个方法来实现动物接口。
- en: Interface variable **a** and **b** are equal because
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接口变量**a**和**b**相等，因为
- en: Underlying type is same i.e  **lion** struct
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本类型相同，即**lion**结构体
- en: Underlying type is comparable i.e **lion** struct has only one field of **int**
    type and **int** type is comparable
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本类型是可比较的，即**lion**结构体只有一个**int**类型的字段，而**int**类型是可比较的
- en: Underlying value is same i.e **lion.age** is 10 for both
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本值相同，即**lion.age**对于两者都是 10
- en: First two points also apply for comparing a and c, but they are not equal because
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 前两点同样适用于比较 a 和 c，但它们不相等，因为
- en: Underlying value is not same i.e **lion.age** is 10 for **a** while it is 5
    for **c**
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本值不相同，即**lion.age**对于**a**是 10，而对于**c**是 5
- en: '**Interface variable d and e are equal because**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**接口变量 d 和 e 相等，因为**'
- en: '***   Interface value is nil for both'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '***   接口值对两者都是 nil'
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)**'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)**'
