["```\nn=3\nedges=[{0,1}]\n```", "```\n[{0,2}, {1,2}]\n```", "```\nn=9\nedges=[{0,1},{0,4},{0,5},{2,3},{2,6},{7,8}]\n```", "```\n[{0,2}, {0,3}, {0,6}, {0,7}, {0,8},\n{1,2}, {1,3}, {1,6}, {1,7}, {1,8},\n{4,2}, {4,3}, {4,6}, {4,7}, {4,8},\n{5,2}, {5,3}, {5,6}, {5,7}, {5,8},\n{7,2}, {7,3}, {7,6},\n{8,2}, {8,3}, {8,6}]\n```", "```\n4\n3\n2\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc countPairs(n int, edges [][]int) int64 {\n\tnodeMap := make(map[int][]int)\n\n\tfor i := 0; i < len(edges); i++ {\n\t\tnodeMap[edges[i][0]] = append(nodeMap[edges[i][0]], edges[i][1])\n\t\tnodeMap[edges[i][1]] = append(nodeMap[edges[i][1]], edges[i][0])\n\t}\n\n\tvisited := make(map[int]bool)\n\n\tvar output int64\n\tvar totalNodesVisited int64\n\tfor i := 0; i < n; i++ {\n\t\tif !visited[i] {\n\t\t\tnodeVisited := visit(i, nodeMap, &visited)\n\t\t\tif totalNodesVisited != 0 {\n\t\t\t\toutput += totalNodesVisited * nodeVisited\n\t\t\t}\n\t\t\ttotalNodesVisited += nodeVisited\n\t\t}\n\t}\n\treturn output\n}\n\nfunc visit(source_node int, nodeMap map[int][]int, visited *map[int]bool) int64 {\n\t(*visited)[source_node] = true\n\n\tvar totalNodeVisited int64\n\ttotalNodeVisited = 1\n\tneighbours, ok := nodeMap[source_node]\n\tif ok {\n\t\tfor _, neighbour := range neighbours {\n\t\t\tif !(*visited)[neighbour] {\n\t\t\t\tnodeVisited := visit(neighbour, nodeMap, visited)\n\t\t\t\ttotalNodeVisited += nodeVisited\n\t\t\t}\n\t\t}\n\t}\n\n\treturn totalNodeVisited\n}\n\nfunc main() {\n\n\tn := 3\n\tedges := [][]int{{0, 1}}\n\toutput := countPairs(n, edges)\n\tfmt.Println(output)\n\n\tn = 9\n\tedges = [][]int{{0, 1}, {0, 4}, {0, 5}, {2, 3}, {2, 6}, {7, 8}}\n\toutput = countPairs(n, edges)\n\tfmt.Println(output)\n}\n```", "```\n2\n26\n```"]