- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:40:52'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: JSON parse a file in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/json-parse-file-golang/](https://golangbyexample.com/json-parse-file-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[JSON parse a file into a struct](#JSON_parse_a_file_into_a_struct "JSON parse
    a file into a struct")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[JSON parse a file into a map](#JSON_parse_a_file_into_a_map "JSON parse a
    file into a map")*  *# **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**encoding/json** package provides an **Unmarshal** method that can be used
    to convert the file bytes into struct or map in golang.'
  prefs: []
  type: TYPE_NORMAL
- en: '**json.Unmarshal** function can be used to convert from JSON to a struct or
    app. Below is the signature of the method'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Let’s see examples of
  prefs: []
  type: TYPE_NORMAL
- en: JSON parse a file into a struct
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON parse a file into a map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSON parse a file into a struct**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a file **employee.json** with below contents
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Below is the code
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the above code, we created an employee struct.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The employee struct has some json meta tags which are used for converting json
    to a struct. See this link for more details – [https://golangbyexample.com/struct-field-meta-or-tags/](https://golangbyexample.com/struct-field-meta-or-tags/)
  prefs: []
  type: TYPE_NORMAL
- en: This is how we unmarshalled the file bytes into the employee instance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**JSON parse a file into a map**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A very important point to note though is that map allows integer values for
    keys while JSON doesn’t allow integer values for keys. JSON only allows string
    values for keys. So a map having an integer value for the key when converted to
    JSON will have a string value for the key.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say we have below json
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Below is the program that will read from the above and then convert the above
    json to map
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
