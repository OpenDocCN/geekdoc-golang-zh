- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:03:53'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Mediator Design Pattern in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/mediator-design-pattern-golang/](https://golangbyexample.com/mediator-design-pattern-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Note: Interested in understanding how all other design patterns can be implemented
    in GO. Please see this full reference – [All Design Patterns in Go (Golang)](https://golangbyexample.com/all-design-patterns-golang/)'
  prefs: []
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Introduction:](#Introduction "Introduction:")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Practical Example](#Practical_Example "Practical Example")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Full Working Code:](#Full_Working_Code "Full Working Code:")*  *## **Introduction:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mediator design pattern is a behavioral design pattern. This pattern suggests
    creating a mediator object to prevent direct communication among objects so that
    direct dependencies between them is avoided.
  prefs: []
  type: TYPE_NORMAL
- en: One very good example of a mediator patter is the railway system platform. 
    Two trains never communicate between themselves for the availability of the platform.
    The **stationManager** acts as a mediator and makes the platform available to
    only one of the trains. The train connects with **stationManager** and acts accordingly.
    It maintains a queue of waiting trains. In case of any train leaving a platform,
    it notifies one of the train to arrive on the platform next.
  prefs: []
  type: TYPE_NORMAL
- en: Notice how **stationManger** acts as a mediator between the **trains** and the
    **platform** in the code below.
  prefs: []
  type: TYPE_NORMAL
- en: passengerTrain and goodsTrain implement the train interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stationManger implements the mediator interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Practical Example**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**train.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**passengerTrain.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**goodsTrain.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**mediator.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**stationManager.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**main.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Full Working Code:**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[design pattern](https://golangbyexample.com/tag/design-pattern/)*   [go](https://golangbyexample.com/tag/go/)*   [mediator](https://golangbyexample.com/tag/mediator/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
