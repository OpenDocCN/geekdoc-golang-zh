["```\nselect {\ncase channel_send_or_receive:\n     //Dosomething\ncase channel_send_or_receive:\n     //Dosomething\ndefault:\n     //Dosomething\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    ch1 := make(chan string)\n    ch2 := make(chan string)\n\n    go goOne(ch1)\n    go goTwo(ch2)\n\n    select {\n    case msg1 := <-ch1:\n        fmt.Println(msg1)\n    case msg2 := <-ch2:\n        fmt.Println(msg2)\n    }\n}\n\nfunc goOne(ch chan string) {\n    ch <- \"From goOne goroutine\"\n}\n\nfunc goTwo(ch chan string) {\n    ch <- \"From goTwo goroutine\"\n}\n```", "```\nFrom goOne goroutine\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    ch1 := make(chan string)\n    ch2 := make(chan string)\n\n    go goOne(ch1)\n    go goTwo(ch2)\n\n    select {\n    case msg1 := <-ch1:\n        fmt.Println(msg1)\n    case msg2 := <-ch2:\n        fmt.Println(msg2)\n    }\n}\n\nfunc goOne(ch chan string) {\n    ch <- \"From goOne goroutine\"\n}\n\nfunc goTwo(ch chan string) {\n    time.Sleep(time.Second * 1)\n    ch <- \"From goTwo goroutine\"\n}\n```", "```\nFrom goOne goroutine\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    ch1 := make(chan string)\n    ch2 := make(chan string)\n    go goOne(ch1)\n    go goTwo(ch2)\n    for i := 0; i < 2; i++ {\n        select {\n        case msg1 := <-ch1:\n            fmt.Println(msg1)\n        case msg2 := <-ch2:\n            fmt.Println(msg2)\n        }\n    }\n}\n\nfunc goOne(ch chan string) {\n    ch <- \"From goOne goroutine\"\n}\n\nfunc goTwo(ch chan string) {\n    ch <- \"From goTwo goroutine\"\n}\n```", "```\nFrom goOne goroutine\nFrom goTwo goroutine\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    ch1 := make(chan string)\n    select {\n    case msg := <-ch1:\n        fmt.Println(msg)\n    }\n}\n```", "```\nfatal error: all goroutines are asleep - deadlock!\n```", "```\nfatal error: all goroutines are asleep - deadlock!\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    ch1 := make(chan string)\n    ch2 := make(chan string)\n    go goOne(ch1)\n    go goTwo(ch2)\n    select {\n\n    case msg1 := <-ch1:\n        fmt.Println(msg1)\n    case ch2 <- \"To goTwo goroutine\":\n    }\n}\n\nfunc goOne(ch chan string) {\n    ch <- \"From goOne goroutine\"\n}\n\nfunc goTwo(ch chan string) {\n    msg := <-ch\n    fmt.Println(msg)\n}\n```", "```\nTo goTwo goroutine\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    ch1 := make(chan string)\n    select {\n    case msg := <-ch1:\n        fmt.Println(msg)\n    default:\n        fmt.Println(\"Default statement executed\")\n    }\n}\n```", "```\nDefault statement executed\n```", "```\nfunc After(d Duration) <-chan Time\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tch1 := make(chan string)\n\tgo goOne(ch1)\n\n\tselect {\n\tcase msg := <-ch1:\n\t\tfmt.Println(msg)\n\tcase <-time.After(time.Second * 1):\n\t\tfmt.Println(\"Timeout\")\n\t}\n}\n\nfunc goOne(ch chan string) {\n\ttime.Sleep(time.Second * 2)\n\tch <- \"From goOne goroutine\"\n}\n```", "```\nTimeout\n```", "```\nTimeout\n```", "```\npackage main\n\nfunc main() {\n    select {}\n}\n```", "```\nfatal error: all goroutines are asleep - deadlock!\n```", "```\nfatal error: all goroutines are asleep - deadlock!\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tnews := make(chan string)\n\tgo newsFeed(news)\n\n\tprintAllNews(news)\n}\n\nfunc printAllNews(news chan string) {\n\tfor {\n\t\tselect {\n\t\tcase n := <-news:\n\t\t\tfmt.Println(n)\n\t\tcase <-time.After(time.Second * 1):\n\t\t\tfmt.Println(\"Timeout: News feed finished\")\n\t\t\treturn\n\t\t}\n\t}\n}\n\nfunc newsFeed(ch chan string) {\n\tfor i := 0; i < 2; i++ {\n\t\ttime.Sleep(time.Millisecond * 400)\n\t\tch <- fmt.Sprintf(\"News: %d\", i+1)\n\t}\n}\n```", "```\nNews: 1\nNews: 2\nTimeout: News feed finished\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    news := make(chan string)\n    go newsFeed(news)\n    printAllNews(news)\n}\n\nfunc printAllNews(news chan string) {\n    for {\n        select {\n        case n := <-news:\n            fmt.Println(n)\n            news = nil\n        case <-time.After(time.Second * 1):\n            fmt.Println(\"Timeout: News feed finished\")\n            return\n        }\n    }\n}\n\nfunc newsFeed(ch chan string) {\n    for i := 0; i < 2; i++ {\n        time.Sleep(time.Millisecond * 400)\n        ch <- fmt.Sprintf(\"News: %d\", i+1)\n    }\n}\n```", "```\nNews: 1\nTimeout: News feed finished\n```", "```\ncase n := <-news:\n   fmt.Println(n)\n   news = nil\n```", "```\nimport \"fmt\"\n\nfunc main() {\n\tch := make(chan string, 1)\n\tch <- \"Before break\"\n\n\tselect {\n\tcase msg := <-ch:\n\t\tfmt.Println(msg)\n\t\tbreak\n\t\tfmt.Println(\"After break\")\n\tdefault:\n\t\tfmt.Println(\"Default case\")\n\t}\n}\n```", "```\nBefore break\n```", "```\nfmt.Println(\"After break\")\n```"]