["```\npackage main\n\ntype subject interface {\n    register(Observer observer)\n    deregister(Observer observer)\n    notifyAll()\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype item struct {\n    observerList []observer\n    name         string\n    inStock      bool\n}\n\nfunc newItem(name string) *item {\n    return &item{\n        name: name,\n    }\n}\n\nfunc (i *item) updateAvailability() {\n    fmt.Printf(\"Item %s is now in stock\\n\", i.name)\n    i.inStock = true\n    i.notifyAll()\n}\n\nfunc (i *item) register(o observer) {\n    i.observerList = append(i.observerList, o)\n}\n\nfunc (i *item) deregister(o observer) {\n    i.observerList = removeFromslice(i.observerList, o)\n}\n\nfunc (i *item) notifyAll() {\n    for _, observer := range i.observerList {\n        observer.update(i.name)\n    }\n}\n\nfunc removeFromslice(observerList []observer, observerToRemove observer) []observer {\n    observerListLength := len(observerList)\n    for i, observer := range observerList {\n        if observerToRemove.getID() == observer.getID() {\n            observerList[observerListLength-1], observerList[i] = observerList[i], observerList[observerListLength-1]\n            return observerList[:observerListLength-1]\n        }\n    }\n    return observerList\n}\n```", "```\npackage main\n\ntype observer interface {\n    update(string)\n    getID() string\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype customer struct {\n    id string\n}\n\nfunc (c *customer) update(itemName string) {\n    fmt.Printf(\"Sending email to customer %s for item %s\\n\", c.id, itemName)\n}\n\nfunc (c *customer) getID() string {\n    return c.id\n}\n```", "```\npackage main\n\nfunc main() {\n    shirtItem := newItem(\"Nike Shirt\")\n    observerFirst := &customer{id: \"abc@gmail.com\"}\n    observerSecond := &customer{id: \"xyz@gmail.com\"}\n    shirtItem.register(observerFirst)\n    shirtItem.register(observerSecond)\n    shirtItem.updateAvailability()\n}\n```", "```\nItem Nike Shirt is now in stock\nSending email to customer abc@gmail.com for item Nike Shirt\nSending email to customer xyz@gmail.com for item Nike Shirt\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype subject interface {\n    register(Observer observer)\n    deregister(Observer observer)\n    notifyAll()\n}\n\ntype item struct {\n    observerList []observer\n    name         string\n    inStock      bool\n}\n\nfunc newItem(name string) *item {\n    return &item{\n        name: name,\n    }\n}\n\nfunc (i *item) updateAvailability() {\n    fmt.Printf(\"Item %s is now in stock\\n\", i.name)\n    i.inStock = true\n    i.notifyAll()\n}\n\nfunc (i *item) register(o observer) {\n    i.observerList = append(i.observerList, o)\n}\n\nfunc (i *item) deregister(o observer) {\n    i.observerList = removeFromslice(i.observerList, o)\n}\n\nfunc (i *item) notifyAll() {\n    for _, observer := range i.observerList {\n        observer.update(i.name)\n    }\n}\n\nfunc removeFromslice(observerList []observer, observerToRemove observer) []observer {\n    observerListLength := len(observerList)\n    for i, observer := range observerList {\n        if observerToRemove.getID() == observer.getID() {\n            observerList[observerListLength-1], observerList[i] = observerList[i], observerList[observerListLength-1]\n            return observerList[:observerListLength-1]\n        }\n    }\n    return observerList\n}\n\ntype observer interface {\n    update(string)\n    getID() string\n}\n\ntype customer struct {\n    id string\n}\n\nfunc (c *customer) update(itemName string) {\n    fmt.Printf(\"Sending email to customer %s for item %s\\n\", c.id, itemName)\n}\n\nfunc (c *customer) getID() string {\n    return c.id\n}\n\nfunc main() {\n    shirtItem := newItem(\"Nike Shirt\")\n    observerFirst := &customer{id: \"abc@gmail.com\"}\n    observerSecond := &customer{id: \"xyz@gmail.com\"}\n    shirtItem.register(observerFirst)\n    shirtItem.register(observerSecond)\n    shirtItem.updateAvailability()\n}\n```", "```\nItem Nike Shirt is now in stock\nSending email to customer abc@gmail.com for item Nike Shirt\nSending email to customer xyz@gmail.com for item Nike Shirt\n```"]