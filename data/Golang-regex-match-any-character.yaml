- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:41:02'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:41:02
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Golang regex match any character
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Golang 正则匹配任何字符
- en: 来源：[https://golangbyexample.com/golang-regex-match-any-character/](https://golangbyexample.com/golang-regex-match-any-character/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/golang-regex-match-any-character/](https://golangbyexample.com/golang-regex-match-any-character/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *# **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *# **概述**'
- en: Dot ‘.’ character is one of the most commonly used metacharacters in the regular
    expression. It is used to match any character. By default, it doesn’t match a
    new line.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 点 ‘.’ 字符是正则表达式中最常用的元字符之一。它用于匹配任何字符。默认情况下，它不匹配新行。
- en: '**Program**'
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Now let’s see a simple program for Dot ‘.’ character
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看一个简单的点 ‘.’ 字符程序
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above program, we have a simple regex containing only one dot character.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们有一个简单的正则表达式，仅包含一个点字符。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It matches below characters and string.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 它匹配下面的字符和字符串。
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It matches **ab** because by default the regex doesn’t do the match the full
    string unless we use the anchor characters (Caret and Dollar character). That
    is why it matches the first character ‘a’ in ‘ab’ and reports a match.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它匹配 **ab**，因为默认情况下正则表达式不会匹配完整字符串，除非我们使用锚字符（插入符号和美元字符）。这就是它匹配字符串 ‘ab’ 中第一个字符
    ‘a’ 并报告匹配的原因。
- en: It doesn’t match an empty string.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 它不匹配空字符串。
- en: Let’s see another example where we have two dots in the regex.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看另一个例子，其中正则表达式中有两个点。
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Output**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the above program, we have a simple regex containing two dots.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们有一个简单的正则表达式，包含两个点。
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It will match any given string which has at least two characters as a substring.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 它将匹配任何包含至少两个字符作为子字符串的给定字符串。
- en: That is why it gives a match for
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么它给出匹配的原因
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: and doesn’t give a match for
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 并且不匹配
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The dot **‘.’** as we mentioned before as well doesn’t match the new line.
    But the default behavior can be changed by adding a set of flags to the beginning
    of the regular expression. The flag we need to add to the beginning of regex is:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 点 **‘.’** 如前所述，不匹配新行。但默认行为可以通过在正则表达式开头添加一组标志来更改。我们需要添加到正则表达式开头的标志是：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let’s see a program for the same
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看相同的程序
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Output**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: and
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: '[PRE13]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the second regex, we have added the additional flag. That is why it gives
    a match for a new line while the first regex without a flag doesn’t give a match.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个正则表达式中，我们添加了额外的标志。这就是为什么它在新行上给出匹配，而第一个没有标志的正则表达式不匹配的原因。
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
