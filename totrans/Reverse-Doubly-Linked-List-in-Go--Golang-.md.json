["```\npackage main\nimport \"fmt\"\ntype node struct {\n    data string\n    prev *node\n    next *node\n}\ntype doublyLinkedList struct {\n    len  int\n    tail *node\n    head *node\n}\nfunc initDoublyList() *doublyLinkedList {\n    return &doublyLinkedList{}\n}\nfunc (d *doublyLinkedList) AddFrontNodeDLL(data string) {\n    newNode := &node{\n        data: data,\n    }\n    if d.head == nil {\n        d.head = newNode\n        d.tail = newNode\n    } else {\n        newNode.next = d.head\n        d.head.prev = newNode\n        d.head = newNode\n    }\n    d.len++\n}\nfunc (d *doublyLinkedList) AddEndNodeDLL(data string) {\n    newNode := &node{\n        data: data,\n    }\n    if d.head == nil {\n        d.head = newNode\n        d.tail = newNode\n    } else {\n        currentNode := d.head\n        for currentNode.next != nil {\n            currentNode = currentNode.next\n        }\n        newNode.prev = currentNode\n        currentNode.next = newNode\n        d.tail = newNode\n    }\n    d.len++\n}\nfunc (d *doublyLinkedList) TraverseForward() error {\n    if d.head == nil {\n        return fmt.Errorf(\"TraverseError: List is empty\")\n    }\n    temp := d.head\n    for temp != nil {\n        fmt.Printf(\"value = %v, prev = %v, next = %v\\n\", temp.data, temp.prev, temp.next)\n        temp = temp.next\n    }\n    fmt.Println()\n    return nil\n}\nfunc (d *doublyLinkedList) Size() int {\n    return d.len\n}\nfunc (d *doublyLinkedList) ReverseDLL() {\n    currentNode := d.head\n    var nextInList *node\n    d.head, d.tail = d.tail, d.head\n    for currentNode != nil {\n        nextInList = currentNode.next\n        currentNode.next, currentNode.prev = currentNode.prev, currentNode.next\n        currentNode = nextInList\n    }\n}\nfunc main() {\n    doublyList := initDoublyList()\n    fmt.Printf(\"Add Front Node: C\\n\")\n    doublyList.AddFrontNodeDLL(\"C\")\n    fmt.Printf(\"Add Front Node: B\\n\")\n    doublyList.AddFrontNodeDLL(\"B\")\n    fmt.Printf(\"Add Front Node: A\\n\")\n    doublyList.AddFrontNodeDLL(\"A\")\n    fmt.Printf(\"Add End Node: D\\n\")\n    doublyList.AddEndNodeDLL(\"D\")\n    fmt.Printf(\"Add End Node: E\\n\")\n    doublyList.AddEndNodeDLL(\"E\")\n    fmt.Printf(\"Size of doubly linked ist: %d\\n\", doublyList.Size())\n    err := doublyList.TraverseForward()\n    if err != nil {\n        fmt.Println(err.Error())\n    }\n    fmt.Println(\"Reversing Doubly Linked List\")\n    doublyList.ReverseDLL()\n    fmt.Printf(\"Size of doubly linked ist: %d\\n\", doublyList.Size())\n    err = doublyList.TraverseForward()\n    if err != nil {\n        fmt.Println(err.Error())\n    }\n}\n```", "```\nAdd Front Node: C\nAdd Front Node: B\nAdd Front Node: A\nAdd End Node: D\nAdd End Node: E\nSize of doubly linked ist: 5\nvalue = A, prev = <nil>, next = &{B 0xc000070060 0xc000070020}\nvalue = B, prev = &{A <nil>0xc000070040}, next = &{C 0xc000070040 0xc000070080}\nvalue = C, prev = &{B 0xc000070060 0xc000070020}, next = &{D 0xc000070020 0xc0000700a0}\nvalue = D, prev = &{C 0xc000070040 0xc000070080}, next = &{E 0xc000070080 <nil>}\nvalue = E, prev = &{D 0xc000070020 0xc0000700a0}, next = <nil>Reversing Doubly Linked List\nSize of doubly linked ist: 5\nvalue = E, prev = <nil>, next = &{D 0xc0000700a0 0xc000070020}\nvalue = D, prev = &{E <nil>0xc000070080}, next = &{C 0xc000070080 0xc000070040}\nvalue = C, prev = &{D 0xc0000700a0 0xc000070020}, next = &{B 0xc000070020 0xc000070060}\nvalue = B, prev = &{C 0xc000070080 0xc000070040}, next = &{A 0xc000070040 <nil>}\nvalue = A, prev = &{B 0xc000070020 0xc000070060}, next =</nil></nil></nil></nil></nil></nil></nil> \n```"]