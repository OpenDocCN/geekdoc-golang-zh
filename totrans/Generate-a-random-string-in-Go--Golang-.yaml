- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:16:46'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Generate a random string in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/generate-random-string-golang/](https://golangbyexample.com/generate-random-string-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Code](#Code "Code")*  *# **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**‘mat/rand’** package of golang contains a **Intn** function that can be used
    to generate a pseudo-random number between [0,n). Bracket at the end means that
    n is exclusive. This function can be utilized to generate a random string from
    a character set.'
  prefs: []
  type: TYPE_NORMAL
- en: To know more about what pseudo-random number means, checkout this post – [https://golangbyexample.com/generate-random-number-golang](https://golangbyexample.com/generate-random-number-golang)
  prefs: []
  type: TYPE_NORMAL
- en: Below is the signature of this method. It takes input a number n and will return
    a number x in range 0<=x<n.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Above function can be used to generate a random string. Basically we first select
    a charSet. Then we use the above function to generate a random number and then
    use that random number to get a random character from the charSet. This random
    character is added to a string until we have a random string of desired length.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: Below is the output on my machine. On your's it might give a different output
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In above program we are using character set as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: All the above characters in charSet were ASCII characters hence we were able
    to index a character in **charSet** string. But this could be problem if the **charSet**
    contains non-ASCII character.
  prefs: []
  type: TYPE_NORMAL
- en: In Golang string is a sequence of bytes. A string literal actually represents
    a UTF-8 sequence of bytes. In UTF-8, ASCII characters are single-byte corresponding
    to the first 128 Unicode characters. All other characters are between 1 to 4 bytes.
    Due to this it is not possible to index a character in a string.  In GO, rune
    data type represents a Unicode point.  Once a string is converted to an array
    of rune then it is possible to index a character in that array of rune.
  prefs: []
  type: TYPE_NORMAL
- en: So in case, the character set contains some characters that are not ASCII they
    might occupy more than 1 bytes. In that case, we cannot use the above code to
    generate a random string as we cannot index into the charSet. For this case, we
    have to first convert a string into a rune array so that we can index into the
    rune array to the character and then incrementally form the random string.
  prefs: []
  type: TYPE_NORMAL
- en: As in the below example, our charSet contains a non-ASCII character **'£'.**
    This character occupies two bytes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: Below is the output on my machine. On yours it might give a different output
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*   [random](https://golangbyexample.com/tag/random/)*   [string](https://golangbyexample.com/tag/string/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
