["```\npackage main\n\nimport \"fmt\"\n\ntype ele struct {\n    name string\n    next *ele\n}\n\ntype singleList struct {\n    len  int\n    head *ele\n}\n\nfunc initList() *singleList {\n    return &singleList{}\n}\n\nfunc (s *singleList) AddFront(name string) {\n    ele := &ele{\n        name: name,\n    }\n    if s.head == nil {\n        s.head = ele\n    } else {\n        ele.next = s.head\n        s.head = ele\n    }\n    s.len++\n    return\n}\n\nfunc (s *singleList) AddBack(name string) {\n    ele := &ele{\n        name: name,\n    }\n    if s.head == nil {\n        s.head = ele\n    } else {\n        current := s.head\n        for current.next != nil {\n            current = current.next\n        }\n        current.next = ele\n    }\n    s.len++\n    return\n}\n\nfunc (s *singleList) RemoveFront() error {\n    if s.head == nil {\n        return fmt.Errorf(\"List is empty\")\n    }\n    s.head = s.head.next\n    s.len--\n    return nil\n}\n\nfunc (s *singleList) RemoveBack() error {\n    if s.head == nil {\n        return fmt.Errorf(\"removeBack: List is empty\")\n    }\n    var prev *ele\n    current := s.head\n    for current.next != nil {\n        prev = current\n        current = current.next\n    }\n    if prev != nil {\n        prev.next = nil\n    } else {\n        s.head = nil\n    }\n    s.len--\n    return nil\n}\n\nfunc (s *singleList) Front() (string, error) {\n    if s.head == nil {\n        return \"\", fmt.Errorf(\"Single List is empty\")\n    }\n    return s.head.name, nil\n}\n\nfunc (s *singleList) Size() int {\n    return s.len\n}\n\nfunc (s *singleList) Traverse() error {\n    if s.head == nil {\n        return fmt.Errorf(\"TranverseError: List is empty\")\n    }\n    current := s.head\n    for current != nil {\n        fmt.Println(current.name)\n        current = current.next\n    }\n    return nil\n}\n\nfunc main() {\n     singleList := initList()\n    fmt.Printf(\"AddFront: A\\n\")\n    singleList.AddFront(\"A\")\n    fmt.Printf(\"AddFront: B\\n\")\n    singleList.AddFront(\"B\")\n    fmt.Printf(\"AddBack: C\\n\")\n    singleList.AddBack(\"C\")\n\n    fmt.Printf(\"Size: %d\\n\", singleList.Size())\n\n    err := singleList.Traverse()\n    if err != nil {\n        fmt.Println(err.Error())\n    }\n\n    fmt.Printf(\"RemoveFront\\n\")\n    err = singleList.RemoveFront()\n    if err != nil {\n        fmt.Printf(\"RemoveFront Error: %s\\n\", err.Error())\n    }\n\n    fmt.Printf(\"RemoveBack\\n\")\n    err = singleList.RemoveBack()\n    if err != nil {\n        fmt.Printf(\"RemoveBack Error: %s\\n\", err.Error())\n    }\n\n    fmt.Printf(\"RemoveBack\\n\")\n    err = singleList.RemoveBack()\n    if err != nil {\n        fmt.Printf(\"RemoveBack Error: %s\\n\", err.Error())\n    }\n\n    fmt.Printf(\"RemoveBack\\n\")\n    err = singleList.RemoveBack()\n    if err != nil {\n        fmt.Printf(\"RemoveBack Error: %s\\n\", err.Error())\n    }\n\n    err = singleList.Traverse()\n    if err != nil {\n        fmt.Println(err.Error())\n    }\n\n   fmt.Printf(\"Size: %d\\n\", singleList.Size())\n}\n```", "```\nAddFront: A\nAddFront: B\nAddBack: C\nSize: 3\nB\nA\nC\nRemoveFront\nRemoveBack\nRemoveBack\nRemoveBack\nRemoveBack Error: removeBack: List is empty\nTranverseError: List is empty\nSize: 0\n```"]