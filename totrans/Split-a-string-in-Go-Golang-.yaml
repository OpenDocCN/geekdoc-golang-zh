- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:11:59'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Split a string in Go(Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/split-a-string-golang/](https://golangbyexample.com/split-a-string-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Code](#Code "Code")*  *# **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Golang string are UTF-8 encoded. **strings** package of GO provides a **Split**
    method that can be used to split a string by a separator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below is the signature of the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can notice the return value of the **Split** function is a slice of string.
    Let’s notice some points about this method
  prefs: []
  type: TYPE_NORMAL
- en: 'Case 1: The **Split** method slices the **s** into substrings which are separated
    by **sep**. It will return a slice of string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Case 2: If **s** doesn’t contain **sep** then a slice of string of length 1
    is returned. The only element of this slice will be **s**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Case 3: If **sep** is empty and then it will return a slice of string after
    splitting **s** into each UTF-8 sequence'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Case 4: If both **s** and **sep** are empty it will return an empty slice of
    string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]*'
  prefs: []
  type: TYPE_NORMAL
