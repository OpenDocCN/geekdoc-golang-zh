- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '类别: 未分类'
- en: 'date: 2024-10-13 06:25:25'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期: 2024-10-13 06:25:25'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Error in Go (Golang)- Advanced
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go中的错误（Golang）- 高级
- en: 来源：[https://golangbyexample.com/error-in-golang-advanced/](https://golangbyexample.com/error-in-golang-advanced/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/error-in-golang-advanced/](https://golangbyexample.com/error-in-golang-advanced/)
- en: This is the  chapter 27 of the golang comprehensive tutorial series. Refer to
    this link for other chapters of the series – [Golang Comprehensive Tutorial Series](https://golangbyexample.com/golang-comprehensive-tutorial/)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是golang综合教程系列的第27章。有关系列其他章节的信息，请参考这个链接 – [Golang综合教程系列](https://golangbyexample.com/golang-comprehensive-tutorial/)
- en: '**Next Tutorial** – [Panic and Recover](https://golangbyexample.com/panic-and-recover-golang/)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**下一个教程** – [恐慌与恢复](https://golangbyexample.com/panic-and-recover-golang/)'
- en: '**Previous Tutorial** – [Error – Part 1](https://golangbyexample.com/error-in-golang/)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**上一个教程** – [错误 – 第1部分](https://golangbyexample.com/error-in-golang/)'
- en: Now let’s check out the current tutorial. Below is the table of contents for
    current tutorial.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们查看当前的教程。以下是当前教程的目录。
- en: Table of Contents
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Wrapping of error](#Wrapping_of_error "Wrapping of error")'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[错误的包装](#Wrapping_of_error "Wrapping of error")'
- en: '[Unwrap an error](#Unwrap_an_error "Unwrap an error")'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[解包错误](#Unwrap_an_error "Unwrap an error")'
- en: '[Check if two error are equal](#Check_if_two_error_are_equal "Check if two
    error are equal")'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[检查两个错误是否相等](#Check_if_two_error_are_equal "Check if two error are equal")'
- en: '[Using the equality operator (==)](#Using_the_equality_operator "Using the
    equality operator (==)")'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用等于运算符 (==)](#Using_the_equality_operator "Using the equality operator (==)")'
- en: '[Using the Is function of errors package](#Using_the_Is_function_of_errors_package
    "Using the Is function of errors package")'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用错误包的Is函数](#Using_the_Is_function_of_errors_package "Using the Is function
    of errors package")'
- en: '[Get the underlying error from an error represented by the error interface](#Get_the_underlying_error_from_an_error_represented_by_the_error_interface
    "Get the underlying error from an error represented by the error interface")'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从错误接口表示的错误中获取基础错误](#Get_the_underlying_error_from_an_error_represented_by_the_error_interface
    "Get the underlying error from an error represented by the error interface")'
- en: '[Using the .({type}) assert](#Using_the_type_assert "Using the .({type}) assert")'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用.({type})断言](#Using_the_type_assert "Using the .({type}) assert")'
- en: '[Using the As function of errors package](#Using_the_As_function_of_errors_package
    "Using the As function of errors package")'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用错误包的As函数](#Using_the_As_function_of_errors_package "Using the As function
    of errors package")'
- en: '[Conclusion](#Conclusion "Conclusion")*  *# **Overview**'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[结论](#Conclusion "Conclusion")*  *# **概述**'
- en: In the article we will be covering the advanced topics related to error in go.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将涵盖与go中错误相关的高级主题。
- en: Wrapping and un-wrapping errors
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误的包装与解包
- en: Error comparison
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误比较
- en: Extract underlying type from error
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从错误中提取基础类型
- en: '**As** and **Is** function of errors package'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**As**和**Is**函数的错误包'
- en: Please refer to link below first which starts with basics of **error** in go.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请首先参考下面的链接，该链接介绍了**go中的错误**的基础知识。
- en: '[https://golangbyexample.com/error-in-golang/](https://golangbyexample.com/error-in-golang/)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://golangbyexample.com/error-in-golang/](https://golangbyexample.com/error-in-golang/)'
- en: 'That article will cover basic things about error such as:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章将涵盖有关错误的基本内容，例如：
- en: Overview of error
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误概述
- en: Error interface
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误接口
- en: Different ways of creating an error.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建错误的不同方法。
- en: Ignoring errors
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 忽略错误
- en: '**Wrapping of error**'
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**错误的包装**'
- en: In go, error can wrap another error as well.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在go中，错误也可以包装另一个错误。
- en: What does wrapping of error mean? It means to create a hierarchy of errors in
    which a  particular instance of error wraps another error and that particular
    instance itself can be wrapped inside another error.  Below is the syntax for
    wrapping an error
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 错误的包装是什么意思？这意味着创建一个错误层级，其中一个特定实例的错误包装了另一个错误，并且该特定实例本身也可以被包装在另一个错误中。下面是包装错误的语法。
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**%w** directive Is used for wrapping the error.  The **fmt.Errorf **should
    be called with only one %w directive. Let’s see an example.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**%w**指令用于包装错误。 **fmt.Errorf**应仅与一个 %w 指令一起调用。让我们看一个例子。'
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Output**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the above program, we created a struct **errorOne** that has an **Error**
    method hence it implements the **error** interface. Then we created an instance
    of the **errorOne** struct named **e1**. Then we wrapped that instance **e1**
    into another error **e2** like this
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，我们创建了一个结构体**errorOne**，它有一个**Error**方法，因此实现了**error**接口。然后我们创建了一个名为**e1**的**errorOne**结构体实例。接着我们将该实例**e1**包装到另一个错误**e2**中，如下所示。
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Then we wrapped **e2** into **e3** like below.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将**e2**包装到**e3**中，如下所示。
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: So so we created a hierarchy of errors in which **e3** wraps **e2** and **e2**
    wraps **e1**.  Thus **e3** also wraps **e1** transitively. When we print **e2 **
    it also prints the error from **e1** and gives the output.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因此我们创建了一个错误的层次结构，其中**e3**包装了**e2**，而**e2**又包装了**e1**。因此**e3**也通过传递方式包装了**e1**。当我们打印**e2**时，它也会打印来自**e1**的错误，并给出输出。
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When we print **e3** it prints the error from **e2** as well as **e1** and gives
    the output.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们打印**e3**时，它会打印来自**e2**和**e1**的错误，并给出输出。
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now the question which comes to the mind that whats the use case of wrapping
    the errors. To understand it let’s see an example
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在脑海中出现的问题是，包装错误的用例是什么。为了理解这一点，让我们看一个例子。
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Output**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the above program, we have a function **checkPostiveAndEven** that checks
    whether a number is even and positive. In turns, it calls the **checkEven** function
    to check if the number is even. And then it calls **checkPositive** function to
    check if the number is positive. If a number is not even and positive it an error
    is raised.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们有一个函数**checkPostiveAndEven**，它检查一个数字是否是偶数且为正数。它会调用**checkEven**函数来检查数字是否为偶数。然后它会调用**checkPositive**函数来检查数字是否为正数。如果一个数字既不是偶数也不是正数，就会引发错误。
- en: In the above program it is impossible to tell stack trace of the error. We know
    that this error came from **checkEven** function for the above output. But which
    function called the **checkEven** function is not clear from the error. This is
    where wrapping the error comes in the picture.  This becomes more useful when
    the project is big and there are a lot of functions calling each other.  Let’s
    rewrite the program by wrapping the error.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，无法确定错误的堆栈跟踪。我们知道这个错误来自于**checkEven**函数，但哪个函数调用了**checkEven**函数在错误中并不清楚。这就是包装错误的重要性。当项目较大且有许多函数相互调用时，这变得更加有用。让我们通过包装错误来重写程序。
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Output**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The above program is same as the previous program just that in the **checkPostiveAndEven**
    function , we wrap the errors like below.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序与之前的程序相同，只是在**checkPostiveAndEven**函数中，我们像下面这样包装错误。
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: So the output is more clear and the error is more informative. The output clearly
    mentions the sequence of calling as well
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 所以输出更加清晰，错误信息也更加详细。输出清楚地提到了调用的顺序。
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Unwrap an error**'
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**解包错误**'
- en: In the above section, we studied about wrapping the error. It is also possible
    to unwrap the error. Unwrap function of errors package can be used to unwrap an
    error. Below is the syntax of the function.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在上节中，我们研究了如何包装错误。同样也可以解包错误。错误包的Unwrap函数可以用来解包错误。下面是该函数的语法。
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If the **err** wraps another error, then the wrapped error will be returned
    otherwise **Unwrap** function will return nil.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果**err**包装了另一个错误，那么将返回被包装的错误，否则**Unwrap**函数将返回nil。
- en: Let’s see a program to illustrate the same
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个程序来说明同样的情况。
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Output**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the above program, we created a struct **errorOne** that has an **Error**
    method hence it implements the **error** interface. Then we created an instance
    of the **errorOne** struct named **e1**. Then we wrapped that instance **e1**
    into another error **e2** like this
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们创建了一个结构体**errorOne**，它有一个**Error**方法，因此它实现了**error**接口。然后我们创建了一个名为**e1**的**errorOne**结构体实例。接着，我们将该实例**e1**包装到另一个错误**e2**中，如下所示。
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Then we wrapped **e2** into **e3** like below.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将**e2**包装到**e3**中，如下所示。
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Hence
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 因此。
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: will return wrapped error **e2** as **e3** wraps **e2** and output will be
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 将返回被包装的错误**e2**，因为**e3**包装了**e2**，输出将是
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: While
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 同时。
- en: '[PRE20]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: will output nil as **e1** does not wraps any error
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将输出nil，因为**e1**没有包装任何错误。
- en: '[PRE21]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**Check if two error are equal**'
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**检查两个错误是否相等**'
- en: First of all, what is meant by equality of the error?  As you already know that
    error is represented by the error interface in go. In go, two interfaces are equal
    if
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，错误的相等性是什么意思？正如你所知道的，错误在Go中由错误接口表示。在Go中，当两个接口相等时：
- en: Both refer to the same underlying type
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两者指向相同的基础类型。
- en: The underlying value is equal (or both nil)
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础值相等（或两个都是nil）
- en: So above two points apply for comparing the error as well. There are two ways
    of checking if given errors are equal
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所以上述两个要点同样适用于比较错误。有两种方法可以检查给定的错误是否相等。
- en: Using the equality operator (==)
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用相等运算符（==）。
- en: '**==** operator ca be used to compare two error in golang'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**==**运算符可以用于比较两个Go语言中的错误。'
- en: Using the **Is** function of errors package
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用错误包的**Is**函数。
- en: '[https://golang.org/pkg/errors/](https://golang.org/pkg/errors/) .  Using **Is**
    function is preferable to using the equality operator because it checks for equality
    by unwrapping the first error sequentially and matches it with target error at
    each step of unwrap. We will see an example later on to fully understand why it
    is preferable. Below is the syntax of Is function.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://golang.org/pkg/errors/](https://golang.org/pkg/errors/)。使用 **Is**
    函数比使用等于运算符更可取，因为它通过顺序展开第一个错误来检查相等性，并在每一步展开时与目标错误进行匹配。稍后我们将看到一个例子，以充分理解为什么这更可取。下面是
    Is 函数的语法。'
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Let’s see an example
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Output**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE24]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the above program, we created **errorOne** struct which defines the **Error**
    method hence implement the **error** interface.  We created **err1**  variable
    which is an instance of **errorOne** struct. We also created a **do()** function
    which raises an error of type **errorOne** and that is captured in **err2** variable
    in the main function
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，我们创建了 **errorOne** 结构体，该结构体定义了 **Error** 方法，因此实现了 **error** 接口。我们创建了一个
    **err1** 变量，它是 **errorOne** 结构体的一个实例。我们还创建了一个 **do()** 函数，该函数引发了一个 **errorOne**
    类型的错误，并在主函数中捕获到 **err2** 变量中。
- en: Then we are comparing two errors using
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用以下方法比较两个错误。
- en: Using the equality operator
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用等于运算符
- en: '[PRE25]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Using the **Is** function of errors package
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 errors 包的 **Is** 函数
- en: '[PRE26]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Both the method correctly output that the error is equal as both **err1** and
    **err2**
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 两种方法都正确地输出错误是相等的，因为 **err1** 和 **err2** 相同。
- en: Refer to same underlying type which is **errorOne**
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用相同的基础类型，即 **errorOne**。
- en: Have the same underlying value
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有相同的基础值
- en: We mentioned above that using the **Is** function preferable to using the equality
    operator because it checks for equality by unwrapping the first error sequentially
    and matches it with the target error at each step of unwrap. Let’s see an example
    of that
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上面提到，使用 **Is** 函数比使用等于运算符更可取，因为它通过顺序展开第一个错误来检查相等性，并在每一步展开时与目标错误进行匹配。让我们看一个例子。
- en: '[PRE27]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '**Output**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE28]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The above program is almost same as the previous program just the difference
    being that in the **do()** function we are wrapping the error as well
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的程序几乎与之前的程序相同，唯一的区别是，在 **do()** 函数中我们也在包装错误。
- en: '[PRE29]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The equality operator outputs
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等于运算符的输出
- en: '[PRE30]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: While **Is** function outputs
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 而 **Is** 函数的输出
- en: '[PRE31]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This is because the **err2** returned wraps an instance of  **errorOne** which
    is not catched by the equality operator but is catched by **Is** function
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为 **err2** 返回了一个封装 **errorOne** 的实例，等于运算符无法捕获，但 **Is** 函数能够捕获。
- en: '**Get the underlying error from an error represented by the error interfac**e'
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**从 error 接口表示的错误中获取基础错误**'
- en: There are two ways of getting the underlying type
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 获取基础类型有两种方法
- en: Using the .({type}) assert
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 .({type}) 断言
- en: If the assert succeeds then it will return the corresponding error otherwise
    it will panic. Below is the syntax
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果断言成功，则将返回相应的错误，否则将出现恐慌。下面是语法。
- en: '[PRE32]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Better to use **ok** variable to prevent panic in case assertion fails.  Below
    is the syntax for that. The **ok** variable will be set to true if  error underlying
    type is correct
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最好使用 **ok** 变量来防止在断言失败时出现恐慌。下面是相应的语法。如果错误的基础类型正确，**ok** 变量将被设置为 true。
- en: '[PRE33]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**Using the As function of errors package**'
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**使用 errors 包的 As 函数**'
- en: '[https://golang.org/pkg/errors/](https://golang.org/pkg/errors/) . Using **As**
    function is preferable to using the .({type}) assert because it checks for match
    by unwrapping the first error sequentially and matches it with target error at
    each step of unwrap. Below is the syntax of Is function'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://golang.org/pkg/errors/](https://golang.org/pkg/errors/)。使用 **As**
    函数比使用 .({type}) 断言更可取，因为它通过顺序展开第一个错误来检查匹配，并在每一步展开时与目标错误进行匹配。下面是 Is 函数的语法。'
- en: '[PRE34]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '**As** function will find the first error in the first argument which can match
    the target. Once a match is found it will set target to that error value.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**As** 函数将在第一个参数中找到第一个可以匹配目标的错误。一旦找到匹配项，它将把目标设置为该错误值。'
- en: Let’s see an example
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。
- en: '[PRE35]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '**Output:**'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE36]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In the above program, we have a function openFile in which we are trying to
    open a non-existing type hence it will raise an error. Then we are asserting 
    the error in two ways
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，我们有一个 openFile 函数，我们试图打开一个不存在的类型，因此它会引发错误。然后我们通过两种方式断言该错误。
- en: Using . assert operator. The **ok** variable will be set to true if  error underlying
    type is ***os.PathError** otherwise it will be set to false
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 . 断言运算符。如果错误的基础类型是 ***os.PathError**，那么 **ok** 变量将被设置为 true，否则将被设置为 false。
- en: '[PRE37]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Using the **As** function of errors package
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用errors包的**As**函数
- en: '[PRE38]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Both the method correctly assert that the error is of type ***os.PathError**
    as error returned by the **openFile** function is of type ***os.PathError**
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 两种方法都正确地断言错误为类型***os.PathError**，因为**openFile**函数返回的错误是类型***os.PathError**。
- en: We mentioned above that using **As** function is preferable to using the .({type})
    assert because it checks for a match by unwrapping the first error sequentially
    and matches it with the target error at each step of unwrap. Let’s see an example
    to understand that
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上面提到，使用**As**函数比使用.({type})断言更可取，因为它通过顺序解包第一个错误并在每一步解包时与目标错误进行匹配。让我们看一个例子来理解这一点。
- en: '[PRE39]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '**Output:**'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE40]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The above program is almost same as the previous program just the difference
    being that in the **openFile** function we are wrapping the error as well
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序与之前的程序几乎相同，唯一的区别在于在**openFile**函数中我们也对错误进行了包装。
- en: '[PRE41]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The . assert outputs
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该断言输出
- en: '[PRE42]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: While As function outputs
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当**As**函数输出时
- en: '[PRE43]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This is because the error returned by the **openFile** function wraps ***os.Patherror**
    error which is not catched by the dot(‘.’) assert but is catched by **As** function
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为**openFile**函数返回的错误包装了***os.PathError**错误，该错误未被点（‘.’）断言捕获，但被**As**函数捕获。
- en: '**Conclusion**'
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结论**'
- en: This is all about advanced topic in error in golang. Hope you have liked this
    article. Please share feedback/improvements/mistakes in comments.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是关于Golang中错误的高级主题。希望你喜欢这篇文章。请在评论中分享反馈/改进/错误。
- en: '**Next Tutorial** – [Panic and Recover](https://golangbyexample.com/panic-and-recover-golang/)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**下一教程** – [恐慌与恢复](https://golangbyexample.com/panic-and-recover-golang/)'
- en: '**Previous Tutorial** – [Error – Part 1](https://golangbyexample.com/error-in-golang/)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**上一个教程** – [错误 – 第 1 部分](https://golangbyexample.com/error-in-golang/)'
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
