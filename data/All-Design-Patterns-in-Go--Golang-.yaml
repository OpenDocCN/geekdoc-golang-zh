- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:04:42'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '日期：2024-10-13 06:04:42 '
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: All Design Patterns in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go (Golang) 中的所有设计模式
- en: 来源：[https://golangbyexample.com/all-design-patterns-golang/](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '来源：[https://golangbyexample.com/all-design-patterns-golang/](https://golangbyexample.com/all-design-patterns-golang/) '
- en: A curated list of design patterns implemented in Go. Also if you are interested
    in learning Golang, then for that we have a golang comprehensive tutorial series.
    Do check it out – [Golang Comprehensive Tutorial Series](https://golangbyexample.com/golang-comprehensive-tutorial/)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '一份关于在 Go 中实现的设计模式的整理列表。如果你有兴趣学习 Golang，我们还提供了一系列全面的 Golang 教程，欢迎查看 – [Golang
    综合教程系列](https://golangbyexample.com/golang-comprehensive-tutorial/) '
- en: '![](img/5f359bcb6904620fb7fcc79d495d63b5.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f359bcb6904620fb7fcc79d495d63b5.png) '
- en: Table of Contents
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Creational Design Patterns](#Creational_Design_Patterns "Creational Design
    Patterns")'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [创建型设计模式](#Creational_Design_Patterns "创建型设计模式")'
- en: '[Behavioural Design Patterns](#Behavioural_Design_Patterns "Behavioural Design
    Patterns")'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[行为设计模式](#Behavioural_Design_Patterns "行为设计模式") '
- en: '[Structural Design Patterns](#Structural_Design_Patterns "Structural Design
    Patterns")*  *# **Creational Design Patterns**'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[结构设计模式](#Structural_Design_Patterns "结构设计模式") *  *# **创建型设计模式**'
- en: '| [Abstract Factory](https://golangbyexample.com/abstract-factory-design-pattern-go/)
    |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| [抽象工厂](https://golangbyexample.com/abstract-factory-design-pattern-go/) |'
- en: '| [Builder](https://golangbyexample.com/builder-pattern-golang/) |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [构建者](https://golangbyexample.com/builder-pattern-golang/) |'
- en: '| [Factory](https://golangbyexample.com/golang-factory-design-pattern/) |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| [工厂](https://golangbyexample.com/golang-factory-design-pattern/) |'
- en: '| [Object Pool](https://golangbyexample.com/golang-object-pool/) |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| [对象池](https://golangbyexample.com/golang-object-pool/) |'
- en: '| [Prototype](https://golangbyexample.com/prototype-pattern-go/) |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [原型](https://golangbyexample.com/prototype-pattern-go/) |'
- en: '| [Singleton](https://golangbyexample.com/singleton-design-pattern-go/) |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [单例](https://golangbyexample.com/singleton-design-pattern-go/) |'
- en: '**Behavioural Design Patterns**'
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**行为设计模式**'
- en: '| [Chain of Responsiblity](https://golangbyexample.com/chain-of-responsibility-design-pattern-in-golang/)
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| [责任链](https://golangbyexample.com/chain-of-responsibility-design-pattern-in-golang/)
    |'
- en: '| [Command](https://golangbyexample.com/command-design-pattern-in-golang/)
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| [命令](https://golangbyexample.com/command-design-pattern-in-golang/) |'
- en: '| [Iterator](https://golangbyexample.com/go-iterator-design-pattern/) |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| [迭代器](https://golangbyexample.com/go-iterator-design-pattern/) |'
- en: '| [Mediator](https://golangbyexample.com/mediator-design-pattern-golang/) |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| [中介者](https://golangbyexample.com/mediator-design-pattern-golang/) |'
- en: '| [Memento](https://golangbyexample.com/memento-design-pattern-go/) |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [备忘录](https://golangbyexample.com/memento-design-pattern-go/) |'
- en: '| [Null Object](https://golangbyexample.com/null-object-design-pattern-golang/)
    |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| [空对象](https://golangbyexample.com/null-object-design-pattern-golang/) |'
- en: '| [Observer](https://golangbyexample.com/observer-design-pattern-golang/) |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| [观察者](https://golangbyexample.com/observer-design-pattern-golang/) |'
- en: '| [State](https://golangbyexample.com/state-design-pattern-go/) |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| [状态](https://golangbyexample.com/state-design-pattern-go/) |'
- en: '| [Strategy](https://golangbyexample.com/strategy-design-pattern-golang/) |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| [策略](https://golangbyexample.com/strategy-design-pattern-golang/) |'
- en: '| [Template Method](https://golangbyexample.com/template-method-design-pattern-golang/)
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| [模板方法](https://golangbyexample.com/template-method-design-pattern-golang/)
    |'
- en: '| [Visitor](https://golangbyexample.com/visitor-design-pattern-go/) |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| [访问者](https://golangbyexample.com/visitor-design-pattern-go/) |'
- en: '**Structural Design Patterns**'
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结构设计模式**'
- en: '| [Adapter](https://golangbyexample.com/adapter-design-pattern-go/) |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| [适配器](https://golangbyexample.com/adapter-design-pattern-go/) |'
- en: '| [Bridge](https://golangbyexample.com/bridge-design-pattern-in-go/) |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| [桥接](https://golangbyexample.com/bridge-design-pattern-in-go/) |'
- en: '| [Composite](https://golangbyexample.com/composite-design-pattern-golang/)
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| [组合](https://golangbyexample.com/composite-design-pattern-golang/) |'
- en: '| [Decorator](https://golangbyexample.com/decorator-pattern-golang/) |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| [装饰器](https://golangbyexample.com/decorator-pattern-golang/) |'
- en: '| [Facade](https://golangbyexample.com/facade-design-pattern-in-golang/) |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| [外观](https://golangbyexample.com/facade-design-pattern-in-golang/) |'
- en: '| [Flyweight](https://golangbyexample.com/flyweight-design-pattern-golang/)
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| [享元模式](https://golangbyexample.com/flyweight-design-pattern-golang/) |'
- en: '| [Proxy](https://golangbyexample.com/proxy-design-pattern-in-golang/) |*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '| [代理](https://golangbyexample.com/proxy-design-pattern-in-golang/) |*'
