["```\n{var_name} := {value}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    m2 := 123                   //Type Inferred will be int\n    n2 := \"circle\"              //Type Inferred will be string\n    o2 := 5.6                   //Type Inferred will be float64\n    p2 := true                  //Type Inferred will be bool\n    q2 := 'a'                   //Type Inferred will be rune\n    r2 := 3 + 5i                //Type Inferred will be complex128\n    s2 := &sample{name: \"test\"} //Type Inferred will be pointer to main.sample\n    t2 := sample{name: \"test\"}  //Type Inferred will be main.sample\n    u2 := get()                 //Type inferred will []string as that is the return value of function get()\n\n    fmt.Println(\"\")\n    fmt.Printf(\"m2: Type: %T Value: %v\\n\", m2, m2)\n    fmt.Printf(\"n2: Type: %T Value: %v\\n\", n2, n2)\n    fmt.Printf(\"o2: Type: %T Value: %v\\n\", o2, o2)\n    fmt.Printf(\"p2: Type: %T Value: %v\\n\", p2, p2)\n    fmt.Printf(\"q2: Type: %T Value: %v\\n\", q2, q2)\n    fmt.Printf(\"r2: Type: %T Value: %v\\n\", r2, r2)\n    fmt.Printf(\"s2: Type: %T Value: %v\\n\", s2, s2)\n    fmt.Printf(\"t2: Type: %T Value: %v\\n\", t2, t2)\n    fmt.Printf(\"u2: Type: %T Value: %v\\n\", u2, u2)\n}\n\ntype sample struct {\n    name string\n}\n\nfunc get() []string {\n    return []string{\"a\", \"b\"}\n}\n```", "```\nm2: Type: int Value: 123\nn2: Type: string Value: circle\no2: Type: float64 Value: 5.6\np2: Type: bool Value: true\nq2: Type: int32 Value: 97\nr2: Type: complex128 Value: (3+5i)\ns2: Type: *main.sample Value: &{test}\nt2: Type: main.sample Value: {test}\nu2: Type: []string Value: [a b]\n```", "```\na := 8\na := 16\n```", "```\na,b := 1, 2\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    a, b := 1, 2\n    b, c := 3, 4\n    fmt.Println(a, b, c)\n}\n```", "```\n1, 3, 4\n```"]