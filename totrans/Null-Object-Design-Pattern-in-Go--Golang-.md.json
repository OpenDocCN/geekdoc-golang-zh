["```\ntype department interface {\n    getNumberOfProfessors() int\n    getName() string\n}\n```", "```\ntype college struct {\n    departments []department\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    college1 := createCollege1()\n    college2 := createCollege2()\n    totalProfessors := 0\n    departmentArray := []string{\"computerscience\", \"mechanical\", \"civil\", \"electronics\"}\n\n    for _, deparmentName := range departmentArray {\n        d := college1.getDepartment(deparmentName)\n        totalProfessors += d.getNumberOfProfessors()\n    }\n\n    fmt.Printf(\"Total number of professors in college1 is %d\\n\", totalProfessors)\n\n    //Reset the professor count\n    totalProfessors := 0\n    for _, deparmentName := range departmentArray {\n        d := college2.getDepartment(deparmentName)\n        totalProfessors += d.getNumberOfProfessors()\n    }\n    fmt.Printf(\"Total number of professors in college2 is %d\\n\", totalProfessors)\n}\n\nfunc createCollege1() *college {\n    college := &college{}\n    college.addDepartment(\"computerscience\", 4)\n    college.addDepartment(\"mechanical\", 5)\n    return college\n}\n\nfunc createCollege2() *college {\n    college := &college{}\n    college.addDepartment(\"computerscience\", 2)\n    return college\n} \n```", "```\npackage main\n\ntype college struct {\n    departments []department\n}\n\nfunc (c *college) addDepartment(departmentName string, numOfProfessors int) {\n    if departmentName == \"computerscience\" {\n        computerScienceDepartment := &computerscience{numberOfProfessors: numOfProfessors}\n        c.departments = append(c.departments, computerScienceDepartment)\n    }\n    if departmentName == \"mechanical\" {\n        mechanicalDepartment := &mechanical{numberOfProfessors: numOfProfessors}\n        c.departments = append(c.departments, mechanicalDepartment)\n    }\n    return\n}\n\nfunc (c *college) getDepartment(departmentName string) department {\n    for _, department := range c.departments {\n        if department.getName() == departmentName {\n            return department\n        }\n    }\n    //Return a null department if the department doesn't exits\n    return &nullDepartment{}\n}\n```", "```\npackage main\n\ntype department interface {\n    getNumberOfProfessors() int\n    getName() string\n}\n```", "```\npackage main\n\ntype computerscience struct {\n    numberOfProfessors int\n}\n\nfunc (c *computerscience) getNumberOfProfessors() int {\n    return c.numberOfProfessors\n}\n\nfunc (c *computerscience) getName() string {\n    return \"computerscience\"\n}\n```", "```\npackage main\n\ntype mechanical struct {\n    numberOfProfessors int\n}\n\nfunc (c *mechanical) getNumberOfProfessors() int {\n    return c.numberOfProfessors\n}\n\nfunc (c *mechanical) getName() string {\n    return \"mechanical\"\n}\n```", "```\npackage main\n\ntype nullDepartment struct {\n    numberOfProfessors int\n}\n\nfunc (c *nullDepartment) getNumberOfProfessors() int {\n    return 0\n}\n\nfunc (c *nullDepartment) getName() string {\n    return \"nullDepartment\"\n}\n```", "```\nTotal number of professors in college1 is 9\nTotal number of professors in college2 is 2\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype college struct {\n    departments []department\n}\n\nfunc (c *college) addDepartment(departmentName string, numOfProfessors int) {\n    if departmentName == \"computerscience\" {\n        computerScienceDepartment := &computerscience{numberOfProfessors: numOfProfessors}\n        c.departments = append(c.departments, computerScienceDepartment)\n    }\n    if departmentName == \"mechanical\" {\n        mechanicalDepartment := &mechanical{numberOfProfessors: numOfProfessors}\n        c.departments = append(c.departments, mechanicalDepartment)\n    }\n    return\n}\n\nfunc (c *college) getDepartment(departmentName string) department {\n    for _, department := range c.departments {\n        if department.getName() == departmentName {\n            return department\n        }\n    }\n    //Return a null department if the department doesn't exits\n    return &nullDepartment{}\n}\n\ntype department interface {\n    getNumberOfProfessors() int\n    getName() string\n}\n\ntype computerscience struct {\n    numberOfProfessors int\n}\n\nfunc (c *computerscience) getNumberOfProfessors() int {\n    return c.numberOfProfessors\n}\n\nfunc (c *computerscience) getName() string {\n    return \"computerscience\"\n}\n\ntype mechanical struct {\n    numberOfProfessors int\n}\n\nfunc (c *mechanical) getNumberOfProfessors() int {\n    return c.numberOfProfessors\n}\n\nfunc (c *mechanical) getName() string {\n    return \"mechanical\"\n}\n\ntype nullDepartment struct {\n    numberOfProfessors int\n}\n\nfunc (c *nullDepartment) getNumberOfProfessors() int {\n    return 0\n}\n\nfunc (c *nullDepartment) getName() string {\n    return \"nullDepartment\"\n}\n\nfunc main() {\n    college1 := createCollege1()\n    college2 := createCollege2()\n    totalProfessors := 0\n    departmentArray := []string{\"computerscience\", \"mechanical\", \"civil\", \"electronics\"}\n    for _, deparmentName := range departmentArray {\n        d := college1.getDepartment(deparmentName)\n        totalProfessors += d.getNumberOfProfessors()\n    }\n    fmt.Printf(\"Total number of professors in college1 is %d\\n\", totalProfessors)\n    totalProfessors = 0\n    for _, deparmentName := range departmentArray {\n        d := college2.getDepartment(deparmentName)\n        totalProfessors += d.getNumberOfProfessors()\n    }\n    fmt.Printf(\"Total number of professors in college2 is %d\\n\", totalProfessors)\n}\n\nfunc createCollege1() *college {\n    college := &college{}\n    college.addDepartment(\"computerscience\", 4)\n    college.addDepartment(\"mechanical\", 5)\n    return college\n}\n\nfunc createCollege2() *college {\n    college := &college{}\n    college.addDepartment(\"computerscience\", 2)\n    return college\n}\n```", "```\nTotal number of professors in college1 is 9\nTotal number of professors in college2 is 2\n```"]