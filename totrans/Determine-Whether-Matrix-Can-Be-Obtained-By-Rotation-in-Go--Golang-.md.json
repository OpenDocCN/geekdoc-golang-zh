["```\nInput: source = [2,1],[1,2]], target = [[1,2],[2,1]]\nOutput: true\n```", "```\nInput:  source = [[1,2],[2,2]], target = [[2,1],[1,2]]\nOutput: false\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc findRotation(mat [][]int, target [][]int) bool {\n\tn, tmp := len(mat), make([]bool, 4)\n\tfor i := range tmp {\n\t\ttmp[i] = true\n\t}\n\tfor i := 0; i < n; i++ {\n\t\tfor j := 0; j < n; j++ {\n\t\t\tif mat[i][j] != target[i][j] {\n\t\t\t\ttmp[0] = false\n\t\t\t}\n\t\t\tif mat[i][j] != target[j][n-i-1] {\n\t\t\t\ttmp[1] = false\n\t\t\t}\n\t\t\tif mat[i][j] != target[n-i-1][n-j-1] {\n\t\t\t\ttmp[2] = false\n\t\t\t}\n\t\t\tif mat[i][j] != target[n-j-1][i] {\n\t\t\t\ttmp[3] = false\n\t\t\t}\n\t\t}\n\t}\n\treturn tmp[0] || tmp[1] || tmp[2] || tmp[3]\n}\n\nfunc main() {\n\toutput := findRotation([][]int{{2, 1}, {1, 2}}, [][]int{{1, 2}, {2, 1}})\n\tfmt.Println(output)\n\n\toutput = findRotation([][]int{{1, 2}, {2, 2}}, [][]int{{2, 1}, {1, 2}})\n\tfmt.Println(output)\n\n}\n```", "```\ntrue\nfalse\n```"]