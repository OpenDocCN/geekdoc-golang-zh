- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:45:41'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:45:41
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Tic Tac Toe Complete Working Program in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tic Tac Toe 完整工作程序在Go语言中
- en: 来源：[https://golangbyexample.com/tic-tac-toe-program-golang/](https://golangbyexample.com/tic-tac-toe-program-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/tic-tac-toe-program-golang/](https://golangbyexample.com/tic-tac-toe-program-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")'
- en: '[Full Working Code:](#Full_Working_Code "Full Working Code:")*  *## **Overview**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[完整工作代码：](#Full_Working_Code "Full Working Code:")*  *## **概述**'
- en: Let’s first understand what is Tic Tac Toe with an example
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先通过一个例子了解什么是井字游戏。
- en: There is an n*n board and each block in the board can be marked with either
    a **cross** or a **circle** only if the block is empty
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个n*n的棋盘，每个块只能在空时标记为**交叉**或**圆圈**。
- en: Maxtwo players play the game at a time with each taking turn.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最多两名玩家同时进行游戏，每人轮流进行。
- en: The first player marks a **cross** at any block in the board in its turn.  While
    the second player marks a **circle** at any block in the board in its turn.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一名玩家在其回合中在棋盘的任意块上标记**交叉**。而第二名玩家在其回合中在棋盘的任意块上标记**圆圈**。
- en: The objective is to have either an entire row or an entire column or an entire
    diagonal with any of the one symbol either **cross** or **circle**.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标是让某一行、某一列或某一对角线的所有块都标记为任一符号，**交叉**或**圆圈**。
- en: Both players will try to stop the other player from achieving this objective.
    Whosoever achieves it first will win.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两位玩家将努力阻止对方实现这个目标。谁先实现目标，谁就获胜。
- en: If all blocks in the board are full and none of the players have not been able
    to mark the entire row, column, or diagonal with its symbol then the game results
    in a draw.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果棋盘上的所有块都已填满，而没有任何玩家能够用自己的符号标记完整的行、列或对角线，那么游戏结果为平局。
- en: No more moves are allowed after one player wins the game.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦一名玩家赢得游戏，就不允许再进行更多的移动。
- en: Let’s understand this game with an example. Assume a 3*3 grid. Dot (‘.’) represents
    an empty block
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来理解这个游戏。假设有一个3*3的网格。点（‘.’）表示一个空块。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the above game First Player Win because the third row is all occupied with
    symbol cross – **‘*’**
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述游戏中，第一名玩家获胜，因为第三行完全被符号交叉占据 – **‘*’**
- en: '**Program**'
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Here is the full working code
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是完整的工作代码
- en: '**symbol.go**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**symbol.go**'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**iPlayer.go**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**iPlayer.go**'
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**humanPlayer.go**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**humanPlayer.go**'
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**computerPlayer.go**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**computerPlayer.go**'
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**gameStatus.go**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**gameStatus.go**'
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**board.go**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**board.go**'
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**game.go**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**game.go**'
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Output**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: In the above program, we have fixed the moves for both the player in the **humanPlayer.go**
    file. Here is the output based upon those moves.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们为两位玩家固定了移动，保存在**humanPlayer.go**文件中。以下是基于这些移动的输出。
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Full Working Code:**'
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**完整工作代码：**'
- en: Here is the full working code in one file
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个文件中的完整工作代码
- en: '**main.go**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**main.go**'
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Output**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: In the above program as well, we have fixed the moves for both the player in
    the **humanPlayer class**. Here is the output based upon those moves.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们也为两位玩家固定了移动，保存在**humanPlayer类**中。以下是基于这些移动的输出。
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 请查看我们的Golang高级教程。本系列教程详细且我们尽力用示例覆盖所有概念。本教程适合希望掌握并深入理解Golang的读者 - [Golang高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you -[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解所有设计模式如何在Golang中实现。如果是，那么这篇文章就是为你准备的 - [所有设计模式Golang](https://golangbyexample.com/all-design-patterns-golang/)
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
