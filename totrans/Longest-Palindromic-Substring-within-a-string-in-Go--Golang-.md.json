["```\ncabae\n```", "```\nlen(i,j) = 2 + len(i+1, j-1)\n```", "```\nlen(i,j) = max(len(i+1,j), len(i,j-1)\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n\t\"unicode/utf8\"\n)\n\nfunc main() {\n\toutput := longestPalindrome(\"cabae\")\n\tfmt.Println(output)\n}\n\nfunc longestPalindrome(s string) string {\n\tstringLength := utf8.RuneCountInString(s)\n\tisPalindromeMatrix := make([][]int, stringLength)\n\tfor i := range isPalindromeMatrix {\n\t\tisPalindromeMatrix[i] = make([]int, stringLength)\n\t}\n\n\tfor i, outer := range isPalindromeMatrix {\n\t\tfor j := range outer {\n\t\t\tif i == j {\n\t\t\t\tisPalindromeMatrix[i][j] = 1\n\t\t\t}\n\n\t\t}\n\t}\n\n\tpalindromeLengthMatrix := make([][]int, stringLength)\n\tfor i := range palindromeLengthMatrix {\n\t\tpalindromeLengthMatrix[i] = make([]int, stringLength)\n\t}\n\n\tfor i, outer := range palindromeLengthMatrix {\n\t\tfor j := range outer {\n\t\t\tif i == j {\n\t\t\t\tpalindromeLengthMatrix[i][j] = 1\n\t\t\t}\n\n\t\t}\n\t}\n\n\tfor len := 2; len <= stringLength; len++ {\n\t\tfor i := 0; i <= stringLength-len; i++ {\n\t\t\tj := i + len - 1\n\n\t\t\tif s[i] == s[j] {\n\t\t\t\tif len == 2 {\n\t\t\t\t\tisPalindromeMatrix[i][j] = 1\n\t\t\t\t\tpalindromeLengthMatrix[i][j] = 2\n\t\t\t\t} else {\n\t\t\t\t\tif isPalindromeMatrix[i+1][j-1] == 1 {\n\t\t\t\t\t\tisPalindromeMatrix[i][j] = 1\n\t\t\t\t\t\tpalindromeLengthMatrix[i][j] = 2 + palindromeLengthMatrix[i+1][j-1]\n\t\t\t\t\t} else {\n\t\t\t\t\t\tisPalindromeMatrix[i][j] = -1\n\t\t\t\t\t\tpalindromeLengthMatrix[i][j] = int(math.Max(float64(palindromeLengthMatrix[i+1][j]), float64(palindromeLengthMatrix[i][j-1])))\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tisPalindromeMatrix[i][j] = -1\n\t\t\t}\n\n\t\t}\n\t}\n\n\tmax_row_index := 0\n\tmax_column_index := 0\n\tmax := 0\n\n\tfor i, outer := range palindromeLengthMatrix {\n\t\tfor j := range outer {\n\t\t\tif palindromeLengthMatrix[i][j] > max && isPalindromeMatrix[i][j] == 1 {\n\t\t\t\tmax = palindromeLengthMatrix[i][j]\n\t\t\t\tmax_row_index = i\n\t\t\t\tmax_column_index = j\n\t\t\t}\n\t\t}\n\t}\n\n\treturn s[max_row_index : max_column_index+1]\n}\n```", "```\naba\n```"]