- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:35:23'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Println vs Print vs Printf in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/println-printf-print-golang/](https://golangbyexample.com/println-printf-print-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[About Println function](#About_Println_function "About Println function")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[About Print function](#About_Print_function "About Print function")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[About Printf function](#About_Printf_function "About Printf function")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Printing a string variable](#Printing_a_string_variable "Printing a string
    variable")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Printing an integer](#Printing_an_integer "Printing an integer")'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Printing a struct](#Printing_a_struct "Printing a struct")*  *## **Overview**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Println**, **Print,** and **Printf** are defined in the **fmt** package and
    are used to format a string and write to standard output'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://golang.org/pkg/fmt/](https://golang.org/pkg/fmt/)'
  prefs: []
  type: TYPE_NORMAL
- en: The basic difference between them is
  prefs: []
  type: TYPE_NORMAL
- en: '**Println** formats the string using the default format specifier adds a new
    line after the string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Print** formats the string using the default format specifier but does not
    add a new line after the string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Printf** formats the string using a custom specifier. It also doesn’t add
    a new line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s see each of them in detail with examples
  prefs: []
  type: TYPE_NORMAL
- en: '**About Println function**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is the function prototype of **Println**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Println** takes a variable number of arguments where each argument is an
    empty interface. It returns the number of characters printed and any error if
    happens. Since the argument type is an empty interface we can pass any data type
    to it. We can pass a string, int, float, struct, or any other data type. Each
    of the arguments to the **Println** function is formatted according to the default
    format specifier of that argument type. For example, the struct will be formatted
    according to the below specifier'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This format specifier only prints the Value part in the struct. Let’s see an
    example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Some important points to note about the **Println** function
  prefs: []
  type: TYPE_NORMAL
- en: It appends new line at the end. That is why each of the output is on a different
    line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of the arguments will be separated by space in the output. That is why
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: prints
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Space is introduced automatically between the two arguments.
  prefs: []
  type: TYPE_NORMAL
- en: It returns the number of characters printed or any error if happens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: will output below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Number of **bytesPrinted** is 14 as 14 characters are outputted
  prefs: []
  type: TYPE_NORMAL
- en: '**About Print function**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Function prototype of **Print**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The **Print** function is exactly the same as the **Println** function other
    than two differences
  prefs: []
  type: TYPE_NORMAL
- en: It does not append a new line at the end. We need to use the new line identifier
    to add a new line “\n”.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Space is only added between the arguments if neither of the operands is a string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s see an example for the same
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Some important points to note about the **Print** function
  prefs: []
  type: TYPE_NORMAL
- en: It does not append a new line at the end. That is why need to use **“\n”** for
    adding a new line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It only adds space between two arguments if each of them is a non-string. That
    is why
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: prints
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: while
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: prints
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: It also returns the number of characters printed and any error if happens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**About Printf function**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Function prototype of **Printf**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**Printf** is also a variadic function meaning that it can have multiple arguments. There
    are two important points about its argument list'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the first argument is a **format** or **template** string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next is a variable number of arguments. Each of the argument in this list
    could be string, int, struct, or anything. Due to same reason as above that is
    why it is an empty interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **format** or **template** string contains the actual string that needs
    to be formatted plus some formating verbs. These formating verbs tell how the
    trailing arguments will be formatted in the final string.  So basically the format
    string argument contains certain symbols which are replaced by trailing arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Eg
  prefs: []
  type: TYPE_NORMAL
- en: '**Printing a string variable**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**%s** symbol is used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**Printing an integer**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**%d** symbol is used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Printing a struct**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For example, there are three format specifiers for printing a struct.
  prefs: []
  type: TYPE_NORMAL
- en: '**%v** – It will print only values. The field name will not be printed. This
    is the default way of printing a struct when using Println'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**%+v – **It will print both field and value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**%#v – **It will print the struct, also both field name and value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That is why
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: prints below respectively
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: It is as per the explanation above.
  prefs: []
  type: TYPE_NORMAL
- en: Also, note that this function returns the number of characters printed and any
    error if happens. Unlike **Println** it does add a new line. You will have to
    add **“\n”** explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the working program for the same
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Notice that in below **Printf**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**%s** is replaced by name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**%d** is replaced by age.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So basically the symbols or verbs in the format string argument are replaced
    by trailing arguments in order**If the number of format specifiers in the format
    string does not match the number of next variable arguments then the format specifier
    will be printed as is. For example, in the below code, we have two format specifier**
  prefs: []
  type: TYPE_NORMAL
- en: '***   **%d**'
  prefs: []
  type: TYPE_NORMAL
- en: '**%s**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While the next variable number of arguments is only one. Hence when we print
    it then it will print the second format specifier as is with MISSING as warning
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Also, check out our Golang advance tutorial Series – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
