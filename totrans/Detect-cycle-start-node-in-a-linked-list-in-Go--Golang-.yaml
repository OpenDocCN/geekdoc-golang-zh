- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:46:48'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Detect cycle start node in a linked list in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/cycle-start-node-linked-list-go/](https://golangbyexample.com/cycle-start-node-linked-list-go/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Program](#Program "Program")*  *## **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The objective is to find out the cycle start node in a given linked list. A
    cycle exists in a linked list if  the last node in the linked list points to another
    node in the front
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/37e30f9ef9a9259067409d35628db09d.png)'
  prefs: []
  type: TYPE_IMG
- en: The linked list above has a cycle. The cycle start node is node 2\. Below is
    the approach we can follow
  prefs: []
  type: TYPE_NORMAL
- en: First, detect whether the given linked list has a cycle or not. Have two pointers.
    One is the slow pointer and the other is a fast pointer. Both point to the head
    node initially
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now move the slow pointer by 1 node and move the fast pointer by 2 nodes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If slow and fast pointers are the same at any point in time then the linked
    list has cyle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fast pointer and a slow pointer can only meet at a node that is in the cycle.
    Let’s assume they meet at node 3\. Now get the length of the cycle. The length
    is 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then keep one pointer at the head of the node and the other pointer at a distance
    of cycle length from it. So one pointer will be added at node 1 and another pointer
    will be at node 4.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move both the pointers until they are the same. They will meet at the cycle
    start node which is Node 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Program**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is the program for the same.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  prefs: []
  type: TYPE_NORMAL
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you -[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
