- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:19:59'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:19:59
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Nested Struct in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go (Golang) 中的嵌套结构体
- en: 来源：[https://golangbyexample.com/nested-struct-golang/](https://golangbyexample.com/nested-struct-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/nested-struct-golang/](https://golangbyexample.com/nested-struct-golang/)
- en: A struct can have an another struct nested in it. Let’s see an example of a
    nested struct. In below **employee** struct has **address** struct nested it in.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一个结构体可以嵌套另一个结构体。让我们来看一个嵌套结构体的例子。在下面的**employee**结构体中嵌套了**address**结构体。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice how nested struct fields are accessed.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 注意如何访问嵌套结构体字段。
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)'
