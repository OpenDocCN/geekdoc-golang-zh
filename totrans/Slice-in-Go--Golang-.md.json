["```\ntype SliceHeader struct {\n        Pointer uintptr\n        Len  int\n        Cap  int\n}\n```", "```\ns := []int\n```", "```\ns := []int{1,2}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := []int{}\n    fmt.Println(len(sample))\n    fmt.Println(cap(sample))\n    fmt.Println(sample)\n\n    letters := []string{\"a\", \"b\", \"c\"}\n    fmt.Println(len(letters))\n    fmt.Println(cap(letters))\n    fmt.Println(letters)\n}\n```", "```\n0\n0\n[]\n\n3\n3\n[a b c]\n```", "```\n[n]sample[start:end]\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := [5]int{1, 2, 3, 4, 5}\n\n    //Both start and end\n    num1 := numbers[2:4]\n    fmt.Println(\"Both start and end\")\n    fmt.Printf(\"num1=%v\\n\", num1)\n    fmt.Printf(\"length=%d\\n\", len(num1))\n    fmt.Printf(\"capacity=%d\\n\", cap(num1))\n\n    //Only start\n    num2 := numbers[2:]\n    fmt.Println(\"\\nOnly start\")\n    fmt.Printf(\"num1=%v\\n\", num2)\n    fmt.Printf(\"length=%d\\n\", len(num2))\n    fmt.Printf(\"capacity=%d\\n\", cap(num2))\n\n    //Only end\n    num3 := numbers[:3]\n    fmt.Println(\"\\nOnly end\")\n    fmt.Printf(\"num1=%v\\n\", num3)\n    fmt.Printf(\"length=%d\\n\", len(num3))\n    fmt.Printf(\"capacity=%d\\n\", cap(num3))\n\n    //None\n    num4 := numbers[:]\n    fmt.Println(\"\\nOnly end\")\n    fmt.Printf(\"num1=%v\\n\", num4)\n    fmt.Printf(\"length=%d\\n\", len(num4))\n    fmt.Printf(\"capacity=%d\\n\", cap(num4))\n}\n```", "```\nBoth start and end\nnum1=[3 4]\nlength=2\ncapacity=3\n\nOnly start\nnum1=[3 4 5]\nlength=3\ncapacity=3\n\nOnly end\nnum1=[1 2 3]\nlength=3\ncapacity=5\n\nOnly end\nnum1=[1 2 3 4 5]\nlength=5\ncapacity=5\n```", "```\nnumbers[3] = 8\nfmt.Printf(\"num1=%v\\n\", num2)\nfmt.Printf(\"num3=%v\\n\", num3)\nfmt.Printf(\"num4=%v\\n\", num4)\n```", "```\nnum1=[3 8 5]\nnum3=[1 2 3 8]\nnum4=[1 2 3 8 5]\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := []int{1, 2, 3, 4, 5}\n\n    //Both start and end\n    num1 := numbers[2:4]\n    fmt.Println(\"Both start and end\")\n    fmt.Printf(\"num1=%v\\n\", num1)\n    fmt.Printf(\"length=%d\\n\", len(num1))\n    fmt.Printf(\"capacity=%d\\n\", cap(num1))\n\n    //Only start\n    num2 := numbers[2:]\n    fmt.Println(\"\\nOnly start\")\n    fmt.Printf(\"num1=%v\\n\", num2)\n    fmt.Printf(\"length=%d\\n\", len(num2))\n    fmt.Printf(\"capacity=%d\\n\", cap(num2))\n\n    //Only end\n    num3 := numbers[:3]\n    fmt.Println(\"\\nOnly end\")\n    fmt.Printf(\"num1=%v\\n\", num3)\n    fmt.Printf(\"length=%d\\n\", len(num3))\n    fmt.Printf(\"capacity=%d\\n\", cap(num3))\n\n    //None\n    num4 := numbers[:]\n    fmt.Println(\"\\nOnly end\")\n    fmt.Printf(\"num1=%v\\n\", num4)\n    fmt.Printf(\"length=%d\\n\", len(num4))\n    fmt.Printf(\"capacity=%d\\n\", cap(num4))\n}\n```", "```\nBoth start and end\nnum1=[3 4]\nlength=2\ncapacity=3\n\nOnly start\nnum1=[3 4 5]\nlength=3\ncapacity=3\n\nOnly end\nnum1=[1 2 3]\nlength=3\ncapacity=5\n\nOnly end\nnum1=[1 2 3 4 5]\nlength=5\ncapacity=5\n```", "```\nnumbers[3] = 8\nfmt.Printf(\"num1=%v\\n\", num2)\nfmt.Printf(\"num3=%v\\n\", num3)\nfmt.Printf(\"num4=%v\\n\", num4)\n```", "```\nnum1=[3 8 5]\nnum3=[1 2 3 8]\nnum4=[1 2 3 8 5]\n```", "```\nfunc make([]{type}, length, capacity int) []{type}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := make([]int, 3, 5)\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n\n    //With capacity ommited\n    numbers = make([]int, 3)\n    fmt.Println(\"\\nCapacity Ommited\")\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n}\n```", "```\nnumbers=[0 0 0]\nlength=3\ncapacity=5\n\nCapacity Ommited\nnumbers=[0 0 0]\nlength=3\ncapacity=3\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := new([]int)\n    fmt.Printf(\"numbers=%v\\n\", *numbers)\n    fmt.Printf(\"length=%d\\n\", len(*numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(*numbers))\n}\n```", "```\nnumbers=[]\nlength=0\ncapacity=0\n```", "```\nnumbers := make([]int, 3, 5)\n```", "```\nnumbers[4] = 5\n```", "```\nnumbers = numbers[0:5]\n```", "```\nnumbers = numbers[0:2]\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := make([]int, 3, 5)\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n\n    //This line will cause a runtime error index out of range [4] with length 3\n    //numbers[4] = 5\n\n    //Increasing the length from 3 to 5\n    numbers = numbers[0:5]\n    fmt.Println(\"\\nIncreasing length from 3 to 5\")\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n\n    //Decresing the length from 3 to 2\n    numbers = numbers[0:2]\n    fmt.Println(\"\\nDecreasing length from 3 to 2\")\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n}\n```", "```\nnumbers=[0 0 0]\nlength=3\ncapacity=5\n\nIncreasing length from 3 to 5\nnumbers=[0 0 0 0 0]\nlength=5\ncapacity=5\n\nDecreasing length from 3 to 2\nnumbers=[0 0]\nlength=2\ncapacity=5\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    array := [5]int{1, 2, 3, 4, 5}\n    slice := array[:]\n\n    //Modifying the slice\n    slice[1] = 7\n    fmt.Println(\"Modifying Slice\")\n    fmt.Printf(\"Array=%v\\n\", array)\n    fmt.Printf(\"Slice=%v\\n\", slice)\n\n    //Modifying the array. Would reflect back in slice too\n    array[1] = 2\n    fmt.Println(\"\\nModifying Underlying Array\")\n    fmt.Printf(\"Array=%v\\n\", array)\n    fmt.Printf(\"Slice=%v\\n\", slice)\n}\n```", "```\nModifying Slice\nArray=[1 7 3 4 5]\nSlice=[1 7 3 4 5]\n\nModifying Underlying Array\nArray=[1 2 3 4 5]\nSlice=[1 2 3 4 5]\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    letters := []string{\"a\", \"b\", \"c\"}\n    //Using for loop\n    fmt.Println(\"Using for loop\")\n    len := len(letters)\n    for i := 0; i < len; i++ {\n        fmt.Println(letters[i])\n    }\n\n    //Using for-range operator\n    fmt.Println(\"\\nUsing for-range loop\")\n    for i, letter := range letters {\n        fmt.Printf(\"%d %s\\n\", i, letter)\n    }\n}\n```", "```\nUsing for loop\na\nb\nc\n\nUsing for-range loop\n0 a\n1 b\n2 c\n```", "```\nfunc append(slice []Type, elems ...Type) []Type\n```", "```\nelems ...Type\n```", "```\nnumbers := []int{1,2}\nnumbers = append(numbers, 4) //Slice will become [1, 2, 4]\n```", "```\nnumbers := []int{1,2}\nnumbers = append(numbers, 3, 4, 5) //Slice will become [1, 2, 3, 4, 5]\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := make([]int, 3, 5)\n    numbers[0] = 1\n    numbers[1] = 2\n    numbers[2] = 3\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n\n    //Append number 4\n    numbers = append(numbers, 4)\n    fmt.Println(\"\\nAppend Number 4\")\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n\n    //Append number 5\n    numbers = append(numbers, 4)\n    fmt.Println(\"\\nAppend Number 5\")\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n}\n```", "```\nnumbers=[1 2 3]\nlength=3\ncapacity=5\n\nAppend Number 4\nnumbers=[1 2 3 4]\nlength=4\ncapacity=5\n\nAppend Number 5\nnumbers=[1 2 3 4 4]\nlength=5\ncapacity=5\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers := make([]int, 3, 3)\n    numbers[0] = 1\n    numbers[1] = 2\n    numbers[2] = 3\n\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n\n    //Append number 4\n    numbers = append(numbers, 4)\n    fmt.Println(\"\\nAppend Number 4\")\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n}\n```", "```\nnumbers=[1 2 3]\nlength=3\ncapacity=3\n\nAppend Number 4\nnumbers=[1 2 3 4]\nlength=4\ncapacity=6\n```", "```\nres := append(slice1, slice2...)\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    numbers1 := []int{1, 2}\n    numbers2 := []int{3, 4}\n    numbers := append(numbers1, numbers2...)\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n}\n```", "```\nnumbers=[1 2 3 4]\nlength=4\ncapacity=4\n```", "```\nfunc copy(dst, src []Type) int\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    src := []int{1, 2, 3, 4, 5}\n    dst := make([]int, 5)\n\n    numberOfElementsCopied := copy(dst, src)\n    fmt.Printf(\"Number Of Elements Copied: %d\\n\", numberOfElementsCopied)\n    fmt.Printf(\"dst: %v\\n\", dst)\n    fmt.Printf(\"src: %v\\n\", src)\n\n    //After changing numbers2\n    dst[0] = 10\n    fmt.Println(\"\\nAfter changing dst\")\n    fmt.Printf(\"dst: %v\\n\", dst)\n    fmt.Printf(\"src: %v\\n\", src)\n}\n```", "```\nNumber Of Elements Copied: 5\ndst: [1 2 3 4 5]\nsrc: [1 2 3 4 5]\n\nAfter changing dst\ndst: [10 2 3 4 5]\nsrc: [1 2 3 4 5]\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var numbers []int\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n    numbers = append(numbers, 1)\n    fmt.Printf(\"numbers=%v\\n\", numbers)\n    fmt.Printf(\"length=%d\\n\", len(numbers))\n    fmt.Printf(\"capacity=%d\\n\", cap(numbers))\n}\n```", "```\nnumbers=[]\nlength=0\ncapacity=0\nnumbers=[1]\nlength=1\ncapacity=1\n```", "```\noneDSlice := make([]int, 2)\n```", "```\ntwoDSlice = make([][]int, 2)\n```", "```\nfor i := range twoDSlice {\n    twoDSlice[i] = make([]int, 3)\n}\n```", "```\nvar twoDSlice = make([][]int, 2)\ntwoDSlice[0] = []int{1, 2, 3}\ntwoDSlice[1] = []int{4, 5, 6}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    twoDSlice1 := make([][]int, 3)\n    for i := range twoDSlice1 {\n        twoDSlice1[i] = make([]int, 3)\n    }\n    fmt.Printf(\"Number of rows in slice: %d\\n\", len(twoDSlice1))\n    fmt.Printf(\"Number of columns in arsliceray: %d\\n\", len(twoDSlice1[0]))\n    fmt.Printf(\"Total number of elements in slice: %d\\n\", len(twoDSlice1)*len(twoDSlice1[0]))\n    fmt.Println(\"First Slice\")\n    for _, row := range twoDSlice1 {\n        for _, val := range row {\n            fmt.Println(val)\n        }\n    }\n    twoDSlice2 := make([][]int, 2)\n    twoDSlice2[0] = []int{1, 2, 3}\n    twoDSlice2[1] = []int{4, 5, 6}\n    fmt.Println()\n    fmt.Printf(\"Number of rows in slice: %d\\n\", len(twoDSlice2))\n    fmt.Printf(\"Number of columns in arsliceray: %d\\n\", len(twoDSlice2[0]))\n    fmt.Printf(\"Total number of elements in slice: %d\\n\", len(twoDSlice2)*len(twoDSlice2[0]))\n    fmt.Println(\"Second Slice\")\n    for _, row := range twoDSlice2 {\n        for _, val := range row {\n            fmt.Println(val)\n        }\n    }\n}\n```", "```\nNumber of rows in slice: 2\nNumber of columns in arsliceray: 3\nTotal number of elements in slice: 6\nFirst Slice\n0\n0\n0\n0\n0\n0\n\nNumber of rows in slice: 2\nNumber of columns in arsliceray: 3\nTotal number of elements in slice: 6\nSecond Slice\n1\n2\n3\n4\n5\n6\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    twoDSlice := make([][]int, 2)\n    twoDSlice[0] = []int{1, 2, 3}\n    twoDSlice[1] = []int{4, 5}\n\n    fmt.Printf(\"Number of rows in slice: %d\\n\", len(twoDSlice))\n    fmt.Printf(\"Len of first row: %d\\n\", len(twoDSlice[0]))\n    fmt.Printf(\"Len of second row: %d\\n\", len(twoDSlice[1]))\n    fmt.Println(\"Traversing slice\")\n    for _, row := range twoDSlice {\n        for _, val := range row {\n            fmt.Println(val)\n        }\n    }\n}\n```", "```\nNumber of rows in slice: 2\nLen of first row: 3\nLen of second row: 2\nTraversing slice\n1\n2\n3\n4\n5\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    sample := make([][][]int, 2)\n    for i := range sample {\n        sample[i] = make([][]int, 2)\n        for j := range sample[i] {\n            sample[i][j] = make([]int, 3)\n        }\n    }\n\n    fmt.Printf(\"Length of first dimension: %d\\n\", len(sample))\n    fmt.Printf(\"Length of second dimension: %d\\n\", len(sample[0]))\n    fmt.Printf(\"Length of third dimension: %d\\n\", len(sample[0][0]))\n    fmt.Printf(\"Overall Dimension of the slice: %d*%d*%d\\n\", len(sample), len(sample[0]), len(sample[0][0]))\n    fmt.Printf(\"Total number of elements in slice: %d\\n\", len(sample)*len(sample[0])*len(sample[0][0]))\n    for _, first := range sample {\n        for _, second := range first {\n            for _, value := range second {\n                fmt.Println(value)\n            }\n        }\n    }\n}\n```", "```\nLength of first dimension: 2\nLength of second dimension: 2\nLength of third dimension: 3\nOverall Dimension of the slice: 2*2*3\nTotal number of elements in slice: 12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n```"]