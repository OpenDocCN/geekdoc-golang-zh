- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:19:55'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Anonymous Fields in a Struct in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/anonymous-fields-struct-golang/](https://golangbyexample.com/anonymous-fields-struct-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A struct can have anonymous fields as well, meaning a field having no name.
    The type will become the field name. In below example, **string** will be the
    field name as well
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The anonymous field can also be accessed and assigned a value
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Nested Struct**'
  prefs: []
  type: TYPE_NORMAL
- en: A struct can have another struct nested in it. Let’s see an example of a nested
    struct. In below **employee** struct has **address** struct nested it in.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Notice how nested struct fields are accessed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Anonymous nested struct fields](#Anonymous_nested_struct_fields "Anonymous
    nested struct fields")*  *# **Anonymous nested struct fields**'
  prefs: []
  type: TYPE_NORMAL
- en: The nested struct field can also be anonymous. Also, in this case, nested struct’s
    fields are directly accessed. So below is valid
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: It is also to be noted that below is still valid in this case
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Let’s see a program
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Notice in above program that city field of address struct can be accessed in
    two ways
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Similar for the country field of the address struct.
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
