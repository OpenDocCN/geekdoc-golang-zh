["```\npackage main\n\nimport \"fmt\"\n\ntype vendingMachine struct {\n    hasItem       state\n    itemRequested state\n    hasMoney      state\n    noItem        state\n\n    currentState state\n\n    itemCount int\n    itemPrice int\n}\n\nfunc newVendingMachine(itemCount, itemPrice int) *vendingMachine {\n    v := &vendingMachine{\n        itemCount: itemCount,\n        itemPrice: itemPrice,\n    }\n    hasItemState := &hasItemState{\n        vendingMachine: v,\n    }\n    itemRequestedState := &itemRequestedState{\n        vendingMachine: v,\n    }\n    hasMoneyState := &hasMoneyState{\n        vendingMachine: v,\n    }\n    noItemState := &noItemState{\n        vendingMachine: v,\n    }\n\n    v.setState(hasItemState)\n    v.hasItem = hasItemState\n    v.itemRequested = itemRequestedState\n    v.hasMoney = hasMoneyState\n    v.noItem = noItemState\n    return v\n}\n\nfunc (v *vendingMachine) requestItem() error {\n    return v.currentState.requestItem()\n}\n\nfunc (v *vendingMachine) addItem(count int) error {\n    return v.currentState.addItem(count)\n}\n\nfunc (v *vendingMachine) insertMoney(money int) error {\n    return v.currentState.insertMoney(money)\n}\n\nfunc (v *vendingMachine) dispenseItem() error {\n    return v.currentState.dispenseItem()\n}\n\nfunc (v *vendingMachine) setState(s state) {\n    v.currentState = s\n}\n\nfunc (v *vendingMachine) incrementItemCount(count int) {\n    fmt.Printf(\"Adding %d items\\n\", count)\n    v.itemCount = v.itemCount + count\n}\n```", "```\npackage main\n\ntype state interface {\n    addItem(int) error\n    requestItem() error\n    insertMoney(money int) error\n    dispenseItem() error\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype noItemState struct {\n    vendingMachine *vendingMachine\n}\n\nfunc (i *noItemState) requestItem() error {\n    return fmt.Errorf(\"Item out of stock\")\n}\n\nfunc (i *noItemState) addItem(count int) error {\n    i.vendingMachine.incrementItemCount(count)\n    i.vendingMachine.setState(i.vendingMachine.hasItem)\n    return nil\n}\n\nfunc (i *noItemState) insertMoney(money int) error {\n    return fmt.Errorf(\"Item out of stock\")\n}\nfunc (i *noItemState) dispenseItem() error {\n    return fmt.Errorf(\"Item out of stock\")\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype hasItemState struct {\n    vendingMachine *vendingMachine\n}\n\nfunc (i *hasItemState) requestItem() error {\n    if i.vendingMachine.itemCount == 0 {\n        i.vendingMachine.setState(i.vendingMachine.noItem)\n        return fmt.Errorf(\"No item present\")\n    }\n    fmt.Printf(\"Item requestd\\n\")\n    i.vendingMachine.setState(i.vendingMachine.itemRequested)\n    return nil\n}\n\nfunc (i *hasItemState) addItem(count int) error {\n    fmt.Printf(\"%d items added\\n\", count)\n    i.vendingMachine.incrementItemCount(count)\n    return nil\n}\n\nfunc (i *hasItemState) insertMoney(money int) error {\n    return fmt.Errorf(\"Please select item first\")\n}\nfunc (i *hasItemState) dispenseItem() error {\n    return fmt.Errorf(\"Please select item first\")\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype itemRequestedState struct {\n    vendingMachine *vendingMachine\n}\n\nfunc (i *itemRequestedState) requestItem() error {\n    return fmt.Errorf(\"Item already requested\")\n}\n\nfunc (i *itemRequestedState) addItem(count int) error {\n    return fmt.Errorf(\"Item Dispense in progress\")\n}\n\nfunc (i *itemRequestedState) insertMoney(money int) error {\n    if money < i.vendingMachine.itemPrice {\n        fmt.Errorf(\"Inserted money is less. Please insert %d\", i.vendingMachine.itemPrice)\n    }\n    fmt.Println(\"Money entered is ok\")\n    i.vendingMachine.setState(i.vendingMachine.hasMoney)\n    return nil\n}\n\nfunc (i *itemRequestedState) dispenseItem() error {\n    return fmt.Errorf(\"Please insert money first\")\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype hasMoneyState struct {\n    vendingMachine *vendingMachine\n}\n\nfunc (i *hasMoneyState) requestItem() error {\n    return fmt.Errorf(\"Item dispense in progress\")\n}\n\nfunc (i *hasMoneyState) addItem(count int) error {\n    return fmt.Errorf(\"Item dispense in progress\")\n}\n\nfunc (i *hasMoneyState) insertMoney(money int) error {\n    return fmt.Errorf(\"Item out of stock\")\n}\n\nfunc (i *hasMoneyState) dispenseItem() error {\n    fmt.Println(\"Dispensing Item\")\n    i.vendingMachine.itemCount = i.vendingMachine.itemCount - 1\n    if i.vendingMachine.itemCount == 0 {\n        i.vendingMachine.setState(i.vendingMachine.noItem)\n    } else {\n        i.vendingMachine.setState(i.vendingMachine.hasItem)\n    }\n    return nil\n}\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n)\n\nfunc main() {\n    vendingMachine := newVendingMachine(1, 10)\n    err := vendingMachine.requestItem()\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n    err = vendingMachine.insertMoney(10)\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n    err = vendingMachine.dispenseItem()\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n\n    fmt.Println()\n    err = vendingMachine.addItem(2)\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n\n    fmt.Println()\n\n    err = vendingMachine.requestItem()\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n\n    err = vendingMachine.insertMoney(10)\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n\n    err = vendingMachine.dispenseItem()\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n}\n```", "```\nItem requestd\nMoney entered is ok\nDispensing Item\n\nAdding 2 items\n\nItem requestd\nMoney entered is ok\nDispensing Item\n```"]