- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:36:31'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:36:31
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Understanding Fprintln function in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Go（Golang）中的Fprintln函数
- en: 来源：[https://golangbyexample.com/fprintln-golang/](https://golangbyexample.com/fprintln-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/fprintln-golang/](https://golangbyexample.com/fprintln-golang/)
- en: '![fprintln image](img/3cd9912b7a0733f8200683fac3715644.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![fprintln 图像](img/3cd9912b7a0733f8200683fac3715644.png)'
- en: Table of Contents
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *## **Overview**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *## **概述**'
- en: '**Fprintln** is defined in the **fmt** package and is used to format a string
    using the default format specifier and write it to **io.Writer** instance passed
    to it. It also adds a new line.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**Fprintln**定义在**fmt**包中，用于使用默认格式说明符格式化字符串，并将其写入传递给它的**io.Writer**实例。它还添加了一个新行。'
- en: '[https://golang.org/pkg/fmt/#Fprintln](https://golang.org/pkg/fmt/#Fprintln)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://golang.org/pkg/fmt/#Fprintln](https://golang.org/pkg/fmt/#Fprintln)'
- en: Below is the function prototype of **Fprintln**
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是**Fprintln**的函数原型
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Fprintln** is also a variadic function meaning that it can have multiple
    arguments. Here are the details about its arguments'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Fprintln**也是一个可变参数函数，这意味着它可以有多个参数。这里是关于其参数的详细信息。'
- en: The first argument is the **io.Writer** instance to which it writes
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数是要写入的**io.Writer**实例
- en: The next is a variable number of arguments. Each of the arguments in this list
    could be string, int, struct, or anything. That is why it is an empty interface.
    Each of these arguments is formatted using the default specifier
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来是可变数量的参数。这个列表中的每个参数可以是字符串、整数、结构体或其他任何东西。这就是它是一个空接口的原因。每个参数都使用默认说明符进行格式化。
- en: '**Fprintln** formats the string using the default format specifier adds a new
    line after the string. **Fprintln** takes a variable number of arguments where
    each argument is an empty interface. It returns the number of characters printed
    and any error if happens. Since the argument type is an empty interface we can
    pass any data type to it. We can pass a string, int, float, struct, or any other
    data type. Each of the arguments to the **Fprintln** function is formatted according
    to the default format specifier of that argument type. For example, the struct
    will be formatted according to the below specifier'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**Fprintln**使用默认格式说明符格式化字符串，并在字符串后添加新行。**Fprintln**接受可变数量的参数，每个参数都是一个空接口。它返回打印的字符数量和发生的任何错误。由于参数类型是空接口，我们可以传递任何数据类型。我们可以传递字符串、整数、浮点数、结构体或任何其他数据类型。每个传递给**Fprintln**函数的参数都根据该参数类型的默认格式说明符进行格式化。例如，结构体将根据以下说明符进行格式化。'
- en: There is also another function **Fprint** provided by **fmt** package which
    is the same as **Fprintln.** The only difference being
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**fmt**包中还有另一个函数**Fprint**，与**Fprintln**相同。唯一的区别是'
- en: '**Fprintln** appends a new line while **Fprint** does not append a new line.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Fprintln**在末尾添加新行，而**Fprint**则不添加新行。'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This format specifier only prints the Value part in the struct. Let’s see an
    example.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 该格式说明符仅打印结构体中的值部分。让我们看一个例子。
- en: '**Program**'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Some important points to note about the **FPrintln** function
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 关于**FPrintln**函数的一些重要事项
- en: In all the **Fprintln** functions above we pass it the instance of **os.Stdout**
    which implements the **io.Writer** interface. Basically with **os.Stdout**, **Fprintln**
    writes to standard output. This is how **os. Stdout** is defined.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在上述所有**Fprintln**函数中，我们将**os.Stdout**的实例传递给它，该实例实现了**io.Writer**接口。基本上，使用**os.Stdout**，**Fprintln**写入标准输出。这就是**os.Stdout**的定义。
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It appends a new line at the end. That is why each of the output is on a different
    line
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在末尾添加一个新行。这就是为什么每个输出在不同的行上
- en: Each of the arguments will be separated by space in the output. That is why
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出中每个参数将以空格分隔。这就是为什么
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: prints
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 打印
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Space is introduced automatically between the two arguments.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个参数之间自动引入空格。
- en: It returns the number of characters printed or any error if happens
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它返回打印的字符数量或发生的任何错误
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: will output below
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将输出如下
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The number of **bytesPrinted** is 14 as 14 characters are outputted
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**bytesPrinted**的数量是14，因为输出了14个字符'
- en: '**Fprintln** can also be used to write to a file. Since the file instance in
    golang implements the **io.Writer**, this is not a problem. Below is the program
    for the same'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**Fprintln**还可以用于写入文件。由于文件实例在Golang中实现了**io.Writer**，这不是问题。以下是相应的程序'
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Output**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: It will create file name temp.txt in the current directory with the below contents.
    In this program we replaced **os.Stdou**t with the file created.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 它将在当前目录中创建名为temp.txt的文件，内容如下。在这个程序中，我们将**os.Stdou**t替换为创建的文件。
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Also, check out our Golang advance tutorial Series – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，查看我们的Golang进阶教程系列 – [Golang进阶教程](https://golangbyexample.com/golang-comprehensive-tutorial/)。
- en: '[fprintln](https://golangbyexample.com/tag/fprintln/)*   [go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[fprintln](https://golangbyexample.com/tag/fprintln/)*   [go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
