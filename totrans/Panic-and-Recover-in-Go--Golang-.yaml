- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:26:06'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:26:06
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Panic and Recover in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 语言中的 Panic 和 Recover
- en: 来源：[https://golangbyexample.com/panic-and-recover-golang/](https://golangbyexample.com/panic-and-recover-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/panic-and-recover-golang/](https://golangbyexample.com/panic-and-recover-golang/)
- en: This is the  chapter 28 and also the last chapter of the golang comprehensive
    tutorial series. This is Refer to this link for other chapters of the series – [Golang
    Comprehensive Tutorial Series](https://golangbyexample.com/golang-comprehensive-tutorial/)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第 28 章，也是 Go 语言综合教程系列的最后一章。请参考此链接获取该系列的其他章节 – [Go 语言综合教程系列](https://golangbyexample.com/golang-comprehensive-tutorial/)
- en: '**Previous Tutorial** – [Error -Part 2](https://golangbyexample.com/error-in-golang-advanced/)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**上一个教程** – [错误 - 第 2 部分](https://golangbyexample.com/error-in-golang-advanced/)'
- en: Now let’s check out the current tutorial. Below is the table of contents for
    current tutorial.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来查看当前的教程。下面是当前教程的目录。
- en: Table of Contents
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**[概述](#Overview "概述")**'
- en: '[Runtime Error Panic](#Runtime_Error_Panic "Runtime Error Panic")'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[运行时错误 Panic](#Runtime_Error_Panic "运行时错误 Panic")'
- en: '[Calling the panic function explicitly](#Calling_the_panic_function_explicitly
    "Calling the panic function explicitly")'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[显式调用 panic 函数](#Calling_the_panic_function_explicitly "显式调用 panic 函数")'
- en: '[Panic with defer](#Panic_with_defer "Panic with defer")'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 defer 进行 Panic](#Panic_with_defer "使用 defer 进行 Panic")'
- en: '[Recover in golang](#Recover_in_golang "Recover in golang")'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Go 语言中恢复](#Recover_in_golang "在 Go 语言中恢复")'
- en: '[Panic/Recover and Goroutine](#PanicRecover_and_Goroutine "Panic/Recover and
    Goroutine")'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Panic/Recover 和 Goroutine](#PanicRecover_and_Goroutine "Panic/Recover 和 Goroutine")'
- en: '[Printing stack trace](#Printing_stack_trace "Printing stack trace")'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[打印堆栈跟踪](#Printing_stack_trace "打印堆栈跟踪")'
- en: '[Return value of the function when panic is recovered](#Return_value_of_the_function_when_panic_is_recovered
    "Return value of the function when panic is recovered")'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[当 panic 被恢复时函数的返回值](#Return_value_of_the_function_when_panic_is_recovered
    "当 panic 被恢复时函数的返回值")'
- en: '[Conclusion](#Conclusion "Conclusion")*  *# **Overview**'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[结论](#Conclusion "结论") * *# **概述**'
- en: Panic in golang is similar to the exception. Panic is meant to exit from a program
    in abnormal conditions. Panic can occur in a program in two ways
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Go 语言中的 panic 类似于异常。panic 旨在在异常条件下退出程序。panic 可以通过两种方式在程序中发生
- en: Runtime error in the program
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序中的运行时错误
- en: By calling the panic function explicitly. This can be called by the programmer
    when the program cannot continue and it has to exit
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过显式调用 panic 函数。当程序无法继续并且必须退出时，程序员可以调用此函数
- en: Go provides a special function to create a panic. Below is the syntax of the
    function
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Go 提供了一种特殊的函数来创建 panic。以下是该函数的语法
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This function can be called explicitly by the programmer to create a panic.
    It takes an empty interface as an argument.  When a panic happens in a  program
    it outputs two things
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数可以被程序员显式调用以创建 panic。它接受一个空接口作为参数。当程序发生 panic 时，它输出两件事
- en: The error message that is passed to the panic function as an argument
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传递给 panic 函数的错误信息作为参数
- en: Stack trace of where the panic happened
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: panic 发生时的堆栈跟踪
- en: '**Runtime Error Panic**'
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**运行时错误 Panic**'
- en: Runtime error in the program can happen in below cases
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 程序中的运行时错误可能发生在以下情况下
- en: Out of bounds array access
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超出范围的数组访问
- en: Calling a function on a nil pointer
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 nil 指针上调用函数
- en: Sending on a closed channel
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在关闭的通道上发送
- en: Incorrect type assertion
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不正确的类型断言
- en: Let’s see an example of runtime error caused by out of bounds array access.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个由于超出范围的数组访问导致的运行时错误示例。
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Output**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the above program we have a slice of length 2 and we are trying to access
    slice at index 3 in the **print** function. Out of bound access is not allowed
    and it will create panic as seen from the output. Notice that in the output there
    are two things
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，我们有一个长度为 2 的切片，我们试图在 **print** 函数中访问索引为 3 的切片。超出边界的访问是不允许的，这将引发 panic，如输出所示。请注意，输出中有两件事
- en: The error message
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误信息
- en: Stack trace of where the panic happened
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: panic 发生时的堆栈跟踪
- en: There are many more cases in which runtime error can happen in a program. We
    are not going to mention all of them but you get the idea
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序中可能发生运行时错误的情况还有很多。我们不会提到所有情况，但你可以理解大概
- en: '**Calling the panic function explicitly**'
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**显式调用 panic 函数**'
- en: 'Some of the cases where panic function can be called explicitly by the programmer
    are:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员可以显式调用 panic 函数的一些情况有：
- en: The function expected a valid argument but instead, a nil argument was supplied.
    In such a case, the program cannot continue and it will raise a panic for a nil
    argument passed
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该函数期望一个有效的参数，但却传入了 nil 参数。在这种情况下，程序无法继续，将为传入的 nil 参数抛出 panic。
- en: Any other scenario in which the program cannot continue.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何其他无法继续的场景。
- en: Let’s see an example.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个例子。
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Output**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the above program, we again have a function **checkAndPrint** which accepts
    a slice as an argument and an index. Then it checks whether the index passed is
    greater than the length of slice minus 1\. If it is, then it is out of bounds
    access for the slice so it panics. If not then it prints the value at that index.
    Again notice that in the output there are two things
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们再次有一个函数 **checkAndPrint**，它接受一个切片作为参数和一个索引。然后它检查传入的索引是否大于切片长度减去 1。如果是，则为切片的越界访问，因此会抛出
    panic。如果不是，则打印该索引处的值。请注意，在输出中有两件事情。
- en: The error message
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误消息
- en: Stack trace of where the panic happened
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: panic 发生位置的堆栈跟踪
- en: '**Panic with defer**'
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**使用 defer 的 Panic**'
- en: When the panic is raised in a function then the execution of that function is
    stopped and any deferred function will be executed. In fact deferred function
    of all the function calls in the stack will also be executed until all the functions
    have  returned .At that time the program will exit and it will print the panic
    message
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当函数中抛出 panic 时，该函数的执行将停止，任何已延迟的函数将被执行。实际上，堆栈中所有函数调用的延迟函数也会被执行，直到所有函数都返回。此时程序将退出，并打印
    panic 消息。
- en: So if a  defer function is present it then it will be executed and the control
    will be  returned back to the caller function which will again execute its defer
    function if present and the chain goes on until the program exists.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在 defer 函数，它将被执行，控制将返回给调用函数，如果调用函数中也有 defer 函数，则会再次执行，链条将继续，直到程序退出。
- en: Let’s see an example
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个例子。
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Output**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the above program we have a defer function first and then we manually create
    the panic. As you can see from the output that defer function got executed as
    below line is printed in the output
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们首先有一个 defer 函数，然后我们手动触发 panic。正如你在输出中看到的，defer 函数得到了执行，下面的行在输出中被打印。
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let’s understand what happens when panic happens in a program. Imagine a function
    call from **main** function to **f1** function to **f2** function
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解当程序中发生 panic 时会发生什么。想象一下从 **main** 函数到 **f1** 函数再到 **f2** 函数的函数调用。
- en: '**main**->**f1**->**f2**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**main**->**f1**->**f2**'
- en: Now let’s say that panic happens in function **f2** then below will be the sequence
    of events that will be happening
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设在函数 **f2** 中发生了 panic，那么接下来将发生的事件顺序如下。
- en: Execution of **f2** will stop. Defer functions in **f2** will be executed if
    present. Control will return to the caller which is a function **f1**.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**f2** 的执行将停止。如果 **f2** 中有 defer 函数，它将被执行。控制将返回给调用者，也就是函数 **f1**。'
- en: '**f1** function will behave in a similar way as if panic happened in that function
    and after that call will return to the caller which is **main** function. Note
    that if there are more functions in between then the process will continue up
    the stack in a similar way'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**f1** 函数将以类似的方式行为，仿佛在该函数中发生了 panic，然后控制将返回给调用者，也就是 **main** 函数。请注意，如果中间有更多函数，过程将以类似方式继续向上堆栈。'
- en: '**main** function will also behave as if panic happened in that function and
    after that, the program will crash'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**main** 函数的行为将如同在该函数中发生了 panic，之后程序将崩溃。'
- en: Once the program crashes, it will print the panic message along with this stack
    trace
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦程序崩溃，它将打印 panic 消息以及该堆栈跟踪。
- en: Let’s see a program for that
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个程序。
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Output**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the above program, panic happened in the f2 function like below
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，panic 在 **f2** 函数中发生，如下所示。
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: the defer function in f2 is called after that and it prints the below message
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**f2** 中的 defer 函数在此之后被调用，并打印以下消息。'
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Notice that as soon as the panic happens in the **f2** function, its execution
    stops therefore below line if **f2** never gets executed
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，一旦 **f2** 函数中发生 panic，其执行将停止，因此下面的代码行将不会执行 **f2**。
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Control returns to **f1** and it it has a defer function. The defer gets executed
    and it prints the below message.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 控制返回到 **f1**，如果它有 defer 函数，则会执行该 defer 函数，并打印以下消息。
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Control returns to main function after that and then the program crashes.The
    output prints the panic message along with the entire stack trace from main to
    f1 to f2.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 控制权随后返回到main函数，然后程序崩溃。输出打印了panic消息以及从main到f1再到f2的整个堆栈跟踪。
- en: '**Recover in golang**'
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**在Golang中使用Recover**'
- en: Go provides a built-in function **recover** for recovering from a panic. Below
    is the signature of this function
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Go提供了一个内置函数**recover**用于从panic中恢复。以下是该函数的签名
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We already learn above that **defer** function is the only function that is
    called after the **panic**. So it makes sense to put the **recover** function
    in the **defer** function only. If the **recover** function is not within the defer
    function then it will not stop **panic**.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解到，**defer**函数是唯一在**panic**之后被调用的函数。因此，将**recover**函数放在**defer**函数中是合理的。如果**recover**函数不在defer函数内，则不会停止**panic**。
- en: Let’s see an example of recover
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个recover的例子
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Output**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the above program we have a function **checkAndPrint** which checks and prints
    slice element at an index passed in the argument. If the index passed is greater
    than the length of the array then the program panics.  We have added a defer function
    named **handleOutIfBounds** as well at the start of the function **checkAndPrint**. 
     This function  contains  the  call to recover function as below
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，我们有一个函数**checkAndPrint**，它检查并打印传入参数中的切片元素。如果传入的索引大于数组的长度，则程序将引发panic。我们在函数**checkAndPrint**的开始处添加了一个名为**handleOutIfBounds**的defer函数。此函数包含如下的recover函数调用。
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The **recover** function will catch the panic and we can also print the message
    from the panic.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**recover**函数将捕获panic，我们还可以打印来自panic的消息。'
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: After the recover function the program continues and the control returns to
    the called function which is  **main** here. That is why we get output as
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在recover函数之后，程序继续运行，控制权返回到调用的函数，即这里的**main**。这就是为什么我们会得到如下输出
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The recover function returns the value which was passed to the panic function.
    Therefore it is a good practice to check the return value of the recover function.
    If the return value is nil then panic did not happen and recover function was
    not called with the panic. That is why we have below code in the  defer function
    **handleOutofBounds**
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: recover函数返回传递给panic函数的值。因此，检查recover函数的返回值是一种好习惯。如果返回值为nil，则表示没有发生panic，且recover函数没有与panic一起被调用。这就是为什么在defer函数**handleOutOfBounds**中有以下代码。
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here if **r** is nil then panic did not happened. So if there is no panic then
    call to recover will return nil
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果**r**为nil，则表示没有发生panic。因此，如果没有panic，则对recover的调用将返回nil。
- en: Note that if the defer function and recover function is not called from the
    panicking function then it that case also panic can be recovered in the called
    function as well. Infact it is possible to recover from panic subsequently up
    in the chain of call stack.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果defer函数和recover函数不是从引发panic的函数中调用的，那么在被调用函数中也可以恢复panic。实际上，可以在调用栈的后续链中恢复panic。
- en: Let’s see an example of this
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看这个的一个例子。
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**Output**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The above program is quite the same as the previous program other than we have
    an additional function **checkAndPrintWithRecover** which contains the call to
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的程序与前一个程序非常相似，唯一不同的是我们添加了一个额外的函数**checkAndPrintWithRecover**，其中包含对该函数的调用。
- en: defer function with recover which is **handleOutOfBounds**
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**handleOutOfBounds**的defer函数与recover
- en: calls **checkAndPrint** function
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用**checkAndPrint**函数
- en: '**So basically **checkAndPrint** function raises the panic but doesn’t have
    the recover function instead call to recover lies in the **checkAndPrintWithRecover**
    function. But still the program is able to recover from panic  as panic can also
    be recovered in the called function also and subsequently in the chain as well**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**基本上，**checkAndPrint**函数引发panic，但没有recover函数，而是对recover的调用在**checkAndPrintWithRecover**函数中。但是，程序仍然能够从panic中恢复，因为panic也可以在被调用的函数中以及随后在链中恢复。**'
- en: '**We mentioned above that if the recover function is not within defer function
    then it will not stop the panic.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们上面提到，如果recover函数不在defer函数中，则不会停止panic。**'
- en: Let’s see an example program for that
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个示例程序
- en: '[PRE23]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Output**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE24]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the above program the recover function  is not within defer function.  as
    you can see from the output that it does not stop panic and hence  you see the
    above output
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，recover函数不在defer函数中。如您所见，输出表明它没有停止panic，因此您看到了上面的输出。
- en: '**Panic/Recover and Goroutine**'
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**Panic/Recover与Goroutine**'
- en: An important point to note about be recover function is that it can only recover
    the panic happening in the same goroutine.  If the panic is happening in different 
    goroutine and recover is in a different goroutine then it won’t stop  panic. Lets
    see a program for that
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 recover 函数需要注意的一个重要点是，它只能恢复同一 goroutine 中发生的 panic。如果 panic 发生在不同的 goroutine
    中，而 recover 在另一个 goroutine 中，那么它不会停止 panic。让我们看一个程序来演示这一点。
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**Output**'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the above program we have **checkAndPrint** in the goroutine and it raises **panic**
    in that goroutine.  The **recover** function is in the calling goroutine. As you
    can see from the output that it does not stop **panic** and hence  you see the
    above output
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，我们在 goroutine 中有 **checkAndPrint**，它在该 goroutine 中引发了 **panic**。**recover**
    函数在调用的 goroutine 中。如你从输出中看到的，它并没有停止 **panic**，因此你看到了上面的输出。
- en: '**Printing stack trace**'
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**打印堆栈跟踪**'
- en: Debug package of golang also provide StackTrace function that can be used print
    the stack trace of the panic in the recover function
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: golang 的 Debug 包还提供 StackTrace 函数，可以用来在 recover 函数中打印 panic 的堆栈跟踪。
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '**Output**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE28]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In the above program we print the stack trace of the panic in the recover function
    using the **StackTrace** function. It prints the correct  stack trace as seen
    from the output
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，我们使用 **StackTrace** 函数在 recover 函数中打印 panic 的堆栈跟踪。它打印出的堆栈跟踪是正确的，如输出所示。
- en: '**Return value of the function when panic is recovered**'
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**当 panic 被恢复时函数的返回值**'
- en: When the panic is recovered then the return value of a panicking function will
    be the default value of the return types of  the panicking function
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当 panic 被恢复时，导致 panic 的函数的返回值将是该函数返回类型的默认值。
- en: Let’s see a program for it
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个程序来演示这一点。
- en: '[PRE29]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '**Output**'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE30]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the above program we have **checkAndGet** function which gets the value at
    a particular index in int slice. If the index passed to this function is greater
    than (length of slice-1), then it raises a panic. There is also a **handleOutOfBounds**
    function which is used to recover from the panic.  So we pass index 2 to the **checkAndGet**
    function and it raises the panic which is recovered in the **handleOutOfBounds**
    function. That is why we first get this output
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，我们有一个 **checkAndGet** 函数，它在 int 切片的特定索引获取值。如果传递给此函数的索引大于（切片长度 - 1），那么它会引发
    panic。还有一个 **handleOutOfBounds** 函数用于从 panic 中恢复。因此，我们将索引 2 传递给 **checkAndGet**
    函数，它引发的 panic 在 **handleOutOfBounds** 函数中恢复。这就是我们首先得到这个输出的原因。
- en: '[PRE31]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Notice in main function that we recollect the return value from the **checkAndGet**
    like this
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意在主函数中，我们以这样的方式重新获取 **checkAndGet** 的返回值。
- en: '[PRE32]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '**checkAndGet** has two return values'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**checkAndGet** 有两个返回值'
- en: int
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: int
- en: error
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误
- en: Since **checkAndGet** creates panic which is recovered in the handleOutOfBounds
    function therefore the return value of the **checkAndGet** will be the default
    value of its types.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 **checkAndGet** 创建的 panic 在 handleOutOfBounds 函数中被恢复，因此 **checkAndGet** 的返回值将是其类型的默认值。
- en: Therefore
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 因此
- en: '[PRE33]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: outputs
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE34]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: because zero is the default value of **int** type.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 因为零是 **int** 类型的默认值。
- en: And
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 而且
- en: '[PRE35]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: outputs
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE36]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: because nil is the default value of **error** type.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 nil 是 **error** 类型的默认值。
- en: If you don’t want to return default zero value of types then named return value
    can be used. Let’s see a program for that.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想返回类型的默认零值，可以使用命名返回值。让我们看一个程序来演示这一点。
- en: '[PRE37]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '**Output**'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE38]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This program is same as previous program, the only difference being that we
    are using named return value in the **checkAndGet** function.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序与之前的程序相同，唯一的区别是我们在 **checkAndGet** 函数中使用了命名返回值。
- en: '[PRE39]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: We set the named return value to 10 in **checkAndGet** function
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 **checkAndGet** 函数中将命名返回值设置为 10。
- en: '[PRE40]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: That is why we get below output in this program as panic is created and it is
    recovered
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么在这个程序中我们得到下面的输出，因为引发了 panic 并且它被恢复。
- en: '[PRE41]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Also note that If panic would not have created in the program then it would
    have output the correct value at index.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 还请注意，如果程序中没有引发 panic，那么它将输出索引的正确值。
- en: '**Conclusion**'
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结论**'
- en: That is all about panic and recover in golang. Hope you have liked the article.
    please share feedback/improvements/mistakes in comments
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是关于 golang 中的 panic 和 recover 的全部内容。希望你喜欢这篇文章。请在评论中分享反馈/改进/错误。
- en: '**Previous Tutorial** – [Error -Part 2](https://golangbyexample.com/error-in-golang-advanced/)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**上一个教程** – [错误 - 第 2 部分](https://golangbyexample.com/error-in-golang-advanced/)'
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)***'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/) *   [golang](https://golangbyexample.com/tag/golang/)
    ***'
