- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:02:22'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Composite Design Pattern in Go (GoLang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/composite-design-pattern-golang/](https://golangbyexample.com/composite-design-pattern-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Note: Interested in understanding how all other design patterns can be implemented
    in GO. Please see this full reference – [All Design Patterns in Go (Golang)](https://golangbyexample.com/all-design-patterns-golang/)'
  prefs: []
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Definition: ](#Definition "Definition:  ")'
  prefs: []
  type: TYPE_NORMAL
- en: '[When to Use](#When_to_Use " When to Use")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[UML Diagram](#UML_Diagram "UML Diagram")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Mapping ](#Mapping "Mapping ")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Practical Example](#Practical_Example "Practical Example ")*  *## **Definition: **'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is a structural design pattern. Composition design pattern is used when
    we want a Group of objects called ‘composite’ is treated in a similar way as a
    single object. It comes under structural design pattern as it allows you to compose
    objects into a tree structure. Each of the individual objects in the tree structure
    can be treated in the same way irrespective of whether they are Complex or Primitive.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try to understand it with an example of a file system of OS. In the file
    system, there are two types of objects **File** and **Folder.** There are cases
    when File and Folder are treated to be the same way. It will be more clear as
    we go along.
  prefs: []
  type: TYPE_NORMAL
- en: '**When to Use**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Composite Design pattern makes sense to use in cases when the composite and
    individual object needs to be treated in the same way from a client perspective.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: – In our example above of the file system, let’s say search operation of a particular
    keyword needs to be executed. Now, this search operation applies to both **File**
    and **Folder.** For a **File,** it will just look into the contents of the file
    and for a **Folder,** it will go through all files in the hierarchy in that folder
    to find that keyword
  prefs: []
  type: TYPE_NORMAL
- en: Use this pattern when the composite and individual object form a tree-like structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: –  In our example, **File** and **Folder** do form a tree structure
  prefs: []
  type: TYPE_NORMAL
- en: '**UML Diagram**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Component** – It is the interface which defines the common operations for
    both the **Composite** and **Leaf** objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Composite –** It implements **Component** interface and embeds an array of
    child **Components**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Leaf –** it is the primitive object in the tree. It also implements the **Component**
    Interface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/a2112b0fd53adcf02fc6a03a4e0c5226.png)'
  prefs: []
  type: TYPE_IMG
- en: Below is the corresponding mapping UML diagram with the example given above
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/241bbd461e5145959cbcba02e11dca09.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Mapping **'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The below table represents the mapping from the UML diagram actors to actual
    implementation actors in code.
  prefs: []
  type: TYPE_NORMAL
- en: '| Component interface | component.go |'
  prefs: []
  type: TYPE_TB
- en: '| Composite | folder.go |'
  prefs: []
  type: TYPE_TB
- en: '| Leaf | file.go |'
  prefs: []
  type: TYPE_TB
- en: '| client | main.go |'
  prefs: []
  type: TYPE_TB
- en: '**Practical Example**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In theexample below **component** is the interface and **file** and **folder**
    implement this interface**.**
  prefs: []
  type: TYPE_NORMAL
- en: '**component.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**folder.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**file.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**main.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[composite design pattern](https://golangbyexample.com/tag/composite-design-pattern/)*   [composite
    design pattern in go](https://golangbyexample.com/tag/composite-design-pattern-in-go/)*   [composite
    design pattern in golang](https://golangbyexample.com/tag/composite-design-pattern-in-golang/)*   [design
    pattern](https://golangbyexample.com/tag/design-pattern/)*   [go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
