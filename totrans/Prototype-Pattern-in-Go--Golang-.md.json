["```\npackage main\n\ntype inode interface {\n    print(string)\n    clone() inode\n}\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype file struct {\n\tname string\n}\n\nfunc (f *file) print(indentation string) {\n\tfmt.Println(indentation + f.name)\n}\n\nfunc (f *file) clone() inode {\n\treturn &file{name: f.name + \"_clone\"}\n} \n```", "```\npackage main\n\nimport \"fmt\"\n\ntype folder struct {\n\tchildrens []inode\n\tname      string\n}\n\nfunc (f *folder) print(indentation string) {\n\tfmt.Println(indentation + f.name)\n\tfor _, i := range f.childrens {\n\t\ti.print(indentation + indentation)\n\t}\n}\n\nfunc (f *folder) clone() inode {\n\tcloneFolder := &folder{name: f.name + \"_clone\"}\n\tvar tempChildrens []inode\n\tfor _, i := range f.childrens {\n\t\tcopy := i.clone()\n\t\ttempChildrens = append(tempChildrens, copy)\n\t}\n\tcloneFolder.childrens = tempChildrens\n\treturn cloneFolder\n} \n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    file1 := &file{name: \"File1\"}\n    file2 := &file{name: \"File2\"}\n    file3 := &file{name: \"File3\"}\n    folder1 := &folder{\n        childrens: []inode{file1},\n        name:      \"Folder1\",\n    }\n    folder2 := &folder{\n        childrens: []inode{folder1, file2, file3},\n        name:      \"Folder2\",\n    }\n    fmt.Println(\"\\nPrinting hierarchy for Folder2\")\n    folder2.print(\"  \")\n    cloneFolder := folder2.clone()\n    fmt.Println(\"\\nPrinting hierarchy for clone Folder\")\n    cloneFolder.print(\"  \")\n}\n```", "```\nPrinting hierarchy for Folder2\n  Folder2\n    Folder1\n        File1\n    File2\n    File3\n\nPrinting hierarchy for clone Folder\n  Folder2_clone\n    Folder1_clone\n        File1_clone\n    File2_clone\n    File3_clone\n```"]