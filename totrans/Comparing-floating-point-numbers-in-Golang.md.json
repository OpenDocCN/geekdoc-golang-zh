["```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    a := 3.14\n    b := 3.14\n    if a == b {\n        fmt.Println(\"Same\")\n    } else {\n        fmt.Println(\"Not Same\")\n    }\n\n    a = 3.142\n    b = 3.14\n    if a == b {\n        fmt.Println(\"Same\")\n    } else {\n        fmt.Println(\"Not Same\")\n    }\n}\n```", "```\nSame\nNot Same\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n    var a float32\n    var b float64\n    if a == b {\n        fmt.Println(\"Same\")\n    } else {\n        fmt.Println(\"Not Same\")\n    }\n}\n```", "```\ninvalid operation: a == b (mismatched types float32 and float64)\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc main() {\n    withTolerane(3.14, 3.141)\n    withTolerane(3.14, 3.142)\n}\n\nfunc withTolerane(a, b float64) {\n    tolerance := 0.001\n    if diff := math.Abs(a - b); diff < tolerance {\n        fmt.Printf(\"When a=%f and b =%f => Nearly same by tolerance\\n\", a, b)\n    } else {\n        fmt.Printf(\"When a=%f and b=%f => Not same Even by Tolerance\\n\", a, b)\n    }\n}\n```", "```\nWhen a=3.140000 and b =3.141000 => Nearly same by tolerance\nWhen a=3.140000 and b=3.142000 => Not same Even by Tolerance\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"math/big\"\n)\n\nfunc main() {\n    a := 3.1432\n    b := 3.1456\n    // compare a to b\n    result := big.NewFloat(a).Cmp(big.NewFloat(b))\n\n    // -1 if a < b\n    if result < 0 {\n        fmt.Println(\"a less than b\")\n    }\n\n    // 0 if a == b\n    if result == 0 {\n        fmt.Println(\"a  equals to b\")\n    }\n\n    // +1 if a > b\n    if result > 0 {\n        fmt.Println(\"a 1 more than b\")\n    }\n}\n```", "```\na less than b\n```"]