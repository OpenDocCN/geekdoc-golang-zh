- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '类别: 未分类'
- en: 'date: 2024-10-13 06:46:28'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:46:28
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Longest Increasing Subsequence Program in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go语言中的最长递增子序列程序
- en: 来源：[https://golangbyexample.com/longest-increasing-subsequence-golang/](https://golangbyexample.com/longest-increasing-subsequence-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/longest-increasing-subsequence-golang/](https://golangbyexample.com/longest-increasing-subsequence-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *## **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *## **概述**'
- en: The objective is to find the longest increasing subsequence in a given input
    array. It is the longest subsequence in a given sequence such that every element
    is larger than its previous element
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是找到给定输入数组中的最长递增子序列。它是给定序列中最长的子序列，使得每个元素都大于其前一个元素。
- en: For example
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 例如
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Another example
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Longest Increasing Subsequence is a DP problem. Assume the input array is named
    **input** only. Let’s say **lis** is the array where **lis[i]** is the length
    of the longest increasing subsequence at index **i**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最长递增子序列是一个动态规划问题。假设输入数组仅命名为 **input**。假设 **lis** 是一个数组，其中 **lis[i]** 是索引 **i**
    处的最长递增子序列的长度。
- en: Then
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后
- en: '**lis[0]** = 1'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**lis[0]** = 1'
- en: '**lis[i]** = **max(lis[j])** + 1 where 0 <= **j** < **i** and **input[i]**
    > **input[j]**'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**lis[i]** = **max(lis[j])** + 1 其中 0 <= **j** < **i** 且 **input[i]** > **input[j]**'
- en: '**lis[i]** = 1 if there is no such **j**'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**lis[i]** = 1 如果没有这样的 **j**'
- en: '**Program**'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Here is the program for the same.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是相同程序的代码。
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 请查看我们的Golang高级教程。本系列教程内容详尽，我们试图通过示例覆盖所有概念。本教程适合那些希望获得Golang专业知识和扎实理解的人
    – [Golang高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you –[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解所有设计模式如何在Golang中实现。如果是的话，这篇文章就是为你准备的 – [所有设计模式Golang](https://golangbyexample.com/all-design-patterns-golang/)
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
