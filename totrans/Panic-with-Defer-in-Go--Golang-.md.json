["```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    defer fmt.Println(\"Defer in main\")\n    panic(\"Panic with Defer\")\n    fmt.Println(\"After painc in f2\")\n}\n```", "```\nDefer in main\npanic: Panic Create\n\ngoroutine 1 [running]:\nmain.main()\n        /Users/slohia/go/src/github.com/golang-examples/articles/tutorial/panicRecover/deferWithPanic/main.go:7 +0x95\nexit status 2\n```", "```\nDefer in main\n```", "```\nfunc recover() interface{}\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\ta := []string{\"a\", \"b\"}\n\tcheckAndPrint(a, 2)\n\tfmt.Println(\"Exiting normally\")\n}\n\nfunc checkAndPrint(a []string, index int) {\n\tdefer handleOutOfBounds()\n\tif index > (len(a) - 1) {\n\t\tpanic(\"Out of bound access for slice\")\n\t}\n\tfmt.Println(a[index])\n}\n\nfunc handleOutOfBounds() {\n\tif r := recover(); r != nil {\n\t\tfmt.Println(\"Recovering from panic:\", r)\n\t}\n}\n```", "```\nRecovering from panic: Out of bound access for slice\nExiting normally\n```", "```\nif r := recover(); r != nil {\n    fmt.Println(\"Recovering from panic:\", r)\n}\n```", "```\nRecovering from panic: Out of bound access for slice\n```", "```\nExiting normally\n```"]