["```\npackage main\n\nimport \"fmt\"\n\nconst (\n   //ALBHABET_SIZE total characters in english alphabet\n    ALBHABET_SIZE = 26\n)\n\ntype trieNode struct {\n    childrens [ALBHABET_SIZE]*trieNode\n    isWordEnd bool\n}\n\ntype trie struct {\n    root *trieNode\n}\n\nfunc initTrie() *trie {\n    return &trie{\n        root: &trieNode{},\n    }\n}\n\nfunc (t *trie) insert(word string) {\n    wordLength := len(word)\n    current := t.root\n    for i := 0; i < wordLength; i++ {\n        index := word[i] - 'a'\n        if current.childrens[index] == nil {\n            current.childrens[index] = &trieNode{}\n        }\n        current = current.childrens[index]\n    }\n    current.isWordEnd = true\n}\n\nfunc (t *trie) find(word string) bool {\n    wordLength := len(word)\n    current := t.root\n    for i := 0; i < wordLength; i++ {\n        index := word[i] - 'a'\n        if current.childrens[index] == nil {\n            return false\n        }\n        current = current.childrens[index]\n    }\n    if current.isWordEnd {\n        return true\n    }\n    return false\n}\n\nfunc main() {\n    trie := initTrie()\n    words := []string{\"sam\", \"john\", \"tim\", \"jose\", \"rose\",\n        \"cat\", \"dog\", \"dogg\", \"roses\"}\n    for i := 0; i < len(words); i++ {\n        trie.insert(words[i])\n    }\n    wordsToFind := []string{\"sam\", \"john\", \"tim\", \"jose\", \"rose\",\n        \"cat\", \"dog\", \"dogg\", \"roses\", \"rosess\", \"ans\", \"san\"}\n    for i := 0; i < len(wordsToFind); i++ {\n        found := trie.find(wordsToFind[i])\n        if found {\n            fmt.Printf(\"Word \\\"%s\\\" found in trie\\n\", wordsToFind[i])\n        } else {\n            fmt.Printf(\"Word \\\"%s\\\" not found in trie\\n\", wordsToFind[i])\n        }\n    }\n}\n```", "```\nWord \"sam\" found in trie\nWord \"john\" found in trie\nWord \"tim\" found in trie\nWord \"jose\" found in trie\nWord \"rose\" found in trie\nWord \"cat\" found in trie\nWord \"dog\" found in trie\nWord \"dogg\" found in trie\nWord \"roses\" found in trie\nWord \"rosess\" not found in trie\nWord \"ans\" not found in trie\nWord \"san\" not found in trie\n```"]