["```\nInput: [\"art\", \"tap\", \"rat\", \"pat\", \"tar\",\"arm\"]\nOutput: [[\"art\", \"rat\", \"tar\"], [\"tap\", \"pat\"], [\"arm\"]]\n```", "```\n[\"art\", \"apt\", \"art\", \"apt\", \"art\", \"arm\"]\n```", "```\nvar output map[string][]int\n```", "```\nmap[\"art\"] = [0,2,4]\n```", "```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sort\"\n)\n\nfunc main() {\n\tstrs := []string{\"art\", \"tap\", \"rat\", \"pat\", \"tar\", \"arm\"}\n\toutput := groupAnagrams(strs)\n\tfmt.Println(output)\n\n\tstrs = []string{\"\"}\n\toutput = groupAnagrams(strs)\n\tfmt.Println(output)\n\n\tstrs = []string{\"a\"}\n\toutput = groupAnagrams(strs)\n\tfmt.Println(output)\n}\n\ntype sortRune []rune\n\nfunc (s sortRune) Swap(i, j int) {\n\ts[i], s[j] = s[j], s[i]\n}\n\nfunc (s sortRune) Less(i, j int) bool {\n\treturn s[i] < s[j]\n}\n\nfunc (s sortRune) Len() int {\n\treturn len(s)\n}\n\nfunc groupAnagrams(strs []string) [][]string {\n\n\tanagramMap := make(map[string][]int)\n\tvar anagrams [][]string\n\ttrie := &trie{root: &trieNode{}}\n\n\tlenStrs := len(strs)\n\n\tvar strsDup []string\n\n\tfor i := 0; i < lenStrs; i++ {\n\t\truneCurrent := []rune(strs[i])\n\t\tsort.Sort(sortRune(runeCurrent))\n\t\tstrsDup = append(strsDup, string(runeCurrent))\n\t}\n\n\tfor i := 0; i < lenStrs; i++ {\n\t\tanagramMap = trie.insert(strsDup[i], i, anagramMap)\n\t}\n\n\tfor _, value := range anagramMap {\n\t\tvar combinedTemp []string\n\t\tfor i := 0; i < len(value); i++ {\n\t\t\tcombinedTemp = append(combinedTemp, strs[value[i]])\n\t\t}\n\t\tanagrams = append(anagrams, combinedTemp)\n\t}\n\n\treturn anagrams\n}\n\ntype trieNode struct {\n\tisWord    bool\n\tchildrens [26]*trieNode\n}\n\ntype trie struct {\n\troot *trieNode\n}\n\nfunc (t *trie) insert(input string, wordIndex int, anagramMap map[string][]int) map[string][]int {\n\tinputLen := len(input)\n\tcurrent := t.root\n\n\tfor i := 0; i < inputLen; i++ {\n\t\tindex := input[i] - 'a'\n\t\tif current.childrens[index] == nil {\n\t\t\tcurrent.childrens[index] = &trieNode{}\n\t\t}\n\t\tcurrent = current.childrens[index]\n\t}\n\tcurrent.isWord = true\n\tif anagramMap[input] == nil {\n\t\tanagramMap[input] = []int{wordIndex}\n\t} else {\n\t\tanagramMap[input] = append(anagramMap[input], wordIndex)\n\t}\n\treturn anagramMap\n}\n```", "```\n[[art rat tar] [tap pat] [arm]]\n[[]]\n[[a]]\n```"]