- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:40:37'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Get full hostname along with port from a URL in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/hostname-port-url-golang/](https://golangbyexample.com/hostname-port-url-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Program](#Program "Program")*  *# **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**net/url** package of golang contains a Parse function that can be used to
    parse a given and return the URL instance of the URL struct[https://golang.org/pkg/net/url/#URL](https://golang.org/pkg/net/url/#URL)'
  prefs: []
  type: TYPE_NORMAL
- en: Once the given URL is parsed correctly, then it will return the URI object.
    We can then access the below information from the URI
  prefs: []
  type: TYPE_NORMAL
- en: Scheme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User Info
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hostname
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Port
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pathname
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query Params
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fragment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once we have all the parts we can concatenate them to get the full hostname
    along with the port. We will parse the below URL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Then the full hostname along with port will be
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Program**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Below is the program for the same.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
