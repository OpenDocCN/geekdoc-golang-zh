- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:05:37'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:05:37
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: MinHeap in Golang
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Golang中的最小堆
- en: 来源：[https://golangbyexample.com/minheap-in-golang/](https://golangbyexample.com/minheap-in-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/minheap-in-golang/](https://golangbyexample.com/minheap-in-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Introduction](#Introduction "Introduction")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [介绍](#Introduction "Introduction")'
- en: '[Operations on Minheap](#Operations_on_Minheap "Operations on Minheap")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[最小堆操作](#Operations_on_Minheap "Operations on Minheap")'
- en: '[Implementation](#Implementation "Implementation")*  *# **Introduction**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[实现](#Implementation "Implementation")*  *# **介绍**'
- en: A MinHeap is a complete binary tree in which the value of the parent node is
    less than or equal to the value of its left and right child. A complete binary
    tree is a binary tree in which all levels are full except the last level.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最小堆是一个完全二叉树，其中父节点的值小于或等于其左子节点和右子节点的值。完全二叉树是指除了最后一层外，所有层都是满的二叉树。
- en: We use an array to represent a minheap. The root element is arr[0]. For an index
    i we have
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用数组来表示最小堆。根元素是arr[0]。对于索引i，我们有
- en: Left Child – 2*i + 1
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左子节点 – 2*i + 1
- en: Right Child – 2*i + 2
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右子节点 – 2*i + 2
- en: Below is a representation of a minheap
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个最小堆的表示
- en: '![](img/3a7852c4ca1f9283ebb010132a829a14.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a7852c4ca1f9283ebb010132a829a14.png)'
- en: The corresponding array would be [2, 3, 5, 7, 6, 8]
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的数组为[2, 3, 5, 7, 6, 8]
- en: For 0 index we have
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于索引0，我们有
- en: Left Child – 2*0 + 1 = 1
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左子节点 – 2*0 + 1 = 1
- en: Right Child – 2*0 + 2 = 2
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右子节点 – 2*0 + 2 = 2
- en: Thus arr[0] i.e 2 has left child as arr[1] i.e, 3 and right child as arr[2]
    i.e 5
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此arr[0]即2的左子节点为arr[1]即3，右子节点为arr[2]即5
- en: Since each node value is less or equal to the value of its children, therefore,
    value at the root is the smallest value.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个节点值小于或等于其子节点的值，因此根节点的值是最小值。
- en: '**Operations on Minheap**'
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**最小堆操作**'
- en: '**Insert an Element**– takes O(log n) time. If the inserted value is smaller
    than its parent, then we need to traverse up to fix. This traversal continues
    up till the inserted value is greater than its parent or the inserted value becomes
    the root itself. The second case will happen when the inserted value is the smallest.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插入元素**– 需要O(log n)的时间。如果插入的值小于其父节点，则需要向上遍历以修复。这种遍历会持续到插入的值大于其父节点，或者插入的值成为根节点。第二种情况发生在插入的值是最小的。'
- en: '**Remove Minimum Element** – takes O(log n) time. It saves the root value and
    then replaces it with the last value in the array. It then minheapifies the root
    which takes O(log n) time as it traverses down until it is less than its parent.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移除最小元素** – 需要O(log n)的时间。它保存根值，然后用数组中的最后一个值替换它。然后对根进行最小堆化，这需要O(log n)的时间，因为它向下遍历直到小于其父节点。'
- en: '**Get Minimum** – takes O(1) times. Returns the root value'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取最小值** – 需要O(1)的时间。返回根值'
- en: '**Implementation**'
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**实现**'
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output:**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[go](https://golangbyexample.com/tag/go/)*   [meanheap in go](https://golangbyexample.com/tag/meanheap-in-go/)*'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [在go中的最小堆](https://golangbyexample.com/tag/meanheap-in-go/)*'
