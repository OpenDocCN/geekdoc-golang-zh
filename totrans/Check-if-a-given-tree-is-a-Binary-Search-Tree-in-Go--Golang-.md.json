["```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\ntype TreeNode struct {\n\tVal   int\n\tLeft  *TreeNode\n\tRight *TreeNode\n}\n\nfunc isValidBST(root *TreeNode) bool {\n\tif root == nil {\n\t\treturn true\n\t}\n\tisValid, _, _ := isValidBSTUtil(root)\n\treturn isValid\n}\n\nfunc isValidBSTUtil(node *TreeNode) (bool, int, int) {\n\n\tif node.Left == nil && node.Right == nil {\n\t\treturn true, node.Val, node.Val\n\t}\n\n\tmin := node.Val\n\tmax := node.Val\n\n\tisValidLeft := true\n\tvar leftMin, leftMax int\n\tif node.Left != nil {\n\t\tisValidLeft, leftMin, leftMax = isValidBSTUtil(node.Left)\n\n\t\tif !isValidLeft {\n\t\t\treturn false, 0, 0\n\t\t}\n\t\tif node.Val <= leftMax {\n\t\t\treturn false, 0, 0\n\t\t}\n\n\t\tmin = leftMin\n\t}\n\n\tisValidRight := true\n\tvar rightMin, rightMax int\n\n\tif node.Right != nil {\n\t\tisValidRight, rightMin, rightMax = isValidBSTUtil(node.Right)\n\n\t\tif !isValidRight {\n\t\t\treturn false, 0, 0\n\t\t}\n\n\t\tif node.Val >= rightMin {\n\t\t\treturn false, 0, 0\n\t\t}\n\t\tmax = rightMax\n\t}\n\n\treturn true, min, max\n}\n\nfunc minOfFour(a, b, c, d int) int {\n\treturn int(math.Min(float64(a), math.Min(float64(b), math.Min(float64(c), float64(d)))))\n}\n\nfunc maxOfFour(a, b, c, d int) int {\n\treturn int(math.Max(float64(a), math.Max(float64(b), math.Max(float64(c), float64(d)))))\n}\n\nfunc main() {\n\troot := TreeNode{Val: 2}\n\troot.Left = &TreeNode{Val: 1}\n\troot.Right = &TreeNode{Val: 3}\n\n\tisValidBST := isValidBST(&root)\n\tfmt.Println(isValidBST)\n\n}\n```", "```\ntrue\n```"]