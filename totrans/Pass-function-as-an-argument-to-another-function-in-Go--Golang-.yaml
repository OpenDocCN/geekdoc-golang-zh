- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:10:57'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Pass function as an argument to another function in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/func-as-func-argument-go/](https://golangbyexample.com/func-as-func-argument-go/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Golang function are first-order variables meaning that
  prefs: []
  type: TYPE_NORMAL
- en: They can be assigned to a variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passed around as function argument
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returned from a function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In GO function is also a type. Two functions are of the same type if they have
    the same arguments and the same return values. While passing a function as an
    argument to another function, the exact signature of the function has to be specified
    in the argument list. As in below example print function accept first argument
    which is a function of type **func(int, int) int**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Some more things to note about the below program
  prefs: []
  type: TYPE_NORMAL
- en: function **area** is a function of  **func(int, int) int**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: function **sum** is a function of type **func(int, int) int**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**area** and **sum** are of same type as they have same arguments type and
    same return values type'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**print** function accepts a function as its first argument of type **func(int,
    int) int**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thus both **area** and **sum** function can be passed as an argument to the
    **print** function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
