- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:43:34'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:43:34
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Infix to Postfix Conversion in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go语言中的中缀到后缀转换
- en: 来源：[https://golangbyexample.com/infix-to-postfix-conversion-go/](https://golangbyexample.com/infix-to-postfix-conversion-go/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/infix-to-postfix-conversion-go/](https://golangbyexample.com/infix-to-postfix-conversion-go/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Infix to Postfix Conversion ](#Infix_to_Postfix_Conversion "Infix to
    Postfix Conversion ")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [中缀到后缀转换](#Infix_to_Postfix_Conversion "Infix to Postfix Conversion ")'
- en: '[Algorithm:](#Algorithm "Algorithm:")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[算法：](#Algorithm "Algorithm:")'
- en: '[Implementation:](#Implementation "Implementation:")*  *## **Infix to Postfix
    Conversion **'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[实现：](#Implementation "Implementation:")*  *## **中缀到后缀转换**'
- en: In this tutorial, we will see what are the Infix and Postfix expression notations,
    the advantages of Postfix notation over Infix, and how we can convert an Infix
    expression to a Postfix expression. We will cover the evaluation of a Postfix
    expression in another tutorial.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将了解中缀和后缀表达式的表示法，后缀表示法相比中缀的优点，以及如何将中缀表达式转换为后缀表达式。我们将在另一个教程中涵盖后缀表达式的计算。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'These are some advantages of postfix expression over infix:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是后缀表达式相比中缀表达式的一些优点：
- en: Postfix expression evaluation is easier than Infix expression evaluation.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后缀表达式的计算比中缀表达式的计算更简单。
- en: Parenthesis is not required in postfix expression.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后缀表达式中不需要括号。
- en: Postfix expression evaluation requires single scanning.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后缀表达式的计算只需单次扫描。
- en: Faster evaluation than Infix notation.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比中缀表示法更快的计算。
- en: '**Algorithm:**'
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**算法：**'
- en: Scan infix expression from left to right.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从左到右扫描中缀表达式。
- en: If the current scanned character is an operand, output it.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果当前扫描的字符是操作数，输出它。
- en: Else, If the precedence of the current scanned operator is greater than the
    precedence of the operator in the stack (or the stack is empty or the stack contains
    a ‘(‘ ), push it.  Else, Pop all the operators from the stack which are greater
    than or equal to in precedence than that of the scanned operator. After doing
    that Push the scanned operator to the stack. (If you encounter parenthesis while
    popping then stop there and push the scanned operator in the stack.)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，如果当前扫描的运算符的优先级高于栈中运算符的优先级（或栈为空或栈中包含一个‘(’），则压入栈。否则，从栈中弹出所有优先级大于或等于扫描运算符的运算符。完成后将扫描到的运算符推入栈中。（如果在弹出时遇到括号，则停止，并将扫描到的运算符压入栈中。）
- en: If the scanned character is an ‘(‘, push it to the stack.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果扫描到的字符是‘(’，则将其压入栈中。
- en: If the scanned character is an ‘)’, pop the stack and output it until a ‘(‘
    is encountered, and discard both the parenthesis.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果扫描到的字符是‘)’，则弹出栈并输出，直到遇到‘(’，并丢弃这两个括号。
- en: Repeat steps 2-6 until infix expression is scanned.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重复步骤 2-6，直到中缀表达式扫描完成。
- en: Print the output
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印输出
- en: Pop and output from the stack until it is not empty.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹出并输出栈中的内容，直到栈为空。
- en: 'Below are the examples of the above algorithm:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上述算法的示例：
- en: 'Infix expression is a+b then postfix expression is ab+ :'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 中缀表达式为 a+b，则后缀表达式为 ab+：
- en: a is operand (output it) //output=a
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: a 是操作数（输出它） //output=a
- en: + is operator (push is in the stack)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: + 是运算符（推入栈中）
- en: b is operand (output it) //output=ab
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: b 是操作数（输出它） //output=ab
- en: infix expression is scanned completely, now pop from the stack and add in output,
    hence postfix becomes ab+
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中缀表达式已完全扫描，现在从栈中弹出并添加到输出，因此后缀变为 ab+
- en: Similarly
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地
- en: Infix expression is
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 中缀表达式为
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: then postfix expression is
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后后缀表达式为
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: a is operand (output it) //output=a
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: a 是操作数（输出它） //output=a
- en: + is operator (push it in stack) //stack=+
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: + 是运算符（压入栈中） //stack=+
- en: b is operand (output it) //ab
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: b 是操作数（输出它） //ab
- en: '* is operator and having high precedence than +, (push it in stack) //stack=+*'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '* 是运算符，优先级高于 +，（压入栈中） //stack=+*'
- en: c is operand (output it) //output=abc
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: c 是操作数（输出它） //output=abc
- en: + is operator but it lower than operators in stack. pop all from stack and push
    + //output=abc*+, stack=+
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: + 是运算符，但其优先级低于栈中的运算符。弹出栈中的所有运算符并压入 + //output=abc*+, stack=+
- en: d is operand (output it) //output=abc*+d
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: d 是操作数（输出它） //output=abc*+d
- en: pop from stack and add in output //output=abc*+d+
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从栈中弹出并添加到输出 //output=abc*+d+
- en: '**Implementation:**'
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**实现：**'
- en: 'Below is the implementation of Infix to Postfix Conversion in golang:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Go 语言中中缀到后缀转换的实现：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Output:**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can check the status of the stack after every push and pop operation by uncommenting
    **fmt.Println** line in Push and Pop function declaration.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过取消注释**fmt.Println**行来检查每次推送和弹出操作后栈的状态。
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 请查看我们的Golang高级教程。本系列教程内容详尽，我们尽量用例子覆盖所有概念。本教程适合那些希望获得Golang专业知识和扎实理解的人
    - [Golang高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you -[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解所有设计模式如何在Golang中实现。如果是，那么这篇文章就是为你准备的 - [所有设计模式 Golang](https://golangbyexample.com/all-design-patterns-golang/)
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
