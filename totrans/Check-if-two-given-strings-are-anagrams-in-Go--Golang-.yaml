- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:46:23'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Check if two given strings are anagrams in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/check-two-strings-anagram-go/](https://golangbyexample.com/check-two-strings-anagram-go/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Program](#Program "Program")*  *## **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **anagram** is a word or phrase formed by rearranging the letters of a different
    word or phrase, typically using all the original letters exactly once. For example,
    the word *anagram* itself can be rearranged into *nagaram*, also the word *binary* into *brainy*^, and
    the word *adobe* into the *abode*.
  prefs: []
  type: TYPE_NORMAL
- en: For example
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here is the idea of how to do it. Create a map of string to int. Now
  prefs: []
  type: TYPE_NORMAL
- en: Traverse the first string and increase the count of each character in the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traverse the second string and decrease the count of each character in the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traverse the first string again and if for any character the count is non-zero
    in the map then return false.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the end return true
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Program**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is the program for the same.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  prefs: []
  type: TYPE_NORMAL
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you -[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
