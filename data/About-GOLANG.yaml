- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:31:13'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:31:13
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: About GOLANG
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于 GOLANG
- en: 来源：[https://golangbyexample.com/about-golang/](https://golangbyexample.com/about-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/about-golang/](https://golangbyexample.com/about-golang/)
- en: This is chapter 1 of the golang comprehensive tutorial series. Refer to this
    link for other chapters of the series – [Golang Comprehensive Tutorial Series](https://golangbyexample.com/golang-comprehensive-tutorial/)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 golang 综合教程系列的第一章。有关系列其他章节，请参阅此链接 – [Golang 综合教程系列](https://golangbyexample.com/golang-comprehensive-tutorial/)
- en: Below is the table of contents for the current tutorial.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是当前教程的目录。
- en: Table of Contents
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "概述")'
- en: '[History](#History "History")'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[历史](#History "历史")'
- en: '[What makes GO different](#What_makes_GO_different "What makes GO different")'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GO 的不同之处](#What_makes_GO_different "GO 的不同之处")'
- en: '[Simple to Use Syntax](#Simple_to_Use_Syntax "Simple to Use Syntax")'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[简单易用的语法](#Simple_to_Use_Syntax "简单易用的语法")'
- en: '[Compiled Language with fast Compilation](#Compiled_Language_with_fast_Compilation
    "Compiled Language with fast Compilation")'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[快速编译的编译语言](#Compiled_Language_with_fast_Compilation "快速编译的编译语言")'
- en: '[Static Type Language](#Static_Type_Language "Static Type Language")'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[静态类型语言](#Static_Type_Language "静态类型语言")'
- en: '[Garbage Collected](#Garbage_Collected "Garbage Collected")'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[垃圾回收](#Garbage_Collected "垃圾回收")'
- en: '[Built In Concurrency](#Built_In_Concurrency "Built In Concurrency")'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[内置并发](#Built_In_Concurrency "内置并发")'
- en: '[Standard Library](#Standard_Library "Standard Library")'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[标准库](#Standard_Library "标准库")'
- en: '[Tooling](#Tooling "Tooling")'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[工具](#Tooling "工具")'
- en: '[Comparison with other programming languages](#Comparison_with_other_programming_languages
    "Comparison with other programming languages")'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[与其他编程语言的比较](#Comparison_with_other_programming_languages "与其他编程语言的比较")'
- en: '[Disadvantages of GO](#Disadvantages_of_GO "Disadvantages of GO")'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GO 的缺点](#Disadvantages_of_GO "GO 的缺点")'
- en: '[No inheritance in GO](#No_inheritance_in_GO "No inheritance in GO")'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GO 中没有继承](#No_inheritance_in_GO "GO 中没有继承")'
- en: '[No Generics in GO](#No_Generics_in_GO "No Generics in GO")'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GO 中没有泛型](#No_Generics_in_GO "GO 中没有泛型")'
- en: '[No Compile Time Polymorphism or Function Overloading](#No_Compile_Time_Polymorphism_or_Function_Overloading
    "No Compile Time Polymorphism or Function Overloading")'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[没有编译时多态或函数重载](#No_Compile_Time_Polymorphism_or_Function_Overloading "没有编译时多态或函数重载")'
- en: '[Conclusion:](#Conclusion "Conclusion:")*  *# **Overview**'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[结论：](#Conclusion "结论：")*  *# **概述**'
- en: This is the first tutorial that will give you an introduction to the GOLANG
    language. Go is a statically typed, compiled programming language. It is an open-source
    language and was developed at Google by
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第一篇将为你介绍 GOLANG 语言的教程。Go 是一种静态类型的编译编程语言。它是一种开源语言，由谷歌开发。
- en: Robert Griesemer
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 罗伯特·格里泽默
- en: '[Rob Pike](https://en.wikipedia.org/wiki/Rob_Pike)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[罗布·派克](https://en.wikipedia.org/wiki/Rob_Pike)'
- en: '[Ken Thompson](https://en.wikipedia.org/wiki/Ken_Thompson)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[肯·汤普逊](https://en.wikipedia.org/wiki/Ken_Thompson)'
- en: Since GO is an open-source programming language, it is hosted on Github and 
    is open for contribution by anyone.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 GO 是一种开源编程语言，它托管在 GitHub 上，并且任何人都可以贡献代码。
- en: '[https://github.com/golang/go](https://github.com/golang/go)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/golang/go](https://github.com/golang/go)'
- en: Go has C style syntax but provides memory safety, garbage collection and inbuilt
    concurrency.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Go 具有 C 风格的语法，但提供内存安全、垃圾回收和内置并发。
- en: '**History**'
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**历史**'
- en: GO had its first stable release in 2011.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: GO 于 2011 年首次稳定发布。
- en: '**What makes GO different**'
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**GO 的不同之处**'
- en: Let’s see some of the things which makes go different from other programming
    languages.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些使 Go 与其他编程语言不同的特点。
- en: '**Simple to Use Syntax**'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**简单易用的语法**'
- en: Go is syntactically similar to C and has a really simple syntax. It is easy
    to learn with little facets. It is not overwhelmed with features and thus it is
    easier to write readable and maintainable code in GO. Also, GO has very few keywords
    compared to other mainstream languages. The GO specification mentions 25 keywords.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Go 的语法与 C 相似，语法非常简单。学习起来容易，几乎没有复杂的方面。它的特性不算繁杂，因此编写可读和可维护的代码变得更容易。此外，与其他主流语言相比，GO
    的关键字非常少，GO 规范提到有 25 个关键字。
- en: '[https://golang.org/ref/spec#Keywords](https://golang.org/ref/spec#Keywords)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://golang.org/ref/spec#Keywords](https://golang.org/ref/spec#Keywords)'
- en: '**Compiled Language with fast Compilation**'
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**快速编译的编译语言**'
- en: Go compiles into a native executable. Its compilation is really fast and it
    is attributed due to a couple of reasons. You can check out this link for more
    details related to why GO compiles fast. When you build a GO program the resulting
    binary is what it is. There are no other dependencies. You can port this binary
    to any platform which supports GO and it can be executed there. This is different
    when you compare it with other programming languages such as JAVA, Python, where
    to create a self-contained binary there are a bunch of dependencies that need
    to be taken care of and packed along. There is no concept of Dynamic Link Library
    in GO in fact it supports static linking. GO is statically linked with all the
    libraries into a single standalone big fat binary.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Go 编译成本地可执行文件。它的编译速度非常快，这归因于几个原因。您可以查看这个链接以获取有关 Go 编译速度快的更多细节。当您构建一个 Go 程序时，生成的二进制文件就是它的本身。没有其他依赖项。您可以将这个二进制文件移植到任何支持
    Go 的平台上，并在那执行。这与其他编程语言如 JAVA、Python 的情况不同，因为创建一个自包含的二进制文件时需要处理和打包一堆依赖项。在 Go 中没有动态链接库的概念，实际上它支持静态链接。Go
    与所有库静态链接成一个单独的庞大二进制文件。
- en: '**Static Type Language**'
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**静态类型语言**'
- en: Even though GO has a really neat syntax, it is a strong and static type language.
    There is no implicit conversion allowed in the language. Since it is the static
    type most of the errors related to mismatched type are caught during compile time
    unlike languages like Python, Ruby. etc
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Go 具有非常简洁的语法，但它是一种强大且静态的类型语言。该语言不允许隐式转换。由于是静态类型，绝大多数与类型不匹配相关的错误在编译时就会被捕获，不像
    Python、Ruby 等语言。
- en: '**Garbage Collected**'
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**垃圾回收**'
- en: Go is a garbage-collected language. That means you don’t have to worry about
    freeing up memory. So you don’t have to be bothered about malloc() and free()
    statement like in C, C++
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Go 是一种垃圾回收语言。这意味着您不必担心释放内存。因此，您不必像在 C、C++ 中那样关心 malloc() 和 free() 语句。
- en: '**Built In Concurrency**'
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**内置并发**'
- en: GO through its inbuilt concurrency tries to solve two major problems associated
    with other languages
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Go 通过其内置并发试图解决与其他语言相关的两个主要问题。
- en: The creation of threads is not memory efficient.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程的创建并不高效地使用内存。
- en: Communication between threads is difficult with problems such as thread locking,
    deadlock, etc.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程之间的通信较为困难，存在线程锁定、死锁等问题。
- en: Go approach to concurrency can be best described by
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Go 对并发的处理可以最好地描述为。
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: GO tries to achieve the above through its two concurrency primitives
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Go 通过其两种并发原语来实现上述目标。
- en: '**Goroutine** – lightweight independent execution to achieve concurrency/parallelism.
    Its size starts at 8kb as compared to the JAVA thread whose size is around 1 MB.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Goroutine** – 轻量级独立执行以实现并发/并行。其大小从 8kb 开始，而 JAVA 线程的大小约为 1 MB。'
- en: '**Channels** – provides synchronization and communication between goroutines.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通道** – 提供 goroutine 之间的同步和通信。'
- en: '**Standard Library**'
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**标准库**'
- en: GO standard library is rich in features and support for almost everything which
    is needed for building all types of applications. There are also tons of packages
    which have been created by the GO community on top of GO standard library which
    is ready for use and available on Github
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Go 的标准库功能丰富，支持几乎所有构建各种类型应用所需的功能。Go 社区还在 Go 标准库的基础上创建了大量现成可用的包，并可在 Github 上获取。
- en: '**Tooling**'
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**工具**'
- en: GO support for tooling is strong and rich. It has tools for code formatting,
    unit testing, race detector, linting, memory analysis tools, tools for generating
    documentation  etc.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Go 对工具的支持强大且丰富。它有用于代码格式化、单元测试、竞争检测、代码检查、内存分析工具、生成文档的工具等。
- en: '**Comparison with other programming languages**'
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**与其他编程语言的比较**'
- en: With all the above advantages if you compare with other programming languages
    you will notice
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将上述所有优点与其他编程语言进行比较，您会注意到。
- en: '**With Java**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**与 Java 的比较**'
- en: GO is as fast as JAVA but with its simpler syntax it is easier to learn, write
    and maintain GO code as compared to JAVA
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 的速度与 JAVA 相当，但由于其更简单的语法，与 JAVA 相比，学习、编写和维护 Go 代码更容易。
- en: '**With C/C++**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**与 C/C++ 的比较**'
- en: GO is a little less fast than C but again with its simpler syntax it is easier
    to learn, write and maintain GO code as compared to C/C++
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 的速度比 C 稍慢，但由于其简化的语法，与 C/C++ 相比，学习、编写和维护 Go 代码更容易。
- en: GO is also safer than C/C++ as it is a garbage collected language and also doesn’t
    allow nasty pointer operations present in C/C++. Being a GC language you don’t
    have to worry about malloc() and free() operations
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GO也比C/C++更安全，因为它是垃圾收集语言，也不允许存在于C/C++中的棘手指针操作。作为一门GC语言，你无需担心malloc()和free()操作。
- en: '**With Python/Ruby/Java Script**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 Python/Ruby/Java Script**'
- en: GO is very fast as compared to the above programming languages
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与上述编程语言相比，GO非常快速
- en: The code readability part is easier in these languages but GO is a compiled
    and static type language that helps catch some nasty bugs in the compilation phase
    itself.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些语言的代码可读性更强，但GO是编译型和静态类型的语言，有助于在编译阶段捕获一些棘手的错误。
- en: '**Disadvantages of GO**'
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**GO的缺点**'
- en: Let’s see some of the disadvantages of go as well
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看GO的一些缺点
- en: '**No inheritance in GO**'
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**GO中没有继承**'
- en: Go doesn’t have classes. It has structs. Even though the functionality of structs
    of pretty similar to classes but GO favors composition over inheritance. GO also
    doesn’t support type hierarchy. It doesn’t have keywords such as extends or implements
    as in JAVA. So in that terms GO is not a pure OOP language. The missing of such
    features might seem odd to coders who all well versed in coding in an OOP manner.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Go没有类，只有结构体。尽管结构体的功能与类非常相似，但GO更倾向于组合而非继承。GO也不支持类型层次结构，没有像JAVA中的extends或implements这样的关键字。因此在这方面，GO不是一种纯粹的面向对象编程语言。缺少这些特性可能对习惯于面向对象编程的编码者来说显得奇怪。
- en: '**No Generics in GO**'
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**GO中没有泛型**'
- en: Due to the absence of generics in GO, it expects you to write a very explicit
    code for what you want to do. Although there are talks of adding Generics support
    to GO very soon.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于GO中缺少泛型，它期望你为想要做的事情编写非常明确的代码。尽管有关于很快会向GO添加泛型支持的讨论。
- en: '**No Compile Time Polymorphism or Function Overloading**'
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**没有编译时多态或函数重载**'
- en: Function Overloading is not possible in GO. See this faq for the reason [https://golang.org/doc/faq#overloading](https://golang.org/doc/faq#overloading)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在GO中不可能进行函数重载。请查看这个常见问题了解原因 [https://golang.org/doc/faq#overloading](https://golang.org/doc/faq#overloading)
- en: According to the above faq, things are simpler without it. Although there are
    some workarounds to achieve the same. Can refer to this link
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上述常见问题，没有这些东西会简单得多。尽管有一些变通方法可以实现相同的功能。可以参考这个链接
- en: '[https://golangbyexample.com/function-method-overloading-golang/](https://golangbyexample.com/function-method-overloading-golang/)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://golangbyexample.com/function-method-overloading-golang/](https://golangbyexample.com/function-method-overloading-golang/)'
- en: '**Conclusion:**'
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结论：**'
- en: To summarize what we have discussed so far
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下我们到目前为止讨论的内容
- en: Go is static typing with performance and runtime efficiency matching C/C++
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go是静态类型，其性能和运行时效率与C/C++相当
- en: Really simple syntax and easy to write code as in Python, Ruby
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语法非常简单，写代码像在Python、Ruby中一样容易
- en: Inbuilt concurrency with a good standard library and rich tooling.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置的并发支持，拥有良好的标准库和丰富的工具。
- en: GO is not a pure OOP language with a different style of error handling as compared
    to other mainstream languages
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GO不是一种纯粹的面向对象编程语言，与其他主流语言相比，其错误处理风格不同
- en: This is the basic introduction to golang. Hope you have liked this article.
    Please share feedback or improvements or mistakes in the comments.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对Golang的基本介绍。希望你喜欢这篇文章。请在评论中分享反馈、改进意见或错误。
- en: '****Next Tutorial –**** [GO Installation](https://golangbyexample.com/golang-installation)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '****下一个教程 –**** [GO 安装](https://golangbyexample.com/golang-installation)'
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
