["```\npackage main\n\nimport \"fmt\"\n\ntype bstnode struct {\n    value int\n    left  *bstnode\n    right *bstnode\n}\n\ntype bst struct {\n    root *bstnode\n}\n\nfunc (b *bst) reset() {\n    b.root = nil\n}\n\nfunc (b *bst) insert(value int) {\n    b.insertRec(b.root, value)\n}\n\nfunc (b *bst) insertRec(node *bstnode, value int) *bstnode {\n    if b.root == nil {\n        b.root = &bstnode{\n            value: value,\n        }\n        return b.root\n    }\n    if node == nil {\n        return &bstnode{value: value}\n    }\n    if value <= node.value {\n        node.left = b.insertRec(node.left, value)\n    }\n    if value > node.value {\n        node.right = b.insertRec(node.right, value)\n    }\n    return node\n}\n\nfunc (b *bst) find(value int) error {\n    node := b.findRec(b.root, value)\n    if node == nil {\n        return fmt.Errorf(\"Value: %d not found in tree\", value)\n    }\n    return nil\n}\n\nfunc (b *bst) findRec(node *bstnode, value int) *bstnode {\n    if node == nil {\n        return nil\n    }\n    if node.value == value {\n        return b.root\n    }\n    if value < node.value {\n        return b.findRec(node.left, value)\n    }\n    return b.findRec(node.right, value)\n}\n\nfunc (b *bst) inorder() {\n    b.inorderRec(b.root)\n}\n\nfunc (b *bst) inorderRec(node *bstnode) {\n    if node != nil {\n        b.inorderRec(node.left)\n        fmt.Println(node.value)\n        b.inorderRec(node.right)\n    }\n}\n\nfunc main() {\n    bst := &bst{}\n    eg := []int{2, 5, 7, -1, -1, 5, 5}\n    for _, val := range eg {\n        bst.insert(val)\n    }\n    fmt.Printf(\"Printing Inorder:\\n\")\n    bst.inorder()\n    bst.reset()\n    eg = []int{4, 5, 7, 6, -1, 99, 5}\n    for _, val := range eg {\n        bst.insert(val)\n    }\n    fmt.Printf(\"\\nPrinting Inorder:\\n\")\n    bst.inorder()\n    fmt.Printf(\"\\nFinding Values:\\n\")\n    err := bst.find(2)\n    if err != nil {\n        fmt.Printf(\"Value %d Not Found\\n\", 2)\n    } else {\n        fmt.Printf(\"Value %d Found\\n\", 2)\n    }\n    err = bst.find(6)\n    if err != nil {\n        fmt.Printf(\"Value %d Not Found\\n\", 6)\n    } else {\n        fmt.Printf(\"Value %d Found\\n\", 6)\n    }\n    err = bst.find(5)\n    if err != nil {\n        fmt.Printf(\"Value %d Not Found\\n\", 5)\n    } else {\n        fmt.Printf(\"Value %d Found\\n\", 5)\n    }\n    err = bst.find(1)\n    if err != nil {\n        fmt.Printf(\"Value %d Not Found\\n\", 1)\n    } else {\n        fmt.Printf(\"Value %d Found\\n\", 1)\n    }\n}\n```", "```\nPrinting Inorder:\n-1\n-1\n2\n5\n5\n5\n7\n\nPrinting Inorder:\n-1\n4\n5\n5\n6\n7\n99\n\nFinding Values:\nValue 2 Not Found\nValue 6 Found\nValue 5 Found\nValue 1 Not Found\n```"]