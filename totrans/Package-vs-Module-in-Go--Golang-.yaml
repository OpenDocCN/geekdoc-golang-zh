- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:30:08'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:30:08
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Package vs Module in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 中的包与模块（Golang）
- en: 来源：[https://golangbyexample.com/package-vs-module-golang/](https://golangbyexample.com/package-vs-module-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/package-vs-module-golang/](https://golangbyexample.com/package-vs-module-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Before Modules World](#Before_Modules_World "Before Modules World")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[模块时代之前](#Before_Modules_World "Before Modules World")'
- en: '[Pre Go version 1.11](#Pre_Go_version_111 "Pre Go version 1.11")'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Go 版本 1.11 之前](#Pre_Go_version_111 "Pre Go version 1.11")'
- en: '[In Go version 1.11](#In_Go_version_111 "In Go version 1.11")'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Go 版本 1.11 中](#In_Go_version_111 "In Go version 1.11")'
- en: '[After Go Version 1.13](#After_Go_Version_113 "After Go Version 1.13")'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Go 版本 1.13 之后](#After_Go_Version_113 "After Go Version 1.13")'
- en: '[Creating Modules](#Creating_Modules "Creating Modules")*  *# **Overview**'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建模块](#Creating_Modules "Creating Modules")*  *# **概述**'
- en: As per module definition, it is a directory containing a collection of nested
    and related go packages **go.mod** at its root.  The **go.mod** file defines the
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 根据模块的定义，它是一个包含嵌套和相关的 Go 包集合的目录，根目录下有 **go.mod** 文件。**go.mod** 文件定义了
- en: Module import path.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块导入路径。
- en: Dependency requirements of the module for a successful build. It defines both
    project’s dependencies requirement and also locks them to their correct version
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块的依赖要求，以确保成功构建。它定义了项目的依赖要求，并将其锁定到正确的版本。
- en: Modules provides
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 模块提供了
- en: Dependency Management
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖管理
- en: With modules go project doesn’t necessarily have to lie the **$GOPATH/sr**c
    folder.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模块后，Go 项目不必再位于 **$GOPATH/src** 文件夹中。
- en: Also in addition to **go.mod** file go also keeps a **go.sum** file which contains
    the cryptographic hash of bits of all project’s dependent modules. This to make
    validate that your project’s dependent modules are not changed.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，除了 **go.mod** 文件，Go 还会保留一个 **go.sum** 文件，其中包含所有项目依赖模块的加密哈希。这是为了确保项目的依赖模块没有发生变化。
- en: The behaviour of packages inside a module is same as earlier. So whatever applied
    for a package also applies now. There is no change in that. However a collection
    of packages can be called as module when there is a requirement to version them
    separately. Also when it is common piece of code and you want to share that code
    across multiple projects.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 模块内包的行为与之前相同。因此，之前适用于包的规则现在也适用。这一点没有改变。然而，当需要单独版本化时，可以将一组包称为模块。此外，当它是通用代码并且你想在多个项目之间共享这段代码时，也是如此。
- en: '**Before Modules World**'
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**模块时代之前**'
- en: Let’s see version wise changes to fully understand what was the limitations
    earlier and what has changed since modules
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按版本查看变化，以充分理解早期的限制以及自模块以来的变化。
- en: Pre Go version 1.11 – Modules did not exist at all
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 版本 1.11 之前 – 模块根本不存在。
- en: Go Version 1.11 – Modules was introduced but not finalized
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 版本 1.11 – 引入了模块，但尚未最终确定。
- en: Go Version 1.13 – Modules was introduced
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 版本 1.13 – 引入了模块。
- en: '**Pre Go version 1.11**'
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**Go 版本 1.11 之前**'
- en: Before modules go only had packages. $GOPATH location would have three directories
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在模块出现之前，Go 只有包。$GOPATH 位置将包含三个目录。
- en: src
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: src
- en: pkg
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pkg
- en: bin
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: bin
- en: These were the problems which existed before the modules era
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是在模块时代之前存在的问题。
- en: All Go project in $GOPATH/src directory
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有 Go 项目位于 $GOPATH/src 目录中。
- en: No native dependency management support
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有原生的依赖管理支持。
- en: All the dependency will be downloaded in the $GOPATH/src  directory without
    versioning
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有依赖项将在 $GOPATH/src 目录中下载，而没有版本控制。
- en: Let’s look at each problem one by one
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐个看待每个问题。
- en: Any GO project has to be inside the $GOPATH/src directory
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何 Go 项目都必须在 $GOPATH/src 目录内。
- en: This was a big limitation in terms of that it restricted where you can keep
    your project.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个重大限制，因为它限制了你可以存放项目的位置。
- en: No native dependency management support
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有原生的依赖管理支持。
- en: Also, one issue before modules was that there was no way to specify a dependency
    in a project. Alternate solutions such as dep, glide were available but a native
    solution was missing.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在模块出现之前的一个问题是没有办法在项目中指定依赖。虽然有像dep、glide这样的替代解决方案，但缺乏原生解决方案。
- en: All the dependency will be downloaded in the $GOPATH/src  directory without
    versioning
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有依赖项将在 $GOPATH/src 目录中下载，而没有版本控制。
- en: When we do a go get it will download the required package in the $GOPATH/src
    directory.  Run the below go get command.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行 go get 时，它将在 $GOPATH/src 目录中下载所需的包。请运行下面的 go get 命令。
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It will download the package at location
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 它将下载位于该位置的包。
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice one thing about the go get command above that no version was specified.
    Hence it downloads the latest version present. Also notice the downloaded package.
    Even it doesn’t list down any versioning info. Now this is a problem. What if
    there is an update in the  **[github.com](http://github.com)/pborman/uuid** package
    and you want to get that update. Since there is no versioning the updated package
    will get downloaded at the same location replacing the older one.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意上面的go get命令没有指定版本。因此，它下载最新版本。此外，请注意下载的包。即使它没有列出任何版本信息。这是个问题。如果**[github.com](http://github.com)/pborman/uuid**包有更新，而你想获取该更新，由于没有版本控制，更新的包将被下载到同一位置，替换掉旧的包。
- en: '**In Go version 1.11**'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**在Go版本1.11中**'
- en: In Go 1.11\. modules was introduced but not finalized. So if you still using
    it then better to switch to the latest version
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在Go 1.11中，模块被引入但尚未定型。因此，如果你仍在使用它，最好切换到最新版本。
- en: '**After Go Version 1.13**'
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**在Go版本1.13之后**'
- en: We already discussed all the problems which existed before the pre-modules era.
    Now let’s see how each of these problems got resolved with the introduction of
    modules.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了在预模块时代存在的所有问题。现在让我们看看这些问题是如何通过引入模块得到解决的。
- en: The first problem was
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个问题是。
- en: All Go project in $GOPATH/src directory
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有Go项目在$GOPATH/src目录下。
- en: With modules this is no longer a requirement.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有了模块，这不再是一个要求。
- en: No native dependency management support
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有本地依赖管理支持。
- en: Modules introduced native dependency management within go. With modules it provides
    two new files that will lie
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 模块在Go中引入了本地依赖管理。通过模块，它提供了两个新的文件。
- en: go.mod
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: go.mod
- en: go.sum
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: go.sum
- en: With **go.mod** and **go.sum** files we are able to install precise version
    of a dependency without breaking anything. We already gave a brief introduction
    of these files in the beginning of this tutorial. Later in the tutorial we will
    look at it in detail
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**go.mod**和**go.sum**文件，我们能够安装特定版本的依赖项而不会破坏任何内容。我们在本教程开始时已经简要介绍了这些文件。稍后在教程中，我们将详细讨论。
- en: All the dependency will be downloaded in the **$GOPATH/pkg/mod**  directory
    with versioning
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有依赖项将被下载到**$GOPATH/pkg/mod**目录，并带有版本信息。
- en: So if you download a different version of the same library then both will be
    downloaded in a different directory inside **$GOPATH/pkg/mod** without overriding
    each other.  . **$GOPATH/pkg/mod**  will have two things inside it
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你下载同一库的不同版本，则这两个版本将下载到**$GOPATH/pkg/mod**中的不同目录，而不会相互覆盖。**$GOPATH/pkg/mod**中将包含两个内容。
- en: cache – This is the folder where all dependencies will get downloaded along
    with the zipped code
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缓存——这是所有依赖项将下载到的文件夹，以及压缩代码。
- en: Zipped code of all downloaded dependencies will get copied over from the cache
    directory.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有下载的依赖项的压缩代码将从缓存目录复制过来。
- en: Let’s now create a module. What ever we discussed will be more clear then
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个模块。我们讨论的内容将在那时更加清晰。
- en: '**Creating Modules**'
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**创建模块**'
- en: Below command can be used to create a module.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令创建一个模块。
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let’s create a module
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个模块。
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This command will create a **go.mod** file in the same directory. Now what is
    **go.mod** file
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在同一目录中创建一个**go.mod**文件。现在什么是**go.mod**文件。
- en: Let’s examine the contents of this file. Do a cat **go.mod**
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下这个文件的内容。执行`cat go.mod`。
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It contains the module import path and version of the go with which module was
    created.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含模块的导入路径和创建该模块时使用的Go版本。
- en: Since it is an empty module it doesn’t have any direct dependency specified
    yet. Let’s create a file named **uuid.go** in the same directory with below contents
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个空模块，因此尚未指定任何直接依赖项。让我们在同一目录下创建一个名为**uuid.go**的文件，内容如下。
- en: '**uuid.go**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**uuid.go**'
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notice that we have imported the dependency in the uuid.go as well
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在uuid.go中也导入了依赖项。
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let’s run the below command
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行以下命令。
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This command will download all the dependencies that are required in your source
    files and update **go.mod** file with that dependency. After running this command
    let’s now let’s again examine the contents of **go.mod** file. Do a cat **go.mod**
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将下载您源文件中所需的所有依赖项，并用该依赖项更新**go.mod**文件。在运行此命令后，让我们再次检查**go.mod**文件的内容。执行`cat
    go.mod`。
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It lists direct dependency which was specified in the uuid file along with exact
    version of the dependency as well. Now let’s check the **go.sum** file as well.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 它列出了在uuid文件中指定的直接依赖项及其确切版本。现在让我们检查一下**go.sum**文件。
- en: Do a **cat go.sum**
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`cat go.sum`。
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**go.sum** file lists down the checksum of direct and indirect dependency required
    by the module.  [github.com](http://github.com)/google/uuid is internally used
    by the [github.com](http://github.com)/pborman/uuid . It is an indirect dependency
    of the module and hence it is recorded in the **go.sum** file.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**go.sum** 文件列出了模块所需的直接和间接依赖项的校验和。 [github.com](http://github.com)/google/uuid
    在内部被 [github.com](http://github.com)/pborman/uuid 使用。它是模块的间接依赖，因此记录在 **go.sum**
    文件中。'
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
