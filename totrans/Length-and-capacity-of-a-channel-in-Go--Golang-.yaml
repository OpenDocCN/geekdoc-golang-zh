- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:24:37'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:24:37
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Length and capacity of a channel in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go（Golang）中通道的长度和容量
- en: 来源：[https://golangbyexample.com/length-and-capacity-channel-golang/](https://golangbyexample.com/length-and-capacity-channel-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/length-and-capacity-channel-golang/](https://golangbyexample.com/length-and-capacity-channel-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Length and capacity of a buffered channel](#Length_and_capacity_of_a_buffered_channel
    "Length and capacity of a buffered channel")'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[缓冲通道的长度和容量](#Length_and_capacity_of_a_buffered_channel "Length and capacity
    of a buffered channel")'
- en: '[Length and capacity of a unbuffered channel](#Length_and_capacity_of_a_unbuffered_channel
    "Length and capacity of a unbuffered channel")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[无缓冲通道的长度和容量](#Length_and_capacity_of_a_unbuffered_channel "Length and capacity
    of a unbuffered channel")'
- en: '[Length and capacity of nil channel](#Length_and_capacity_of_nil_channel "Length
    and capacity of nil channel")*  *# **Overview**'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Nil通道的长度和容量](#Length_and_capacity_of_nil_channel "Length and capacity of nil
    channel")*  *# **概述**'
- en: Length, as well as capacity only, applies to the buffered channel.  The length
    of a channel is the number of elements that are already there in the channel whereas
    the capacity of a buffered channel is the number of elements which that channel
    can hold.  So length actually represents the number of elements queued in the
    buffer of the channel while capacity refers to the size of the buffer of the channel.
    Hence the length of a channel is always less than or equal to the capacity of
    the channel.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 仅缓冲通道适用长度和容量。通道的长度是通道中已有元素的数量，而缓冲通道的容量是该通道可以容纳的元素数量。因此，长度实际上表示通道缓冲区中排队的元素数量，而容量则指通道缓冲区的大小。因此，通道的长度始终小于或等于通道的容量。
- en: len() function can be used to get the length of the channel
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用len()函数获取通道的长度
- en: cap() function can be used to get the capacity of the channel
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用cap()函数获取通道的容量
- en: Length and capacity of unbuffered channel is always zero
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 无缓冲通道的长度和容量始终为零
- en: '**Length and capacity of a buffered channel**'
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**缓冲通道的长度和容量**'
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above code, the first created a channel of capacity 3.  After that, we
    keep sending some value to the channel. As you can notice from your output that
    after each send operation to the length of channel increases by one while capacity
    is always the same which is 3.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，首先创建了一个容量为3的通道。之后，我们不断向通道发送一些值。正如你从输出中注意到的那样，每次发送操作后通道的长度增加1，而容量始终保持为3。
- en: '**Length and capacity of a unbuffered channel**'
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**无缓冲通道的长度和容量**'
- en: Length and capacity of unbuffered channel is always zero
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 无缓冲通道的长度和容量始终为零
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Length and capacity of nil channel**'
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**Nil通道的长度和容量**'
- en: Length and capacity of nil channel is always zero
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Nil通道的长度和容量始终为零
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Output**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Below is the summary table of result of **len()** and **cap()** on different
    types of channel
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是不同类型通道上**len()**和**cap()**的结果摘要表
- en: '| **Command** | **Unbuffered Channel****(Not Closed and not nil)** | **Buffered
    Channel****(Not Closed and not nil)** | **Closed Channel** | **Nil Channel** |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **无缓冲通道**（未关闭且不为nil） | **缓冲通道**（未关闭且不为nil） | **已关闭通道** | **Nil通道**
    |'
- en: '| Length | 0 | Number of elements queued in the buffer of the channel | -0
    if unbuffered channel-Number of elements queued in the buffer if buffered channel
    | 0 |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 长度 | 0 | 通道缓冲区中排队的元素数量 | -如果是无缓冲通道则为0-如果是缓冲通道则为缓冲区中排队的元素数量 | 0 |'
- en: '| Capacity | 0 | Size of the buffer of the channel | -0 if unbuffered channel-Size
    of the buffer if buffered channel | 0 |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 容量 | 0 | 通道缓冲区的大小 | -如果是无缓冲通道则为0-如果是缓冲通道则为缓冲区的大小 | 0 |'
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
