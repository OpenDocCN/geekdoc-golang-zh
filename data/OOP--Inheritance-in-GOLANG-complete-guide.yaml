- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-10-13 06:00:50'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-10-13 06:00:50'
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'OOP: Inheritance in GOLANG complete guide'
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OOP：GOLANG中继承的完整指南
- en: 来源：[https://golangbyexample.com/oop-inheritance-golang-complete/](https://golangbyexample.com/oop-inheritance-golang-complete/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/oop-inheritance-golang-complete/](https://golangbyexample.com/oop-inheritance-golang-complete/)
- en: We will try to explain inheritance in GO using comparisons with inheritance
    in JAVA. The first thing we want to mention here is that GOLANG doesn’t have keywords
    such as **“Extends”** and **“Implements”** keyword as in JAVA. Go does provide
    limited functionalities of “**Extends**” and “**Implements**” keyword in a different
    way which each having its own limitations. Before we proceed to understand inheritance
    in GO there are some points worth mentioning.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试通过与JAVA中的继承进行比较来解释GO中的继承。我们首先想提到的是GOLANG没有像JAVA那样的**“Extends”**和**“Implements”**关键字。Go以不同的方式提供有限的“**Extends**”和“**Implements**”功能，各自有其限制。在继续理解GO中的继承之前，有一些值得提及的要点。
- en: Go prefers composition over inheritance. It allows embedding of struct into
    other struct.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go更倾向于组合而非继承。它允许将结构体嵌入到其他结构体中。
- en: Go does not support type inheritance.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go不支持类型继承。
- en: We will start with the simplest of an example of inheritance in GO. Then we
    will list down a limitation or missing feature. In further iterations, we will
    fix limitation or keep adding missing features until we have written a program
    which shows all properties of inheritance possible/impossible in Go. So let’s
    start
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从GO中继承的最简单示例开始。然后列出一个限制或缺失的功能。在后续的迭代中，我们将修复限制或继续添加缺失的功能，直到我们编写出展示GO中继承所有可能/不可能特性的程序。所以让我们开始吧。
- en: The very basic use case of inheritance is child type should be able to access
    common data and methods of a parent type.  This is done in GO via embedding. The base
    struct is embedded in child struct and base’s data and methods can directly be
    accessed by child struct. See below code:  child struct is able to access the
    data **“color”** directly and also call the function **“say()”** directly.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 继承的基本用例是子类型应该能够访问父类型的公共数据和方法。这在GO中通过嵌入实现。基结构体嵌入在子结构体中，子结构体可以直接访问基的数据显示和方法。请参见下面的代码：子结构体能够直接访问数据**“color”**并直接调用函数**“say()”**。
- en: '**Program 1**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**程序1**'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output:**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: One of the limitations of the above program is that you cannot pass the child
    type to a function that expects the base type as GO does not allow type inheritance.
    For example, the below code does not compile and gives an error – “**cannot use
    child (type *child) as type base in argument to check”**
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序的一个限制是，你不能将子类型传递给一个期望基类型的函数，因为GO不允许类型继承。例如，下面的代码无法编译并给出错误——“**无法将child（类型*child）用作传递给check的参数中的类型base**”。
- en: '**Program 2**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**程序2**'
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output:**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The above error tells basically that sub-typing is not possible in GO by just
    using embedding. Let’s try to fix this error. This is where GO interfaces come
    into the picture. See below version of the program which in addition to above
    functionalities also fixes this sub-typing error
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 上述错误基本上说明在GO中仅通过使用嵌入不可能实现子类型。让我们尝试修复这个错误。这就是GO接口派上用场的地方。请参见下面版本的程序，它除了上述功能外，还修复了这个子类型错误。
- en: '**Program 3**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**程序3**'
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Output:**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the above program, we:    (a) Created an interface **“iBase”** which has
    **“say” **method    (b) We changed the **“check” **method to accept the argument
    of type iBase
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们：(a) 创建了一个接口**“iBase”**，其中有**“say”**方法 (b) 我们将**“check”**方法更改为接受iBase类型的参数。
- en: Since base struct implements the **“say”** method and in turn, child struct
    embeds base. So the child method indirectly implements **“say”** method and becomes
    a type of **“iBase”** and that is why we can pass the child to the check function
    now. Great that we have fixed one limitation now using a combination of struct
    and interface.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于基结构体实现了**“say”**方法，反过来，子结构体嵌入了基结构体。因此，子方法间接实现了**“say”**方法，成为**“iBase”**的一种类型，这就是我们现在可以将子结构体传递给check函数的原因。很好，我们现在使用结构体和接口的组合修复了一个限制。
- en: But there is one more limitation. Let’s say child and base both have one more
    function **“clear” . **Now **“say”** method makes a call to **“clear”** method.
    Then when **“say”** method is called using child struct, in turn, **“say”** method will
    call **“clear”** method of base and not **“clear”** method of the child. See below
    example
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但还有一个限制。假设子类和基类都有一个名为 **“clear”** 的函数。现在 **“say”** 方法调用 **“clear”** 方法。当使用子结构调用
    **“say”** 方法时，**“say”** 方法将调用基类的 **“clear”** 方法，而不是子类的 **“clear”** 方法。请见下面的示例。
- en: '**Program 4**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**程序 4**'
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Output:**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see above **“clear”** function of the base is called instead of**“clear”**
    method of the child. This is unlike Java where**“clear”** method of **“child”** would
    have been called.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，上述基类的 **“clear”** 函数被调用，而不是子类的 **“clear”** 方法。这与 Java 不同，在 Java 中会调用
    **“child”** 的 **“clear”** 方法。
- en: One way to fix the above problem is to make **“clear”** as a property which
    is of type function in the base struct. This is possible in GO as functions are
    first-class variables in GO. See below solution
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 解决上述问题的一种方法是将 **“clear”** 作为基结构中的函数类型属性。这在 GO 中是可能的，因为函数是 GO 中的一等公民。请见下面的解决方案。
- en: '**Program 5**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**程序 5**'
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Output:**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let’s try to add one more feature to the above program which is –
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试为上面的程序添加一个新特性——
- en: Multiple Inheritance – child struct should be able to access multiple properties
    and methods from two base struct and also sub-typing should be possible. Here
    is the code
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多重继承——子结构应该能够从两个基础结构访问多个属性和方法，并且子类型化也应该是可能的。以下是代码。
- en: '**Program 6**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**程序 6**'
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Output:**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the above program, the child embeds both base1 and base2\. It can also be
    passed as an instance of iBase1 and iBase2 interface to the check1 and check2
    function respectively. This is how we achieve multiple inheritance.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的程序中，子结构同时嵌入了 base1 和 base2。它也可以作为 iBase1 和 iBase2 接口的实例传递给 check1 和 check2
    函数。这就是我们实现多重继承的方式。
- en: Now a big question is how do we implement **“Type Hierarchy”** in GO. As already
    mentioned type inheritance is not allowed to go and hence it does not have type
    hierarchy.GO intentionally doesn’t allow this feature** so** any change in the
    behavior of an interface is only propagated to its immediate structures which
    defines all methods of the interface.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一个大问题是我们如何在 GO 中实现 **“类型层次结构”**。如前所述，Go 不允许类型继承，因此没有类型层次结构。GO 有意不允许此特性**，因此**
    接口行为的任何变化仅传播到其定义了接口所有方法的直接结构。
- en: Although we can implement type hierarchy using interfaces and struct like below
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们可以像下面这样使用接口和结构体实现类型层次结构。
- en: '**Program 7**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**程序 7**'
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: See in above program how we are able to create a hierarchy (see below). This
    is the idiomatic way of go to create type hierarchy and we are able to achieve
    this by using embedding both on struct level and on the interface level. The point
    to be noted here is that if you want distinction in your type hierarchy where
    lets say a **“shark” ** should not be both **“iAquatic”** and **“iNonAquatic” ** ,
    then there should be at least one method in the method sets of **“iAquatic”**
    and **“iNonAquatic”** which is not present in the other. In our example **“swim” ** and
    **“walk” ** are those methods.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看上面的程序，我们是如何能够创建层次结构的（见下文）。这是 Go 创建类型层次结构的惯用方法，我们通过在结构体层级和接口层级上使用嵌入来实现这一点。需要注意的是，如果你希望在类型层次结构中有所区分，比如
    **“鲨鱼”** 不应该同时是 **“iAquatic”** 和 **“iNonAquatic”**，那么在 **“iAquatic”** 和 **“iNonAquatic”**
    的方法集中，应该至少有一个方法在另一个中不存在。在我们的例子中，**“游泳”** 和 **“行走”** 就是这些方法。
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Conclusion:**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**结论：**'
- en: Go doesn’t have support for type inheritance but the same can be achieved using
    embedding buts one needs to be careful while creating such kind of type hierarchy.
    Also, go does not provide method overriding.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Go 不支持类型继承，但可以通过嵌入实现相同的功能，不过在创建这种类型层次结构时需要谨慎。此外，Go 不提供方法重写。
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*   [inheritance](https://golangbyexample.com/tag/inheritance/)*   [oop](https://golangbyexample.com/tag/oop/)*   [oops](https://golangbyexample.com/tag/oops/)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*   [继承](https://golangbyexample.com/tag/inheritance/)*   [面向对象编程](https://golangbyexample.com/tag/oop/)*   [面向对象程序设计](https://golangbyexample.com/tag/oops/)'
