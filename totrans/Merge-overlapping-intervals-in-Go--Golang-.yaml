- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:44:33'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Merge overlapping intervals in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/merge-overlapping-intervals-golang/](https://golangbyexample.com/merge-overlapping-intervals-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Program](#Program "Program")*  *## **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Given an array of intervals where each interval has a start time and end time,
    merge the overlapping intervals. Two intervals are said to be overlapping if the
    end time of the first interval is greater than the start time of the second interval.
    This is assuming that both the intervals are sorted on start time.
  prefs: []
  type: TYPE_NORMAL
- en: Example.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say we have below two intervals
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Then these intervals are overlapping as the end time of the first interval is
    greater than the start time of the second interval.  Also here the above intervals
    are sorted on start time.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, below two intervals are not overlapping
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: So the objective is to merge overlapping intervals in a given array of intervals
  prefs: []
  type: TYPE_NORMAL
- en: Eg.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Program**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below will be the logic
  prefs: []
  type: TYPE_NORMAL
- en: Sort the interval array on the basis of the start time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start from index 0 and merge overlapping intervals. As mentioned above two intervals
    are said to be overlapping if the end time of the first interval is greater than
    the start time of the second interval
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    – [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  prefs: []
  type: TYPE_NORMAL
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you –[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
