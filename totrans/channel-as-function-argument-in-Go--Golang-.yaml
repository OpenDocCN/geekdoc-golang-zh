- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:08:53'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: channel as function argument in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/channel-function-argument-go/](https://golangbyexample.com/channel-function-argument-go/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Bidirectional channel](#Bidirectional_channel "Bidirectional channel")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Only Send Channel](#Only_Send_Channel "Only Send Channel")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Only Receive Channel](#Only_Receive_Channel "Only Receive Channel")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Channel Pointer](#Channel_Pointer "Channel Pointer ")*  *# Overview'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many ways in which a channel can be passed as a function argument.
    The direction of the arrow for a channel specifies the direction of flow of data
  prefs: []
  type: TYPE_NORMAL
- en: '**chan** : bidirectional channel (Both read and write)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chan <-** : only writing to channel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<- chan** : only reading from the channel (input channel)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***chan** : channel pointer. Both read and write'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bidirectional channel**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Signature of such a bidirectional channel will be like below when passed to
    a function as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:** 2'
  prefs: []
  type: TYPE_NORMAL
- en: '**Only Send Channel**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Signature of such a  channel to which only you can send will be like below when
    passed to a function as an argument.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When trying to receive data from such a channel will give below error.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Try uncommenting below line in the code to see the above error
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:** 2'
  prefs: []
  type: TYPE_NORMAL
- en: '**Only Receive Channel**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Signature of the such a  channel from which you can only receive data will be
    like below  when passed to a function as an argument
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When trying to send data to such a channel will give below error.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Try uncommenting below line in the code to see the above error
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:** 2'
  prefs: []
  type: TYPE_NORMAL
- en: '**Channel Pointer**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This way of passing a channel would only make sense if you would want to modify
    the channel. This is very uncommon and not a preferable way to use. Signature
    of the such a channel which is passed as a pointer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:** 2*'
  prefs: []
  type: TYPE_NORMAL
