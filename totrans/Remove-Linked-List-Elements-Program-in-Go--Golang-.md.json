["```\nInput: [1, 2, 1, 3, 6], 1\nOutput: [2, 3, 6]\n```", "```\nInput: [2, 2, 3], 2\nOutput: [3]\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype ListNode struct {\n\tVal  int\n\tNext *ListNode\n}\n\ntype SingleList struct {\n\tLen  int\n\tHead *ListNode\n}\n\nfunc (s *SingleList) AddFront(num int) *ListNode {\n\tele := &ListNode{\n\t\tVal: num,\n\t}\n\tif s.Head == nil {\n\t\ts.Head = ele\n\t} else {\n\t\tele.Next = s.Head\n\t\ts.Head = ele\n\t}\n\ts.Len++\n\treturn ele\n}\nfunc removeElements(head *ListNode, val int) *ListNode {\n\tvar prev *ListNode\n\n\tcurr := head\n\n\tfor curr != nil {\n\t\tif curr.Val == val {\n\t\t\tif prev == nil {\n\t\t\t\thead = curr.Next\n\t\t\t} else {\n\t\t\t\tprev.Next = curr.Next\n\t\t\t}\n\t\t} else {\n\t\t\tprev = curr\n\t\t}\n\t\tcurr = curr.Next\n\n\t}\n\n\treturn head\n}\n\nfunc main() {\n\tfirst := initList()\n\tfirst.AddFront(6)\n\tfirst.AddFront(3)\n\tfirst.AddFront(1)\n\tfirst.AddFront(2)\n\tfirst.AddFront(1)\n\n\tresult := removeElements(first.Head, 1)\n\tfmt.Println(\"Resultant First List\")\n\tresult.Traverse()\n\n\tfirst = initList()\n\tfirst.AddFront(3)\n\tfirst.AddFront(2)\n\tfirst.AddFront(2)\n\n\tfmt.Println(\"\\nResultant Second List\")\n\tresult = removeElements(first.Head, 2)\n\tresult.Traverse()\n\n}\n\nfunc initList() *SingleList {\n\treturn &SingleList{}\n}\n\nfunc (l *ListNode) Traverse() {\n\tfor l != nil {\n\t\tfmt.Println(l.Val)\n\t\tl = l.Next\n\t}\n}\n```", "```\nResultant First List\n2\n3\n6\n\nResultant Second List\n3\n```"]