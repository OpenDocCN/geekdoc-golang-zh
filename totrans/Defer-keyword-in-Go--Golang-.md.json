["```\ndefer {function_or_method_call}\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"os\"\n)\n\nfunc main() {\n    err := writeToTempFile(\"Some text\")\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n    fmt.Printf(\"Write to file succesful\")\n}\n\nfunc writeToTempFile(text string) error {\n    file, err := os.Open(\"temp.txt\")\n    if err != nil {\n        return err\n    }\n    n, err := file.WriteString(\"Some text\")\n    if err != nil {\n        return err\n    }\n    fmt.Printf(\"Number of bytes written: %d\", n)\n    file.Close()\n    return nil\n}\n```", "```\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"os\"\n)\n\nfunc main() {\n    err := writeToTempFile(\"Some text\")\n    if err != nil {\n        log.Fatalf(err.Error())\n    }\n    fmt.Printf(\"Write to file succesful\")\n}\n\nfunc writeToTempFile(text string) error {\n    file, err := os.Open(\"temp.txt\")\n    if err != nil {\n        return err\n    }\n    defer file.Close()\n\n    n, err := file.WriteString(\"Some text\")\n    if err != nil {\n        return err\n    }\n    fmt.Printf(\"Number of bytes written: %d\", n)\n    return nil\n}\n```", "```\npackage main\nimport \"fmt\"\nfunc main() {\n    defer test()\n    fmt.Println(\"Executed in main\")\n}\nfunc test() {\n    fmt.Println(\"In Defer\")\n}\n```", "```\nExecuted in main\nIn Defer\n```", "```\nExecuted in main\n```", "```\nIn Defer\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    defer func() { fmt.Println(\"In inline defer\") }()\n    fmt.Println(\"Executed\")\n}\n```", "```\nExecuted\nIn inline defer\n```", "```\ndefer func() { fmt.Println(\"In inline defer\") }()\n```", "```\nexpression in defer must be function call\n```", "```\nExecuted in main\n```", "```\nIn inline Defer\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tdefer fmt.Println(\"Defer in main\")\n\tfmt.Println(\"Stat main\")\n\tf1()\n\tfmt.Println(\"Finish main\")\n}\n\nfunc f1() {\n\tdefer fmt.Println(\"Defer in f1\")\n\tfmt.Println(\"Start f1\")\n\tf2()\n\tfmt.Println(\"Finish f1\")\n}\n\nfunc f2() {\n\tdefer fmt.Println(\"Defer in f2\")\n\tfmt.Println(\"Start f2\")\n\tfmt.Println(\"Finish f2\")\n}\n```", "```\nStat main\nStart f1\nStart f2\nFinish f2\nDefer in f2\nFinish f1\nDefer in f1\nFinish main\nDefer in main\n```", "```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tsample := \"abc\"\n\n\tdefer fmt.Printf(\"In defer sample is: %s\\n\", sample)\n\tsample = \"xyz\"\n}\n```", "```\nIn defer sample is: abc\n```", "```\npackage main\nimport \"fmt\"\nfunc main() {\n    i := 0\n    i = 1\n    defer fmt.Println(i)\n    i = 2\n    defer fmt.Println(i)\n    i = 3\n    defer fmt.Println(i)\n}\n```", "```\n3\n2\n1\n```", "```\n3\n2\n1\n```", "```\npackage main\nimport \"fmt\"\nfunc main() {\n    s := test()\n    fmt.Println(s)\n}\nfunc test() (size int) {\n    defer func() { size = 20 }()\n    size = 30\n    return\n}\n```", "```\n20\n```", "```\npackage main\nimport \"fmt\"\nfunc main() {\n    defer fmt.Println(\"Defer in main\")\n    panic(\"Panic with Defer\")\n    fmt.Println(\"After painc in f2\")\n}\n```", "```\nDefer in main\npanic: Panic Create\n\ngoroutine 1 [running]:\nmain.main()\n        /Users/slohia/go/src/github.com/golang-examples/articles/tutorial/panicRecover/deferWithPanic/main.go:7 +0x95\nexit status 2\n```", "```\nDefer in main\n```"]