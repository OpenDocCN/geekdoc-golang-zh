- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:50:09'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:50:09
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Longest Common Prefix in a set of strings in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go（Golang）中的字符串集合的最长公共前缀
- en: 来源：[https://golangbyexample.com/longest-common-prefix-golang/](https://golangbyexample.com/longest-common-prefix-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/longest-common-prefix-golang/](https://golangbyexample.com/longest-common-prefix-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *## **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *## **概述**'
- en: An array of strings is given. The objective is to find the longest common prefix
    from that array of strings.  It should output an empty string if there is no common
    prefix.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个字符串数组，目标是找到该数组中最长的公共前缀。如果没有公共前缀，应该输出空字符串。
- en: Example 1
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Example 2
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Program**'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Below is the program for the same
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相同的程序
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output:**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 请查看我们的Golang高级教程。本系列的教程内容详尽，力求涵盖所有概念及示例。此教程适合希望获得专业知识和扎实理解的Golang学习者
    - [Golang综合教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you -[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解所有设计模式如何在Golang中实现，那么这篇文章就是为你准备的 - [所有设计模式Golang](https://golangbyexample.com/all-design-patterns-golang/)
- en: Also, check out our system design tutorial series here - [System Design Tutorial
    Series](https://techbyexample.com/system-design-questions/)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以查看我们的系统设计教程系列 - [系统设计教程系列](https://techbyexample.com/system-design-questions/)
- en: '[go](https://golangbyexample.com/tag/go/)*'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*'
