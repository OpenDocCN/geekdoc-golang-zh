["```\n[2, 0 , 2, 1, 3, 1]\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype customStack struct {\n\tstack []int\n}\n\nfunc (c *customStack) Push(num int) {\n\tc.stack = append(c.stack, num)\n}\n\nfunc (c *customStack) Pop() (int, error) {\n\tlength := len(c.stack)\n\tpoppedItem := 0\n\tif length > 0 {\n\t\tpoppedItem = c.stack[length-1]\n\t\tc.stack = c.stack[:length-1]\n\t\treturn poppedItem, nil\n\t}\n\treturn 0, fmt.Errorf(\"stack is empty\")\n}\n\nfunc (c *customStack) Front() (int, error) {\n\tlength := len(c.stack)\n\tif length > 0 {\n\t\treturn c.stack[length-1], nil\n\t}\n\treturn 0, fmt.Errorf(\"stack is empty\")\n}\n\nfunc (c *customStack) Size() int {\n\treturn len(c.stack)\n}\n\nfunc largestRectangleArea(heights []int) int {\n\tcustomStack := &customStack{}\n\n\tlenHeights := len(heights)\n\n\tcustomStack.Push(0)\n\n\tmaxRectangleSize := heights[0]\n\n\tfor i := 1; i < lenHeights; i++ {\n\n\t\tfor customStack.Size() != 0 {\n\t\t\tcurrent, _ := customStack.Front()\n\t\t\tif heights[current] > heights[i] {\n\t\t\t\tvar rectangleUsingCurrentBar int\n\t\t\t\tcurrent, _ := customStack.Pop()\n\t\t\t\t//Calcualte max rectangle using the current front\n\t\t\t\tprevious, err := customStack.Front()\n\t\t\t\tif err != nil {\n\t\t\t\t\tprevious = -1\n\t\t\t\t}\n\t\t\t\trectangleUsingCurrentBar = (i - previous - 1) * heights[current]\n\t\t\t\tif rectangleUsingCurrentBar > maxRectangleSize {\n\t\t\t\t\tmaxRectangleSize = rectangleUsingCurrentBar\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tcustomStack.Push(i)\n\t}\n\n\tfront, err := customStack.Front()\n\tif err != nil {\n\t\treturn maxRectangleSize\n\t}\n\tvar rectangleUsingCurrentBar int\n\tfor customStack.Size() != 0 {\n\t\tcurrent, _ := customStack.Pop()\n\t\tprevious, err := customStack.Front()\n\t\tif err != nil {\n\t\t\tprevious = -1\n\t\t}\n\t\trectangleUsingCurrentBar = (front - previous) * heights[current]\n\t\tif rectangleUsingCurrentBar > maxRectangleSize {\n\t\t\tmaxRectangleSize = rectangleUsingCurrentBar\n\t\t}\n\t}\n\treturn maxRectangleSize\n}\n\nfunc main() {\n\toutput := largestRectangleArea([]int{2, 0, 2, 1, 3, 1})\n\tfmt.Println(output)\n} \n```", "```\n4\n```"]