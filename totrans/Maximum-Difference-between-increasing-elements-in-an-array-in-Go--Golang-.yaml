- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:49:48'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:49:48
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Maximum Difference between increasing elements in an array in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Go (Golang)中数组中递增元素之间的最大差异
- en: 来源：[https://golangbyexample.com/maximum-difference-increasing-elements-in-an-array-golang/](https://golangbyexample.com/maximum-difference-increasing-elements-in-an-array-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/maximum-difference-increasing-elements-in-an-array-golang/](https://golangbyexample.com/maximum-difference-increasing-elements-in-an-array-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "概述")'
- en: '[Program](#Program "Program")*  *## **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "程序")*  *## **概述**'
- en: An array is given. The objective is to find the maximum difference between values
    at two indexes i and j such that
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个数组。目标是找到两个索引i和j之间的最大差异，使得
- en: j > i
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: j > i
- en: arr[j] > arr[i]
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: arr[j] > arr[i]
- en: If no such indexes exist then return -1
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不存在这样的索引，则返回-1
- en: Example 1
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Example 2
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Program**'
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Here is the program for the same.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是相应的程序。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Note:** Check out our Golang Advanced Tutorial. The tutorials in this series
    are elaborative and we have tried to cover all concepts with examples. This tutorial
    is for those who are looking to gain expertise and a solid understanding of golang
    - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 请查看我们的Golang高级教程。本系列教程内容详尽，尽力涵盖所有概念并附带示例。该教程适合希望获得专业知识和扎实理解的Golang学习者
    - [Golang高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)'
- en: Also if you are interested in understanding how all design patterns can be implemented
    in Golang. If yes, then this post is for you -[All Design Patterns Golang](https://golangbyexample.com/all-design-patterns-golang/)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解如何在Golang中实现所有设计模式。如果是的话，这篇文章适合你 - [所有设计模式 Golang](https://golangbyexample.com/all-design-patterns-golang/)
- en: '[go](https://golangbyexample.com/tag/go/)*'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[go](https://golangbyexample.com/tag/go/)*'
