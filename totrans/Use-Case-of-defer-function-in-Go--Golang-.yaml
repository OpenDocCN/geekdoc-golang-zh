- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:26:42'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Use Case of defer function in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/defer-use-case-go/](https://golangbyexample.com/defer-use-case-go/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Example](#Example "Example")*  *# **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defer as the name suggests is used to defer the cleanup activities in a function.
    These cleanup activities will be performed at the end of the function. This cleanup
    activities will be done in a different function called by defer.  This different
    function is called at the end of the surrounding function before it returns. Below
    is the syntax of defer function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: One good example of understanding the use case defer function is to look at
    the use case of writing to a file. A file that is opened for writing also must
    to be closed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the above program, in the **writeToTempFile** function, we are opening a
    file and then trying to write some content to the file. After we have written
    the contents of the file we close the file. It is possible that during the write
    operation it might result into an error and function will return without closing
    the file. **Defer** function helps to avoid these kinds of problems. **Defer** function
    is always executed before the surrounding function returns. Let’s rewrite the
    above program with a **defer** function here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the above program, we do **defer file.Close()** after opening the file. This
    will make sure that closing of the file is executed even if the write to the file
    results into an error. Defer function makes sure that the file will be closed
    regardless of number of return statements in the function
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
