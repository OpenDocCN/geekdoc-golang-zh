- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-10-13 06:38:29'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:38:29
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Return 404 (Resource Not Found) Status Code in http response in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Go（Golang）中返回404（资源未找到）HTTP响应状态码。
- en: 来源：[https://golangbyexample.com/404-http-status-code-golang/](https://golangbyexample.com/404-http-status-code-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/404-http-status-code-golang/](https://golangbyexample.com/404-http-status-code-golang/)
- en: Table of Contents
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Overview](#Overview "Overview")'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [概述](#Overview "Overview")'
- en: '[Program](#Program "Program")*  *## **Overview**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[程序](#Program "Program")*  *## **概述**'
- en: http package of golang provides the status code constant which could be used
    to return different status codes- [https://golang.org/src/net/http/status.go](https://golang.org/src/net/http/status.go)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: golang的HTTP包提供了可以用于返回不同状态码的状态码常量 - [https://golang.org/src/net/http/status.go](https://golang.org/src/net/http/status.go)
- en: The same can also be used to return the 404 (Resource Not Found) http status
    code. The http 404 status code is defined by the below constant
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 同样也可以用于返回404（资源未找到）HTTP状态码。HTTP 404状态码由下面的常量定义。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this article, we will also see how to return a JSON body along with the 404
    (Resource Not Found) http status code
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们还将看到如何在返回404（资源未找到）HTTP状态码时返回JSON正文。
- en: '**Program**'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**程序**'
- en: Below is the program for the same
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是相同的程序。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here we are using the **WriteHeader** function to specify the 404 http status
    code and uses the **Write** function to also return the response bodyThe above
    code returns the below JSON request body back in response
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用**WriteHeader**函数指定404 HTTP状态码，并使用**Write**函数返回响应正文。上述代码将下面的JSON请求正文返回作为响应。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run the above program. It will start a server on 8080 port on your local machine.
    Now make the below curl call to the server
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述程序。它将在你的本地机器上启动一个8080端口的服务器。现在对服务器进行如下curl调用。
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Below will be the output
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下面将是输出。
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see from the output, it correctly returns the **404** status code
    along with the body.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看出，它正确地返回了**404**状态码及其正文。
- en: You can also directly pass 404 to the **WriteHeader** function to send the 404
    response.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以直接将404传递给**WriteHeader**函数来发送404响应。
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This also works correctly. Try it out.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这也能正常工作。试试看。
- en: '**net/http** package of golang also provides a **"NotFound"** handler that
    could be used to return a 404 for a particular API every time.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: golang的**net/http**包也提供了一个**"NotFound"**处理程序，可以用于每次返回特定API的404。
- en: '[https://golang.org/pkg/net/http/#NotFound](https://golang.org/pkg/net/http/#NotFound)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://golang.org/pkg/net/http/#NotFound](https://golang.org/pkg/net/http/#NotFound)'
- en: This handler function return 404 status and below response body
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序函数返回404状态及下面的响应正文。
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Below is the simple program for the same
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是相同的简单程序。
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the above program, we simply specified the NotFound handler for **localhost:8080/example**
    API as below
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述程序中，我们简单地为**localhost:8080/example** API指定了NotFound处理程序，如下所示。
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Run the above program. It will start a server on 8080 port on your local machine.
    Now make the below curl call to the server
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述程序。它将在你的本地机器上启动一个8080端口的服务器。现在对服务器进行如下curl调用。
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Also, check out our Golang advance tutorial Series - [Golang Advance Tutorial](https://golangbyexample.com/golang-comprehensive-tutorial/)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请查看我们的Golang高级教程系列 - [Golang高级教程](https://golangbyexample.com/golang-comprehensive-tutorial/)
- en: '[404](https://golangbyexample.com/tag/404/)*   [go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[404](https://golangbyexample.com/tag/404/)*   [go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*'
