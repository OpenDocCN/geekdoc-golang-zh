- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:03:09'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Proxy Design Pattern in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/proxy-design-pattern-in-golang/](https://golangbyexample.com/proxy-design-pattern-in-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Note: Interested in understanding how all other design patterns can be implemented
    in GO. Please see this full reference – [All Design Patterns in Go (Golang)](https://golangbyexample.com/all-design-patterns-golang/)'
  prefs: []
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Introduction: ](#Introduction "Introduction: ")'
  prefs: []
  type: TYPE_NORMAL
- en: '[UML Diagram:](#UML_Diagram "UML Diagram:")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Mapping ](#Mapping "Mapping ")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Practical Example:](#Practical_Example "Practical Example:")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Full Working Code:](#Full_Working_Code "Full Working Code:")*  *## **Introduction: **'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proxy Design Pattern is a structural design pattern. This pattern suggests providing
    an extra layer of indirection for controlled and intelligent access to the main
    object.
  prefs: []
  type: TYPE_NORMAL
- en: In this pattern, a new proxy class is created that implements the same interface
    as the main object. This lets you execute some behavior before the actual logic
    of the main object. Let’s understand it more with an example
  prefs: []
  type: TYPE_NORMAL
- en: A debit card is a proxy for your bank account. It follows the same interface
    as the bank account, and it is easier to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A web server such as Nginx can act as a proxy for your application server. It
    provides
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Controlled access to your application server – For example, it can do rate limiting
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional behavior – For example, it can do some caching
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’ss see the UML Diagram
  prefs: []
  type: TYPE_NORMAL
- en: '**UML Diagram:**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In below UML diagram
  prefs: []
  type: TYPE_NORMAL
- en: '**Subject:** it represents the interface which proxy and the realSubject should
    follow'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Proxy**: The proxy class embeds the realSubject and passes on the request
    to the realSubject after it has finished its processing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RealSubject**: This is the class that holds the main business logic and which
    is kept behind a proxy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client:** Can interact with both proxy and realSubject as they both follow
    the same interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/998f1371838be82becbb7346fc92376b.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: Below is the corresponding mapping UML diagram with the practical example of
    nginx and application server which was described above.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47e93f74bd4018b8fcd5979ebbfa5cf2.png)'
  prefs:
  - PREF_UL
  type: TYPE_IMG
- en: '**Mapping **'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The below table represents the mapping from the UML diagram actors to actual
    implementation actors in code
  prefs: []
  type: TYPE_NORMAL
- en: '| subject | server.go |'
  prefs: []
  type: TYPE_TB
- en: '| proxy | nginx.go |'
  prefs: []
  type: TYPE_TB
- en: '| realSubject | application.go |'
  prefs: []
  type: TYPE_TB
- en: '| client | main.go |'
  prefs: []
  type: TYPE_TB
- en: '**Practical Example:**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**server.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**nginx.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**application.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**main.go**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Full Working Code:**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[design pattern](https://golangbyexample.com/tag/design-pattern/)*   [go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*   [proxy
    design pattern](https://golangbyexample.com/tag/proxy-design-pattern/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
