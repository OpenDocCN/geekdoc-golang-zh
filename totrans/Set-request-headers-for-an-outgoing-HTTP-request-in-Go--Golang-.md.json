["```\ntype Header map[string][]string\n```", "```\nContent-Type\nAccept-Encoding\n```", "```\nuser-agent: goapplication\nfoo: bar1\nfoo: bar2\n```", "```\nUser-Agent: goapplication\nFoo: bar1\nFoo: bar2\n```", "```\nuser-agent: goapplication\nfoo: bar1\nfoo: bar2\n```", "```\ntype Request struct {\n    Method string\n    Header Header\n    ...\n}\n```", "```\nfunc (h Header) Add(key, value string)\n```", "```\nr.Header.Add(\"foo\", \"bar1\")\nr.Header.Add(\"foo\", \"bar2\")\n```", "```\nfunc (h Header) Set(key, value string)\n```", "```\npackage main\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"time\"\n)\nfunc main() {\n    call(\"https://google.com\", \"GET\")\n}\nfunc call(url, method string) error {\n    client := &http.Client{\n        Timeout: time.Second * 10,\n    }\n    req, err := http.NewRequest(method, url, nil)\n    if err != nil {\n        return fmt.Errorf(\"Got error %s\", err.Error())\n    }\n    req.Header.Set(\"user-agent\", \"golang application\")\n    req.Header.Add(\"foo\", \"bar1\")\n    req.Header.Add(\"foo\", \"bar2\")\n    response, err := client.Do(req)\n    if err != nil {\n        return fmt.Errorf(\"Got error %s\", err.Error())\n    }\n    defer response.Body.Close()\n    return nil\n}\n```", "```\nreq.Header.Set(\"user-agent\", \"goapplication\")\nreq.Header.Add(\"foo\", \"bar1\")\nreq.Header.Add(\"foo\", \"bar2\")\n```"]