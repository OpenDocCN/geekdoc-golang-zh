- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-10-13 06:02:48'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-10-13 06:02:48
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Strategy Design Pattern in Go (Golang)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go（Golang）中的策略设计模式
- en: 来源：[https://golangbyexample.com/strategy-design-pattern-golang/](https://golangbyexample.com/strategy-design-pattern-golang/)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://golangbyexample.com/strategy-design-pattern-golang/](https://golangbyexample.com/strategy-design-pattern-golang/)
- en: 'Note: Interested in understanding how all other design patterns can be implemented
    in GO. Please see this full reference – [All Design Patterns in Go (Golang)](https://golangbyexample.com/all-design-patterns-golang/)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：有兴趣了解其他所有设计模式如何在 GO 中实现吗？请查看这个完整的参考 – [Go（Golang）中的所有设计模式](https://golangbyexample.com/all-design-patterns-golang/)
- en: Table of Contents
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 目录
- en: '**   [Definition: ](#Definition "Definition:  ")'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**   [定义：](#Definition "定义： ")'
- en: '[When to Use](#When_to_Use "When to Use")'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[何时使用](#When_to_Use "何时使用")'
- en: '[UML Diagram](#UML_Diagram "UML Diagram")'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[UML 图](#UML_Diagram "UML 图")'
- en: '[Mapping](#Mapping "Mapping")'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[映射](#Mapping "映射")'
- en: '[Practical Example](#Practical_Example "Practical Example ")*  *## **Definition: **'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[实用例子](#Practical_Example "实用例子")*  *## **定义：**'
- en: Strategy design pattern is a behavioral design pattern. This design pattern
    allows you to change the behavior of an object at run time without any change
    in the class of that object.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 策略设计模式是一种行为设计模式。该设计模式允许你在运行时更改对象的行为，而无需更改该对象的类。
- en: Let’s understand the strategy pattern with an example. Suppose you are building
    an In-Memory-Cache. Since it is an In-Memory-Cache it is of limited size. Whenever
    it reaches its maximum size that some old entries from the cache need to be evicted.
    This eviction can happen via several algorithms. Some of the popular algorithms
    are
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子理解策略模式。假设你正在构建一个内存缓存。由于它是内存缓存，因此其大小有限。当它达到最大大小时，需要驱逐一些旧条目。驱逐可以通过几种算法进行。一些流行的算法包括
- en: '**LRU** – Least Recently Used: Remove the entry which has been used least recently.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**LRU** – 最近最少使用：移除最近最少使用的条目。'
- en: '**FIFO** – First In First Out: Remove the entry, which was created first.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**FIFO** – 先进先出：移除第一个创建的条目。'
- en: '**LFU** – Least Frequently Used: Remove the entry which was least frequently
    used.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**LFU** – 最少使用：移除使用频率最低的条目。'
- en: Now the problem is how to decouple our Cache class with the algorithm such that
    we should be able to change the algorithm at run time. Also Cache class should
    not change when a new algorithm is being added. This is were Strategy Pattern
    comes into the picture. The strategy pattern suggests creating a family of the
    algorithm with each algorithm having its own class. Each of these classes follows
    the same interface and this makes the algorithm interchangeable within the family.
    Let’s say the common interface name is **evictionAlgo**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的问题是如何将我们的 Cache 类与算法解耦，以便我们能够在运行时更改算法。同时，在添加新算法时，Cache 类也不应改变。这就是策略模式发挥作用的地方。策略模式建议创建一组算法，每个算法都有自己的类。这些类遵循相同的接口，这使得算法在这个家族中是可以互换的。假设通用接口的名称是
    **evictionAlgo**。
- en: Now our main **Cache** class will embed **evictionAlgo** interface. Instead
    of implementing all types of eviction algorithms in itself, our Cache class will
    delegate all it to the **evictionAlgo** interface. Since evictionAlgo is an interface,
    we can run time change the algorithm to either be LRU, FIFO, LFU without any change
    in Cache class.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的主要 **Cache** 类将嵌入 **evictionAlgo** 接口。我们的缓存类不会在内部实现所有类型的驱逐算法，而是将所有任务委托给
    **evictionAlgo** 接口。由于 evictionAlgo 是一个接口，我们可以在运行时将算法更改为 LRU、FIFO 或 LFU，而无需修改
    Cache 类。
- en: '**When to Use**'
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**何时使用**'
- en: When an object needs to support different behavior and you want to change the
    behavior at run time.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个对象需要支持不同的行为，并且你希望在运行时更改该行为时。
- en: When you want to avoid a lot of conditionals of choosing the runtime behavior.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你想避免大量选择运行时行为的条件语句时。
- en: When you have different algorithms that are similar and they only differ in
    the way they execute some behavior.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你有不同的算法，它们相似但仅在执行某些行为的方式上有所不同时。
- en: '**UML Diagram**'
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**UML 图**'
- en: Notice below UML diagram, Context (Cache) embeds the strategy (evictionAlgo)
    interface.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注意下面的 UML 图，上下文（Cache）嵌入了策略（evictionAlgo）接口。
- en: '![](img/aef4edd1723b8a558d2c0c0a423d93a0.png)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![](img/aef4edd1723b8a558d2c0c0a423d93a0.png)'
- en: Below is the corresponding mapping UML diagram with the example given above
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是与上述示例相对应的 UML 图
- en: '![](img/5a6af0d3d709086edf4602accffa8979.png)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_IMG
  zh: '![](img/5a6af0d3d709086edf4602accffa8979.png)'
- en: '**Mapping**'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**映射**'
- en: The below table represents the mapping from the UML diagram actors to actual
    implementation actors in code.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格表示UML图中的参与者与代码中实际实现参与者的映射。
- en: '| Context | cache.go |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 上下文 | cache.go |'
- en: '| Strategy | evictionAlgo.go |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 策略 | evictionAlgo.go |'
- en: '| Concrete Strategy Object 1 | lfu.go |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 具体策略对象 1 | lfu.go |'
- en: '| Concrete Strategy Object 2 | lru.go |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 具体策略对象 2 | lru.go |'
- en: '| Concrete Strategy Object 3 | fifo.go |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 具体策略对象 3 | fifo.go |'
- en: '| Client | main.go |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 客户端 | main.go |'
- en: '**Practical Example**'
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**实际示例**'
- en: '**evictionAlgo.go**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**evictionAlgo.go**'
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**fifo.go**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**fifo.go**'
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**lru.go**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**lru.go**'
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**lfu.go**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**lfu.go**'
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**cache.go**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**cache.go**'
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**main.go**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**main.go**'
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Output:**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[design pattern](https://golangbyexample.com/tag/design-pattern/)*   [go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*   [strategy
    design pattern](https://golangbyexample.com/tag/strategy-design-pattern/)*   [strategy
    design pattern in golang](https://golangbyexample.com/tag/strategy-design-pattern-in-golang/)*'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[设计模式](https://golangbyexample.com/tag/design-pattern/) *   [Go](https://golangbyexample.com/tag/go/)
    *   [Golang](https://golangbyexample.com/tag/golang/) *   [策略设计模式](https://golangbyexample.com/tag/strategy-design-pattern/)
    *   [Golang中的策略设计模式](https://golangbyexample.com/tag/strategy-design-pattern-in-golang/)
    *'
