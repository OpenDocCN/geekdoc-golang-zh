["```\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    a := []int{5, 6}\n    val, err := checkAndGet(a, 2)\n    fmt.Printf(\"Val: %d\\n\", val)\n    fmt.Println(\"Error: \", err)\n}\nfunc checkAndGet(a []int, index int) (int, error) {\n    defer handleOutOfBounds()\n    if index > (len(a) - 1) {\n        panic(\"Out of bound access for slice\")\n    }\n    return a[index], nil\n}\nfunc handleOutOfBounds() {\n    if r := recover(); r != nil {\n        fmt.Println(\"Recovering from panic:\", r)\n    }\n}\n```", "```\nRecovering from panic: Out of bound access for slice\nVal: 0\nError: \n```", "```\nRecovering from panic: Out of bound access for slice\n```", "```\nval, err := checkAndGet(a, 2)\n```", "```\nfmt.Printf(\"Val: %d\\n\", val)\n```", "```\nVal: 0\n```", "```\nfmt.Println(\"Error: \", err)\n```", "```\nError: \n```", "```\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    a := []int{5, 6}\n    val, err := checkAndGet(a, 2)\n    fmt.Printf(\"Val: %d\\n\", val)\n    fmt.Println(\"Error: \", err)\n}\nfunc checkAndGet(a []int, index int) (value int, err error) {\n    value = 10\n    defer handleOutOfBounds()\n    if index > (len(a) - 1) {\n        panic(\"Out of bound access for slice\")\n    }\n    value = a[index]\n    return value, nil\n}\nfunc handleOutOfBounds() {\n    if r := recover(); r != nil {\n        fmt.Println(\"Recovering from panic:\", r)\n    }\n}\n```", "```\nRecovering from panic: Out of bound access for slice\nVal: 10\nError: \n```", "```\nfunc checkAndGet(a []int, index int) (value int, err error)\n```", "```\nvalue = 10\n```", "```\nRecovering from panic: Out of bound access for slice\nVal: 10\nError: \n```"]