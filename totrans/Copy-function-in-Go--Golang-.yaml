- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:18:40'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Copy function in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/copy-function-in-golang/](https://golangbyexample.com/copy-function-in-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: go **builtin** package provides **copy** function that can be used to copy a
    slice. Below is the signature of this function. It takes in two slices **dst**
    and **src**, and copies data from **src** to **dst**. It returns the number of
    elements copied.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As the signature suggests the copy function can be used to copy slice of different
    types from src to dst. There are two cases to be considered while using the copy
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: If the length of **src** is greater than the length of **dst**, then the number
    of elements copied is the length of **dst**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the length of **dst** is greater than length of **src,** then number of elements
    copied is length of **src**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basically the number of elements copied is minimum of length of **(src, dst). **
  prefs: []
  type: TYPE_NORMAL
- en: Also to note that once the copy is done then any change in **dst** will not
    reflect in **src** and vice versa unless both **src** and **dst** refer to the
    same slice.
  prefs: []
  type: TYPE_NORMAL
- en: Simple copy example for an integer type illustrating above points
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**copy function for string**'
  prefs: []
  type: TYPE_NORMAL
- en: A string in go is nothing but a sequence of bytes. Hence it is legal to copy
    a string to a slice of bytes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: While using a copy function the source and destination can overlap too. So it
    is possible to copy from a slice to itself as well. In below example we copy the
    last 2 elements of the slice to the starting two elements in same order
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Conclusion**'
  prefs: []
  type: TYPE_NORMAL
- en: This is all about copy function in go. Hope you have liked this article.
  prefs: []
  type: TYPE_NORMAL
