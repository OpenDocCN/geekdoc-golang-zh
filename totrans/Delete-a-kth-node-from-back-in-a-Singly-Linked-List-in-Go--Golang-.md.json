["```\nA-> B-> C-> D-> E-> F-> Null\n```", "```\nA-> B-> C-> E-> F-> Null\n```", "```\npackage main\n\nimport \"fmt\"\n\ntype node struct {\n\tdata string\n\tnext *node\n}\n\ntype singlyLinkedList struct {\n\tlen  int\n\thead *node\n}\n\nfunc initList() *singlyLinkedList {\n\treturn &singlyLinkedList{}\n}\n\nfunc (s *singlyLinkedList) AddFront(data string) {\n\tnode := &node{\n\t\tdata: data,\n\t}\n\tif s.head == nil {\n\t\ts.head = node\n\t} else {\n\t\tnode.next = s.head\n\t\ts.head = node\n\t}\n\ts.len++\n\treturn\n}\n\nfunc (s *singlyLinkedList) Traverse() error {\n\tif s.head == nil {\n\t\treturn fmt.Errorf(\"TraerseList: List is empty\")\n\t} else {\n\t\tcurrent := s.head\n\t\tfor current != nil {\n\t\t\tfmt.Println(current.data)\n\t\t\tcurrent = current.next\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (s *singlyLinkedList) RemovekthFromEnd(k int) error {\n\tif s.head == nil {\n\t\treturn fmt.Errorf(\"List is empty\")\n\t}\n\tif k > s.len {\n\t\treturn fmt.Errorf(\"Err: Given number is greater than linked list length\")\n\t}\n\n\tif k == s.len {\n\t\ts.head = s.head.next\n\t} else {\n\t\tvar prev *node\n\t\tcurrent := s.head\n\t\tfor i := 1; i < s.len-k+1; i++ {\n\t\t\tprev = current\n\t\t\tcurrent = current.next\n\t\t}\n\t\tprev.next = current.next\n\t}\n\ts.len--\n\treturn nil\n}\n\nfunc main() {\n\tsingleList := initList()\n\tfmt.Printf(\"AddFront: F\\n\")\n\tsingleList.AddFront(\"F\")\n\tfmt.Printf(\"AddFront: E\\n\")\n\tsingleList.AddFront(\"E\")\n\tfmt.Printf(\"AddFront: D\\n\")\n\tsingleList.AddFront(\"D\")\n\tfmt.Printf(\"AddFront: C\\n\")\n\tsingleList.AddFront(\"C\")\n\tfmt.Printf(\"AddFront: B\\n\")\n\tsingleList.AddFront(\"B\")\n\tfmt.Printf(\"AddFront: A\\n\")\n\tsingleList.AddFront(\"A\")\n\n\tfmt.Println(\"Traversal\")\n\terr := singleList.Traverse()\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n\n\t// Remove 5th node from back\n\tfmt.Println(\"\\nRemoving 5th node from the end\")\n\terr = singleList.RemovekthFromEnd(5)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n\tfmt.Println(\"Traversal after 5th node is removed from the end\")\n\terr = singleList.Traverse()\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n\n\t// Remove first node from back\n\tfmt.Println(\"\\nRemoving 1st node from the end\")\n\terr = singleList.RemovekthFromEnd(1)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n\tfmt.Println(\"Traversal after 1st node is removed from the end\")\n\terr = singleList.Traverse()\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n\n\t// Trying to delete node from a place greater than list size\n\tfmt.Println(\"\\nTrying to delete node from a place greater than list size\")\n\terr = singleList.RemovekthFromEnd(7)\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n}\n```", "```\nAddFront: F\nAddFront: E\nAddFront: D\nAddFront: C\nAddFront: B\nAddFront: A\nTraversal\nA\nB\nC\nD\nE\nF\n\nRemoving 5th node from the end\nTraversal after 5th node is removed from the end\nA\nC\nD\nE\nF\n\nRemoving 1st node from the end\nTraversal after 1st node is removed from the end\nA\nC\nD\nE\n\nTrying to delete a node from a place greater than list size\nErr: Given number is greater than linked list length\n```", "```\nA-> B-> C-> D-> E-> F-> Null\n```", "```\nA\nC\nD\nE\nF\n```", "```\nA\nC\nD\nE\n```", "```\nErr: Given number is greater than linked list length\n```"]