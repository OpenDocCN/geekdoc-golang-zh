- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:16:20'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Shuffle a string in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/shuffle-string-golang/](https://golangbyexample.com/shuffle-string-golang/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: '**   [Overview](#Overview "Overview")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Code:](#Code "Code:")*  *# **Overview**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**math/rand** package of GO provides a **Shuffle** method that can be used
    to shuffle a string. This method pseudo-randomizes the order of elements using
    the default source. pseudo-randomizes means that for a fixed input seed it will
    generate the same randomization. That is why in our program we will initialize
    the rand package with a different seed every time.'
  prefs: []
  type: TYPE_NORMAL
- en: Below is the signature of the function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This function takes in below arguments
  prefs: []
  type: TYPE_NORMAL
- en: First is the total number of characters in the given string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second is a swap function that will be called for different indexes **i**
    and **j.** You need to provide your own swap function that will swap your elements
    in the string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also note that this function will panic if n<0\. In Golang string is a sequence
    of bytes. A string literal actually represents a UTF-8 sequence of bytes. In UTF-8,
    ASCII characters are single-byte corresponding to the first 128 Unicode characters. All
    other characters are between 1 to 4 bytes. Due to this it is not possible to index
    a character in a string.  In GO, rune data type represents a Unicode point.  Once
    a string is converted to an array of rune then it is possible to index a character
    in that array of rune.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more the above issue here – [https://golangbyexample.com/number-characters-string-golang/](https://golangbyexample.com/number-characters-string-golang/)
  prefs: []
  type: TYPE_NORMAL
- en: For this reason in the below program for shuffling a given string , we are first
    converting a string into a rune array so that we can index into the rune array
    and use that index to swap characters in that string to shuffle the string.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: It will produce a different output on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)*   [shuffle](https://golangbyexample.com/tag/shuffle/)*   [string](https://golangbyexample.com/tag/string/)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
