- en: <!--yml
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-10-13 06:20:10'
  prefs: []
  type: TYPE_NORMAL
- en: -->
  prefs: []
  type: TYPE_NORMAL
- en: Struct Field Meta or Tags in Go (Golang)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://golangbyexample.com/struct-field-meta-or-tags/](https://golangbyexample.com/struct-field-meta-or-tags/)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A struct in go also allows adding metadata to its fields. These meta fields
    can be used to encode decode into different forms, doing some forms of validations
    on struct fields, etc. So basically any meta information can be stored with fields
    of a struct and can be used by any package or library for different purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Below is the format for attaching a meta-data. Meta-data is a string literal
    i.e it is enclosed in backquotes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Let’s see an example of JSON meta or tags. **Marshal** and **MarshalIndent**
    function of **encoding/json** package can be used to print a struct in JSON format.
    These functions utilize the JSON meta tags of the struct fields while encoding
    decoding. While printing these tags will be used as the key names.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s add JSON tags to employee struct as below. **MarshalIndent** function
    will use the key name specified in the tags
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let’s see full program
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The key name in the output is same as specified in the JSON meta tags.
  prefs: []
  type: TYPE_NORMAL
- en: '[go](https://golangbyexample.com/tag/go/)*   [golang](https://golangbyexample.com/tag/golang/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
